cscope 15 D:\work\mine\121203_2.5G_L4\MUX\mux≤Œøº¥˙¬Î( ’ºØ)\gsmmux-alpha-2"               0000036755
	@buffer.c

24 
	~"buf„r.h
"

25 
	~"gsm0710.h
"

26 
	~<°dlib.h
>

27 
	~<°rög.h
>

28 
	~<°dio.h
>

29 
	~<sy¶og.h
>

31 c⁄° 
	gr_¸˘abÀ
[256] = {

65 
	$make_fcs
(c⁄° *
öput
, 
cou¡
) {

66 
fcs
 = 0xFF;

67 
i
;

68 
i
 = 0; i < 
cou¡
; i++) {

69 
fcs
 = 
r_¸˘abÀ
[fcs^
öput
[
i
]];

71  (0xFF-
fcs
);

72 
	}
}

75 
GSM0710_Buf„r
 *
	$gsm0710_buf„r_öô
() {

76 
GSM0710_Buf„r
 *
buf
;

77 i‡((
buf
 = 
	`mÆloc
((
GSM0710_Buf„r
)))) {

78 
	`mem£t
(
buf
, 0, (
GSM0710_Buf„r
));

79 
buf
->
ªadp
 = buf->
d©a
;

80 
buf
->
wrôï
 = buf->
d©a
;

81 
buf
->
ídp
 = buf->
d©a
 + 
GSM0710_BUFFER_SIZE
;

83  
buf
;

84 
	}
}

86 
	$gsm0710_buf„r_de°roy
(
GSM0710_Buf„r
 *
buf
) {

87 
	`‰ì
(
buf
);

88 
	}
}

90 
	$gsm0710_buf„r_wrôe
(
GSM0710_Buf„r
 *
buf
, c⁄° *
öput
, 
cou¡
) {

91 
c
=
buf
->
ídp
 - buf->
wrôï
;

93 
cou¡
 = 
	`mö
(cou¡, 
	`gsm0710_buf„r_‰ì
(
buf
));

94 i‡(
cou¡
 > 
c
) {

95 
	`mem˝y
(
buf
->
wrôï
, 
öput
, 
c
);

96 
	`mem˝y
(
buf
->
d©a
, 
öput
+
c
, 
cou¡
-c);

97 
buf
->
wrôï
 = buf->
d©a
 + (
cou¡
-
c
);

99 
	`mem˝y
(
buf
->
wrôï
, 
öput
, 
cou¡
);

100 
buf
->
wrôï
 +
cou¡
;

101 i‡(
buf
->
wrôï
 =buf->
ídp
)

102 
buf
->
wrôï
 = buf->
d©a
;

105  
cou¡
;

106 
	}
}

108 
GSM0710_Føme
 *
	$gsm0710_buf„r_gë_‰ame
(
GSM0710_Buf„r
 *
buf
) {

109 
íd
;

110 
Àngth_√eded
 = 5;

111 *
d©a
;

112 
fcs
 = 0xFF;

114 
GSM0710_Føme
 *
‰ame
 = 
NULL
;

117 !
buf
->
Êag_found
 && 
	`gsm0710_buf„r_Àngth
(buf) > 0) {

118 i‡(*
buf
->
ªadp
 =
F_FLAG
)

119 
buf
->
Êag_found
 = 1;

120 
	`INC_BUF_POINTER
(
buf
, buf->
ªadp
);

122 i‡(!
buf
->
Êag_found
)

123  
NULL
;

126 
	`gsm0710_buf„r_Àngth
(
buf
) > 0 &&

127 (*
buf
->
ªadp
 =
F_FLAG
)) {

128 
	`INC_BUF_POINTER
(
buf
, buf->
ªadp
);

131 i‡(
	`gsm0710_buf„r_Àngth
(
buf
Ë>
Àngth_√eded
) {

132 
d©a
 = 
buf
->
ªadp
;

133 
‰ame
 = 
	`mÆloc
((
GSM0710_Føme
));

135 
‰ame
->
ch™√l
 = ((*
d©a
 & 252) >> 2);

136 
fcs
 = 
r_¸˘abÀ
[fcs^*
d©a
];

137 
	`INC_BUF_POINTER
(
buf
,
d©a
);

139 
‰ame
->
c⁄åﬁ
 = *
d©a
;

140 
fcs
 = 
r_¸˘abÀ
[fcs^*
d©a
];

141 
	`INC_BUF_POINTER
(
buf
,
d©a
);

143 
‰ame
->
d©a_Àngth
 = (*
d©a
 & 254) >> 1;

144 
fcs
 = 
r_¸˘abÀ
[fcs^*
d©a
];

145 i‡((*
d©a
 & 1) == 0) {

154 
	`‰ì
(
‰ame
);

155 
buf
->
ªadp
 = 
d©a
;

156 
buf
->
Êag_found
 = 0;

157  
	`gsm0710_buf„r_gë_‰ame
(
buf
);

159 
Àngth_√eded
 +
‰ame
->
d©a_Àngth
;

160 i‡(!(
	`gsm0710_buf„r_Àngth
(
buf
Ë>
Àngth_√eded
)) {

161 
	`‰ì
(
‰ame
);

162  
NULL
;

164 
	`INC_BUF_POINTER
(
buf
,
d©a
);

166 i‡(
‰ame
->
d©a_Àngth
 > 0) {

167 i‡((
‰ame
->
d©a
 = 
	`mÆloc
(()*‰ame->
d©a_Àngth
))) {

168 
íd
 = 
buf
->
ídp
 - 
d©a
;

169 i‡(
‰ame
->
d©a_Àngth
 > 
íd
) {

170 
	`mem˝y
(
‰ame
->
d©a
, d©a, 
íd
);

171 
	`mem˝y
(
‰ame
->
d©a
+
íd
, 
buf
->d©a, føme->
d©a_Àngth
-end);

172 
d©a
 = 
buf
->d©®+ (
‰ame
->
d©a_Àngth
-
íd
);

174 
	`mem˝y
(
‰ame
->
d©a
, d©a, føme->
d©a_Àngth
);

175 
d©a
 +
‰ame
->
d©a_Àngth
;

176 i‡(
d©a
 =
buf
->
ídp
)

177 
d©a
 = 
buf
->data;

179 i‡(
	`FRAME_IS
(
UI
, 
‰ame
)) {

180 
íd
 = 0;Énd < 
‰ame
->
d©a_Àngth
;Énd++)

181 
fcs
 = 
r_¸˘abÀ
[fcs^(
‰ame
->
d©a
[
íd
])];

184 
	`sy¶og
(
LOG_ALERT
,"Out of memory, whenállocating space for frame data.\n");

185 
‰ame
->
d©a_Àngth
 = 0;

189 i‡(
r_¸˘abÀ
[
fcs
^(*
d©a
)] != 0xCF) {

190 
	`sy¶og
(
LOG_INFO
,"Dropping frame: FCS doesn't match\n");

191 
	`de°roy_‰ame
(
‰ame
);

192 
buf
->
Êag_found
 = 0;

193 
buf
->
dr›≥d_cou¡
++;

194 
buf
->
ªadp
 = 
d©a
;

195  
	`gsm0710_buf„r_gë_‰ame
(
buf
);

198 
	`INC_BUF_POINTER
(
buf
,
d©a
);

199 i‡(*
d©a
 !
F_FLAG
) {

200 
	`sy¶og
(
LOG_WARNING
, "Dr›pög føme: End fœgÇŸ found. In°ód: %d\n", *
d©a
);

201 
	`de°roy_‰ame
(
‰ame
);

202 
buf
->
Êag_found
 = 0;

203 
buf
->
dr›≥d_cou¡
++;

204 
buf
->
ªadp
 = 
d©a
;

205  
	`gsm0710_buf„r_gë_‰ame
(
buf
);

207 
buf
->
ª˚ived_cou¡
++;

209 
	`INC_BUF_POINTER
(
buf
,
d©a
);

211 
buf
->
ªadp
 = 
d©a
;

213  
‰ame
;

214 
	}
}

216 
	$de°roy_‰ame
(
GSM0710_Føme
 *
‰ame
) {

217 i‡(
‰ame
->
d©a_Àngth
 > 0)

218 
	`‰ì
(
‰ame
->
d©a
);

219 
	`‰ì
(
‰ame
);

220 
	}
}

	@buffer.h

1 #i‚de‡
_GSM0710_BUFFER_H_


2 
	#_GSM0710_BUFFER_H_


	)

27 #i‚de‡
mö


28 
	#mö
(
a
,
b
Ë(◊ < bË?á :b)

	)

32 
	sGSM0710_Føme
 {

33 
	mch™√l
;

34 
	mc⁄åﬁ
;

35 
	md©a_Àngth
;

36 *
	md©a
;

37 } 
	tGSM0710_Føme
;

39 
	#GSM0710_BUFFER_SIZE
 2048

	)

41 
	sGSM0710_Buf„r
 {

42 
	md©a
[
GSM0710_BUFFER_SIZE
];

43 *
	mªadp
;

44 *
	mwrôï
;

45 *
	mídp
;

46 
	mÊag_found
;

47 
	mª˚ived_cou¡
;

48 
	mdr›≥d_cou¡
;

49 } 
	tGSM0710_Buf„r
;

52 
	#INC_BUF_POINTER
(
buf
,
p
Ëp++; i‡’ =buf->
ídp
Ë∞buf->
d©a
;

	)

59 
GSM0710_Buf„r
 *
gsm0710_buf„r_öô
();

66 
gsm0710_buf„r_de°roy
(
GSM0710_Buf„r
 *
buf
);

72 
	#gsm0710_buf„r_Àngth
(
buf
Ë((buf->
ªadp
 > buf->
wrôï
Ë? (
GSM0710_BUFFER_SIZE
 - (buf->ªad∞- buf->wrôï)Ë: (buf->wrôï-buf->ªadp))

	)

77 
	#gsm0710_buf„r_‰ì
(
buf
Ë((buf->
ªadp
 > buf->
wrôï
Ë? (buf->ªad∞- buf->wrôïË: (
GSM0710_BUFFER_SIZE
 - (buf->wrôï-buf->ªadp)))

	)

88 
gsm0710_buf„r_ªad
(
GSM0710_Buf„r
 *
buf
, *
ouçut
, 
cou¡
);

100 
gsm0710_buf„r_wrôe2ch
(
GSM0710_Buf„r
 *
buf
, 
ch™√l
,

101 c⁄° *
öput
, 
cou¡
);

112 
gsm0710_buf„r_wrôe
(
GSM0710_Buf„r
 *
buf
, c⁄° *
öput
, 
cou¡
);

122 
GSM0710_Føme
 *
gsm0710_buf„r_gë_‰ame
(
GSM0710_Buf„r
 *
buf
);

125 
de°roy_‰ame
(
GSM0710_Føme
 *
‰ame
);

135 
make_fcs
(c⁄° *
öput
, 
cou¡
);

	@gsm0710.c

61 #ifde‡
HAVE_CONFIG_H


62 
	~<c⁄fig.h
>

65 #i‚de‡
_GNU_SOURCE


67 
	#_GNU_SOURCE


	)

69 
	~<„©uªs.h
>

70 
	~<°dlib.h
>

71 
	~<uni°d.h
>

72 
	~<°rög.h
>

73 
	~<°dio.h
>

74 
	~<time.h
>

75 
	~<î∫o.h
>

76 
	~<f˙é.h
>

77 
	~<sig«l.h
>

78 
	~<ãrmios.h
>

79 
	~<sys/time.h
>

80 
	~<sys/io˘l.h
>

81 
	~<sys/sockë.h
>

82 
	~<°rög.h
>

83 
	~<∑ths.h
>

84 
	~<sys/ty≥s.h
>

85 
	~<sys/°©.h
>

86 
	~<sys/waô.h
>

88 
	~<sy¶og.h
>

90 
	~"buf„r.h
"

91 
	~"gsm0710.h
"

93 
	#DEFAULT_NUMBER_OF_PORTS
 3

	)

94 
	#WRITE_RETRIES
 5

	)

95 
	#MAX_CHANNELS
 32

	)

97 
	#TRUE
 1

	)

98 
	#FALSE
 0

	)

100 
	#UNKNOW_MODEM
 0

	)

101 
	#MC35
 1

	)

102 
	#GENERIC
 2

	)

105 
	#POLLING_INTERVAL
 5

	)

106 
	#MAX_PINGS
 4

	)

108 vﬁ©ûê
	gãrmö©e
 = 0;

109 
	gãrmö©eCou¡
 = 0;

110 * 
	gdevSymlökPªfix
 = 0;

111 *
	gus•_fd
;

112 
	g£rül_fd
;

113 
Ch™√l_Sètus
 *
	gc°©us
;

114 
	gmax_‰ame_size
 = 31;

115 
	gwaô_f‹_d´m⁄_°©us
 = 0;

117 
GSM0710_Buf„r
 *
	gö_buf
;

119 
	g_debug
 = 0;

120 
pid_t
 
	gthe_pid
;

121 
	g_¥i‹ôy
;

122 
	g_modem_ty≥
;

123 *
	g£Ω‹tdev
;

124 
	gpö_code
 = 0;

125 *
	g±ydev
[
MAX_CHANNELS
];

126 
	gnumOfP‹ts
;

127 
	gmaxfd
;

128 
	gbaudøã
 = 0;

129 *
	gªmaöög
;

130 
	gÁu…Tﬁî™t
 = 0;

131 
	gª°¨t
 = 0;

136 
	gbaudøãs
[] = {

139 
•ìd_t
 
	gbaud_bôs
[] = {

140 0, 
B9600
, 
B19200
, 
B38400
, 
B57600
, 
B115200
, 
B230400
, 
B460800
 };

150 
	$us•_›í
(
p‹t
)

152 
fd
;

153 
«me
[] = "ser0\0";

155 
«me
[3] = (Ë(0x30 + 
p‹t
);

156 
	`PDEBUG
("O≥¿£rü»p‹à%†", 
«me
);

157 
fd
 = 
	`›í
(
«me
, 
O_RDWR
 | 
O_NONBLOCK
);

158 
	`PDEBUG
("done.\n");

160  
fd
;

161 
	}
}

167 
	$us•_c⁄√˘ed
(
p‹t
)

170 
us•_›î©i⁄
 
›
;

172 
›
.› = 
USSP_OPEN_RESULT
;

173 i‡(
c°©us
[
p‹t
 + 1].
›íed
)

174 
›
.
¨g
 = 0;

176 
›
.
¨g
 = -1;

177 
›
.
Àn
 = 0;

178 
	`wrôe
(
us•_fd
[
p‹t
], &
›
, (op));

180 
	`PDEBUG
("USSPÖ‹à%d o≥√d.\n", 
p‹t
);

185 
	}
}

200 
	$wrôe_‰ame
(
ch™√l
, c⁄° *
öput
, 
cou¡
, 
ty≥
)

203 
¥efix
[5] = { 
F_FLAG
, 
EA
 | 
CR
, 0, 0, 0 };

204 
po°fix
[2] = { 0xFF, 
F_FLAG
 };

205 
¥efix_Àngth
 = 4, 
c
;

207 if(
_debug
)

208 
	`sy¶og
(
LOG_DEBUG
,"£nd fømêtÿch: %d \n", 
ch™√l
);

210 
¥efix
[1] =Öªfix[1] | ((63 & (Ë
ch™√l
) << 2);

212 
¥efix
[2] = 
ty≥
;

215 
cou¡
 = 
	`mö
(
max_‰ame_size
, count);

218 i‡(
cou¡
 > 127)

220 
¥efix_Àngth
 = 5;

221 
¥efix
[3] = ((127 & 
cou¡
) << 1);

222 
¥efix
[4] = (32640 & 
cou¡
) >> 7;

226 
¥efix
[3] = 1 | (
cou¡
 << 1);

229 
po°fix
[0] = 
	`make_fcs
(
¥efix
 + 1, 
¥efix_Àngth
 - 1);

231 
c
 = 
	`wrôe
(
£rül_fd
, 
¥efix
, 
¥efix_Àngth
);

232 i‡(
c
 !
¥efix_Àngth
)

234 if(
_debug
)

235 
	`sy¶og
(
LOG_DEBUG
,"Couldn'àwrôêthêwhﬁê¥efixÅÿthê£rü»p‹àf‹ÅhêvútuÆÖ‹à%d. WrŸê⁄ly %d byãs.", 
ch™√l
, 
c
);

238 i‡(
cou¡
 > 0)

240 
c
 = 
	`wrôe
(
£rül_fd
, 
öput
, 
cou¡
);

241 i‡(
cou¡
 !
c
)

243 if(
_debug
)

244 
	`sy¶og
(
LOG_DEBUG
,"Couldn'àwrôêÆ»d©®tÿthê£rü»p‹à‰omÅhêvútuÆÖ‹à%d. WrŸê⁄ly %d byãs.\n", 
ch™√l
, 
c
);

248 
c
 = 
	`wrôe
(
£rül_fd
, 
po°fix
, 2);

249 i‡(
c
 != 2)

251 if(
_debug
)

252 
	`sy¶og
(
LOG_DEBUG
,"Couldn'àwrôêthêwhﬁêpo°fixÅÿthê£rü»p‹àf‹ÅhêvútuÆÖ‹à%d. WrŸê⁄ly %d byãs.", 
ch™√l
, 
c
);

256  
cou¡
;

257 
	}
}

272 
	$us•_ªcv_d©a
(*
buf
, 
Àn
, 
p‹t
)

275 
n
, 
wrôãn
;

276 
pkt_buf
[4096];

277 
us•_›î©i⁄
 *
›
 = (us•_›î©i⁄ *Ë
pkt_buf
, *
t›
;

278 
ãrmios
 *
tio•
;

279 
i
;

280 
msc
[5] = { 
CR
 | 
C_MSC
, 0x5, 0, 0, 1 };

282 
	`PDEBUG
–"(DEBUGË%†chamada\n", 
__FUNCTION__
);

284 
	`mem˝y
(
pkt_buf
, 
buf
, 
Àn
);

285 
n
 = 
Àn
;

286 
›
 = (
us•_›î©i⁄
 *Ë
pkt_buf
;

288 
t›
 = 
›
;

290 ((*Ë
t›
 + (
us•_›î©i⁄
Ë<((*Ë
›
Ë+ 
n
)

291 && ((*Ë
t›
 + (
us•_›î©i⁄
Ë+Å›->
Àn
 <((*Ë
›
Ë+ 
n
);

292 
t›
 = (
us•_›î©i⁄
 *Ë(((*Ët›Ë+Å›->
Àn
 + (ussp_operation)))

295 
t›
->
›
)

297 
USSP_OPEN
:

298 
	`us•_c⁄√˘ed
(
p‹t
);

300 
USSP_CLOSE
:

301 
	`PDEBUG
("Clo£ us•Ö‹à%d\n", 
p‹t
);

303 
USSP_WRITE
:

304 
wrôãn
 = 0;

305 
i
 = 0;

307 (
wrôãn
 +
	`wrôe_‰ame
(
p‹t
 + 1, 
t›
->
d©a
 + written,

308 
t›
->
Àn
 - 
wrôãn
, 
UIH
)Ë!t›->À¿&& 
i
 < 
WRITE_RETRIES
)

310 
i
++;

312 i‡(
i
 =
WRITE_RETRIES
)

314 
	`PDEBUG
("Couldn't write dataÅo channel %d. Wrote only %d bytes, when should have written %ld.\n",

315 (
p‹t
 + 1), 
wrôãn
, 
t›
->
Àn
);

318 
USSP_SET_TERMIOS
:

319 
tio•
 = (
ãrmios
 *Ë(
t›
 + 1);

320 i‡((
tio•
->
c_cÊag
 & 
CBAUD
Ë=
B0
 && (
c°©us
[(
p‹t
 + 1)].
v24_sig«ls
 & 
S_RTC
) > 0)

323 
	`PDEBUG
("Drop DTR.\n");

324 
msc
[2] = 3 | ((63 & (
p‹t
 + 1)) << 2);

325 
msc
[3] = 
c°©us
[(
p‹t
 + 1)].
v24_sig«ls
 & ~
S_RTC
;

326 
c°©us
[(
p‹t
 + 1)].
v24_sig«ls
 = 
msc
[3];

327 
	`wrôe_‰ame
(0, 
msc
, 4, 
UIH
);

329 i‡((
tio•
->
c_cÊag
 & 
CBAUD
Ë!
B0
 && (
c°©us
[(
p‹t
 + 1)].
v24_sig«ls
 & 
S_RTC
) == 0)

332 
	`PDEBUG
("DTR up.\n");

333 
msc
[2] |((63 & (
p‹t
 + 1)) << 2);

334 
msc
[3] = 
c°©us
[(
p‹t
 + 1)].
v24_sig«ls
 | 
S_RTC
;

335 
c°©us
[(
p‹t
 + 1)].
v24_sig«ls
 = 
msc
[3];

336 
	`wrôe_‰ame
(0, 
msc
, 4, 
UIH
);

338 #ifde‡
DEBUG


339 
	`PDEBUG
("SëÅîmio†f‹ us•Ö‹à%d\n", 
p‹t
);

340 
	`PDEBUG
("\töpuàmodêÊags: 0x%04x\n", 
tio•
->
c_iÊag
);

341 
	`PDEBUG
("\touçuàmodêÊags: 0x%04x\n", 
tio•
->
c_oÊag
);

342 
	`PDEBUG
("\tc⁄åﬁ modêÊags: 0x%04x\n", 
tio•
->
c_cÊag
);

343 
	`PDEBUG
("\éoˇ»modêÊags: 0x%04x\n", 
tio•
->
c_lÊag
);

344 
	`PDEBUG
("\éöêdiscùlöe: 0x%02x\n", 
tio•
->
c_löe
);

345 
	`PDEBUG
("\tcontrol characters: ");

346 
i
 = 0; i < 
NCCS
; i++)

347 
	`PDEBUG
("0x%02x ", 
tio•
->
c_cc
[
i
]);

348 
	`PDEBUG
("\n");

349 
	`PDEBUG
("\töpuà•ìd: 0x%02x (%i)\n", 
tio•
->
c_i•ìd
,Åiosp->c_ispeed);

350 
	`PDEBUG
("\touçuà•ìd: 0x%02x (%i)\n", 
tio•
->
c_o•ìd
,Åiosp->c_ospeed);

353 
USSP_MSC
:

354 
	`PDEBUG
("Modem signal change\n");

355 
msc
[2] = 3 | ((63 & (
p‹t
 + 1)) << 2);

356 
msc
[3] = 
S_DV
;

357 i‡((
t›
->
¨g
 & 
USSP_DTR
) == USSP_DTR)

359 
msc
[3] |
S_RTC
;

360 
	`PDEBUG
("RTC\n");

362 i‡((
t›
->
¨g
 & 
USSP_RTS
) == USSP_RTS)

364 
msc
[3] |
S_RTR
;

365 
	`PDEBUG
("RTR\n");

369 
msc
[3] |
S_FC
;

370 
	`PDEBUG
("FC\n");

372 
c°©us
[(
p‹t
 + 1)].
v24_sig«ls
 = 
msc
[3];

373 
	`wrôe_‰ame
(0, 
msc
, 4, 
UIH
);

376 
	`PDEBUG
("Unknow¿code: %d\n", 
t›
->
›
);

383  ((*Ë
›
 + 
n
Ë- (*Ë
t›
;

385 
wrôãn
 = 0;

386 
i
 = 0;

387 
œ°
 = 0;

389 
wrôãn
 !
Àn
 && 
i
 < 
WRITE_RETRIES
)

391 
œ°
 = 
	`wrôe_‰ame
(
p‹t
 + 1, 
buf
 + 
wrôãn
,

392 
Àn
 - 
wrôãn
, 
UIH
);

393 
wrôãn
 +
œ°
;

394 i‡(
œ°
 == 0) {

395 
i
++;

398 i‡(
i
 =
WRITE_RETRIES
)

400 if(
_debug
)

401 
	`sy¶og
(
LOG_DEBUG
,"Couldn't write dataÅo channel %d. Wrote only %d bytes, when should have written %ld.\n",

402 (
p‹t
 + 1), 
wrôãn
, ()
Àn
);

406 
	}
}

409 
	$us•_£nd_d©a
(*
buf
, 
n
, 
p‹t
)

412 
us•_›î©i⁄
 *
›
;

414 
›
 = 
	`mÆloc
((
us•_›î©i⁄
Ë+ 
n
);

416 
›
->› = 
USSP_READ
;

417 
›
->
¨g
 = 0;

418 
›
->
Àn
 = 
n
;

419 
	`mem˝y
(
›
->
d©a
, 
buf
, 
n
);

421 
	`wrôe
(
us•_fd
[
p‹t
], 
›
, (
us•_›î©i⁄
Ë+ 
n
);

423 
	`‰ì
(
›
);

425 if(
_debug
)

426 
	`sy¶og
(
LOG_DEBUG
,"£nd d©®tÿp‹àvútuÆÖ‹à%d\n", 
p‹t
);

427 
	`wrôe
(
us•_fd
[
p‹t
], 
buf
, 
n
);

429  
n
;

430 
	}
}

434 
	$födInBuf
(* 
buf
, 
Àn
, * 
√edÀ
) {

435 
i
;

436 
√edÀM©chedPos
=0;

438 i‡(
√edÀ
[0] == '\0') {

442 
i
=0;i<
Àn
;i++) {

443 i‡(
√edÀ
[
√edÀM©chedPos
] =
buf
[
i
]) {

444 
√edÀM©chedPos
++;

445 i‡(
√edÀ
[
√edÀM©chedPos
] == '\0') {

450 
√edÀM©chedPos
=0;

454 
	}
}

466 
	$©_comm™d
(
fd
, *
cmd
, 
to
)

468 
fd_£t
 
rfds
;

469 
timevÆ
 
timeout
;

470 
buf
[1024];

471 
£l
, 
Àn
, 
i
;

472 
ªtu∫Code
 = 0;

473 
wrŸe
 = 0;

475 if(
_debug
)

476 
	`sy¶og
(
LOG_DEBUG
, "i†ö %s\n", 
__FUNCTION__
);

478 
wrŸe
 = 
	`wrôe
(
fd
, 
cmd
, 
	`°æí
(cmd));

480 if(
_debug
)

481 
	`sy¶og
(
LOG_DEBUG
, " wrŸê %d \n", 
wrŸe
);

483 
	`tcdøö
(
fd
);

484 
	`¶ìp
(1);

488 
i
 = 0; i < 100; i++)

491 
	`FD_ZERO
(&
rfds
);

492 
	`FD_SET
(
fd
, &
rfds
);

494 
timeout
.
tv_£c
 = 0;

495 
timeout
.
tv_u£c
 = 
to
;

497 i‡((
£l
 = 
	`£À˘
(
fd
 + 1, &
rfds
, 
NULL
, NULL, &
timeout
)) > 0)

501 i‡(
	`FD_ISSET
(
fd
, &
rfds
))

503 
	`mem£t
(
buf
, 0, (buf));

504 
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf));

505 if(
_debug
)

506 
	`sy¶og
(
LOG_DEBUG
, "Ñód %d byã†=%s\n", 
Àn
, 
buf
);

509 i‡(
	`födInBuf
(
buf
, 
Àn
, "OK"))

511 
ªtu∫Code
 = 1;

514 i‡(
	`födInBuf
(
buf
, 
Àn
, "ERROR"))

522  
ªtu∫Code
;

523 
	}
}

525 *
	$¸óãSymlökName
(
idx
) {

526 i‡(
devSymlökPªfix
 =
NULL
) {

527  
NULL
;

529 * 
symLökName
 = 
	`mÆloc
(
	`°æí
(
devSymlökPªfix
)+255);

530 
	`•rötf
(
symLökName
, "%s%d", 
devSymlökPªfix
, 
idx
);

531  
symLökName
;

532 
	}
}

534 
	$›í_±y
(* 
dev«me
, 
idx
) {

535 
ãrmios
 
›ti⁄s
;

536 
fd
 = 
	`›í
(
dev«me
, 
O_RDWR
 | 
O_NONBLOCK
);

537 *
symLökName
 = 
	`¸óãSymlökName
(
idx
);

538 i‡(
fd
 != -1) {

539 i‡(
symLökName
) {

540 * 
±sSœveName
 = 
	`±¢ame
(
fd
);

543 
	`u∆ök
(
symLökName
);

544 i‡(
	`symlök
(
±sSœveName
, 
symLökName
) != 0) {

545 
	`sy¶og
(
LOG_ERR
,"C™'à¸óã symbﬁi¯lök %†-> %s. %†(%d).\n", 
symLökName
, 
±sSœveName
, 
	`°ªº‹
(
î∫o
),Érrno);

549 
	`tcgë©å
(
fd
, &
›ti⁄s
);

551 
›ti⁄s
.
c_lÊag
 &~(
ICANON
 | 
ECHO
 | 
ECHOE
 | 
ISIG
);

552 
›ti⁄s
.
c_iÊag
 &~(
INLCR
 | 
ICRNL
 | 
IGNCR
);

555 
›ti⁄s
.
c_oÊag
 &~
OPOST
;

556 
›ti⁄s
.
c_oÊag
 &~
OLCUC
;

557 
›ti⁄s
.
c_oÊag
 &~
ONLRET
;

558 
›ti⁄s
.
c_oÊag
 &~
ONOCR
;

559 
›ti⁄s
.
c_oÊag
 &~
OCRNL
;

560 
	`tc£èâr
(
fd
, 
TCSANOW
, &
›ti⁄s
);

562 i‡(
	`°rcmp
(
dev«me
, "/dev/ptmx") == 0) {

564 
	`gø¡±
(
fd
);

565 
	`u∆ock±
(
fd
);

568 
	`‰ì
(
symLökName
);

569  
fd
;

570 
	}
}

576 
	$ödexOfBaud
(
baudøã
) {

577 
i
;

579 
i
 = 0; i < (
baudøãs
) / (baudrates[0]); ++i) {

580 i‡(
baudøãs
[
i
] =
baudøã
)

581  
i
;

584 
	}
}

591 
	$£tAdv™˚dO±i⁄s
(
fd
, 
•ìd_t
 
baud
) {

592 
ãrmios
 
›ti⁄s
;

593 
ãrmios
 
›ti⁄s_˝y
;

595 
	`f˙é
(
fd
, 
F_SETFL
, 0);

598 
	`tcgë©å
(
fd
, &
›ti⁄s
);

601 
	`cf£ti•ìd
(&
›ti⁄s
, 0);

602 
	`cf£to•ìd
(&
›ti⁄s
, 0);

604 
›ti⁄s
.
c_iÊag
 = 
IGNBRK
;

607 
›ti⁄s
.
c_cÊag
 = (
CLOCAL
 | 
CREAD
 | 
CS8
 | 
HUPCL
);

611 
›ti⁄s
.
c_cÊag
 |
baud
;

620 
›ti⁄s
.
c_lÊag
 &~(
ICANON
 | 
ECHO
 | 
ECHOE
 | 
ISIG
);

621 
›ti⁄s
.
c_iÊag
 &~(
INLCR
 | 
ICRNL
 | 
IGNCR
);

624 
›ti⁄s
.
c_oÊag
 &~
OPOST
;

625 
›ti⁄s
.
c_oÊag
 &~
OLCUC
;

626 
›ti⁄s
.
c_oÊag
 &~
ONLRET
;

627 
›ti⁄s
.
c_oÊag
 &~
ONOCR
;

628 
›ti⁄s
.
c_oÊag
 &~
OCRNL
;

631 
›ti⁄s_˝y
 = 
›ti⁄s
;

632 
	`tc£èâr
(
fd
, 
TCSANOW
, &
›ti⁄s
);

633 
›ti⁄s
 = 
›ti⁄s_˝y
;

636 
›ti⁄s
.
c_cÊag
 &~
baud
;

637 
	`tc£èâr
(
fd
, 
TCSANOW
, &
›ti⁄s
);

638 
›ti⁄s
 = 
›ti⁄s_˝y
;

640 
	`¶ìp
(1);

642 
›ti⁄s
.
c_cÊag
 |
baud
;

643 
	`tc£èâr
(
fd
, 
TCSANOW
, &
›ti⁄s
);

644 
	}
}

654 
	$›í_£rüÕ‹t
(*
dev
)

656 
fd
;

658 if(
_debug
)

659 
	`sy¶og
(
LOG_DEBUG
, "i†ö %s\n" , 
__FUNCTION__
);

660 
fd
 = 
	`›í
(
dev
, 
O_RDWR
 | 
O_NOCTTY
 | 
O_NDELAY
);

661 i‡(
fd
 != -1)

663 
ödex
 = 
	`ödexOfBaud
(
baudøã
);

664 if(
_debug
)

665 
	`sy¶og
(
LOG_DEBUG
, "serial opened\n" );

666 i‡(
ödex
 > 0) {

669 
	`£tAdv™˚dO±i⁄s
(
fd
, 
baud_bôs
[
ödex
]);

671 
ãrmios
 
›ti⁄s
;

673 
	`f˙é
(
fd
, 
F_SETFL
, 0);

676 
	`tcgë©å
(
fd
, &
›ti⁄s
);

683 
›ti⁄s
.
c_cÊag
 |(
CLOCAL
 | 
CREAD
);

686 
›ti⁄s
.
c_cÊag
 &~
PARENB
;

687 
›ti⁄s
.
c_cÊag
 &~
CSTOPB
;

688 
›ti⁄s
.
c_cÊag
 &~
CSIZE
;

689 
›ti⁄s
.
c_cÊag
 |
CS8
;

695 
›ti⁄s
.
c_lÊag
 &~(
ICANON
 | 
ECHO
 | 
ECHOE
 | 
ISIG
);

696 
›ti⁄s
.
c_iÊag
 &~(
INLCR
 | 
ICRNL
 | 
IGNCR
);

699 
›ti⁄s
.
c_oÊag
 &~
OPOST
;

700 
›ti⁄s
.
c_oÊag
 &~
OLCUC
;

701 
›ti⁄s
.
c_oÊag
 &~
ONLRET
;

702 
›ti⁄s
.
c_oÊag
 &~
ONOCR
;

703 
›ti⁄s
.
c_oÊag
 &~
OCRNL
;

706 
	`tc£èâr
(
fd
, 
TCSANOW
, &
›ti⁄s
);

709  
fd
;

710 
	}
}

713 
	$¥öt_‰ame
(
GSM0710_Føme
 * 
‰ame
)

715 if(
_debug
)

717 
	`sy¶og
(
LOG_DEBUG
, "i†ö %s\n" , 
__FUNCTION__
);

718 
	`sy¶og
(
LOG_DEBUG
,"Received ");

721 (
‰ame
->
c⁄åﬁ
 & ~
PF
))

723 
SABM
:

724 if(
_debug
)

725 
	`sy¶og
(
LOG_DEBUG
,"SABM ");

727 
UIH
:

728 if(
_debug
)

729 
	`sy¶og
(
LOG_DEBUG
,"UIH ");

731 
UA
:

732 if(
_debug
)

733 
	`sy¶og
(
LOG_DEBUG
,"UA ");

735 
DM
:

736 if(
_debug
)

737 
	`sy¶og
(
LOG_DEBUG
,"DM ");

739 
DISC
:

740 if(
_debug
)

741 
	`sy¶og
(
LOG_DEBUG
,"DISC ");

743 
UI
:

744 if(
_debug
)

745 
	`sy¶og
(
LOG_DEBUG
,"UI ");

748 if(
_debug
)

749 
	`sy¶og
(
LOG_DEBUG
,"unkow¿(c⁄åﬁ=%dË", 
‰ame
->
c⁄åﬁ
);

752 if(
_debug
)

753 
	`sy¶og
(
LOG_DEBUG
," fømêf‹ ch™√»%d.\n", 
‰ame
->
ch™√l
);

755 i‡(
‰ame
->
d©a_Àngth
 > 0)

757 if(
_debug
)

759 
	`sy¶og
(
LOG_DEBUG
,"‰ame->d©®%†/ sizê%d\n",
‰ame
->
d©a
, føme->
d©a_Àngth
);

761 
	`sy¶og
(
LOG_DEBUG
,"\n");

765 
	}
}

769 
	$h™dÀ_comm™d
(
GSM0710_Føme
 * 
‰ame
)

772 
ty≥
, 
sig«ls
;

773 
Àngth
 = 0, 
i
, 
ty≥_Àngth
, 
ch™√l
, 
suµ‹ãd
 = 1;

774 *
ª•⁄£
;

777 if(
_debug
)

778 
	`sy¶og
(
LOG_DEBUG
, "i†ö %s\n" , 
__FUNCTION__
);

780 i‡(
‰ame
->
d©a_Àngth
 > 0)

782 
ty≥
 = 
‰ame
->
d©a
[0];

784 
i
 = 0; (
‰ame
->
d©a_Àngth
 > i && (‰ame->
d©a
[i] & 
EA
) == 0); i++);

785 
i
++;

786 
ty≥_Àngth
 = 
i
;

787 i‡((
ty≥
 & 
CR
) == CR)

792 
‰ame
->
d©a_Àngth
 > 
i
)

794 
Àngth
 = (Àngth * 128Ë+ ((
‰ame
->
d©a
[
i
] & 254) >> 1);

795 i‡((
‰ame
->
d©a
[
i
] & 1) == 1)

797 
i
++;

799 
i
++;

801 (
ty≥
 & ~
CR
))

803 
C_CLD
:

804 
	`sy¶og
(
LOG_INFO
,"The mobile stationÑequested mux-modeÅermination.\n");

805 i‡(
Áu…Tﬁî™t
) {

807 
ª°¨t
 = 1;

809 
ãrmö©e
 = 1;

810 
ãrmö©eCou¡
 = -1;

813 
C_TEST
:

814 #ifde‡
DEBUG


815 if(
_debug
)

816 
	`sy¶og
(
LOG_DEBUG
,"Test command: ");

817 if(
_debug
)

818 
	`sy¶og
(
LOG_DEBUG
,"‰ame->d©®%† / føme->d©a_Àngth = %d\n",
‰ame
->
d©a
 + 
i
, føme->
d©a_Àngth
 - i);

822 
C_MSC
:

823 i‡(
i
 + 1 < 
‰ame
->
d©a_Àngth
)

825 
ch™√l
 = ((
‰ame
->
d©a
[
i
] & 252) >> 2);

826 
i
++;

827 
sig«ls
 = (
‰ame
->
d©a
[
i
]);

832 if(
_debug
)

833 
	`sy¶og
(
LOG_DEBUG
,"Modem sètu†comm™d o¿ch™√»%d.\n", 
ch™√l
);

834 i‡((
sig«ls
 & 
S_FC
) == S_FC)

836 if(
_debug
)

837 
	`sy¶og
(
LOG_DEBUG
,"No framesállowed.\n");

842 if(
_debug
)

843 
	`sy¶og
(
LOG_DEBUG
,"Framesállowed.\n");

845 i‡((
sig«ls
 & 
S_RTC
) == S_RTC)

848 if(
_debug
)

849 
	`sy¶og
(
LOG_DEBUG
,"RTC\n");

851 i‡((
sig«ls
 & 
S_IC
) == S_IC)

854 if(
_debug
)

855 
	`sy¶og
(
LOG_DEBUG
,"Ring\n");

857 i‡((
sig«ls
 & 
S_DV
) == S_DV)

860 if(
_debug
)

861 
	`sy¶og
(
LOG_DEBUG
,"DV\n");

868 
	`sy¶og
(
LOG_ERR
,"ERROR: Modem sètu†comm™d, buànÿöfo. i: %d,Üí: %d, d©a-Àn: %d\n", 
i
, 
Àngth
,

869 
‰ame
->
d©a_Àngth
);

873 
	`sy¶og
(
LOG_ALERT
,"Unknow¿comm™d (%dË‰omÅhêc⁄åﬁ ch™√l.\n", 
ty≥
);

874 
ª•⁄£
 = 
	`mÆloc
((Ë* (2 + 
ty≥_Àngth
));

875 
ª•⁄£
[0] = 
C_NSC
;

877 
ª•⁄£
[1] = 
EA
 & ((127 & 
ty≥_Àngth
) << 1);

878 
i
 = 2;

879 
ty≥_Àngth
--)

881 
ª•⁄£
[
i
] = 
‰ame
->
d©a
[(i - 2)];

882 
i
++;

884 
	`wrôe_‰ame
(0, 
ª•⁄£
, 
i
, 
UIH
);

885 
	`‰ì
(
ª•⁄£
);

886 
suµ‹ãd
 = 0;

890 i‡(
suµ‹ãd
)

893 
‰ame
->
d©a
[0] = føme->d©a[0] & ~
CR
;

894 
	`wrôe_‰ame
(0, 
‰ame
->
d©a
, føme->
d©a_Àngth
, 
UIH
);

900 i‡(
	`COMMAND_IS
(
C_NSC
, 
ty≥
))

902 
	`sy¶og
(
LOG_ALERT
,"The mobile station didn't supportÅhe command sent.\n");

906 if(
_debug
)

907 
	`sy¶og
(
LOG_DEBUG
,"Commandácknowledged byÅhe mobile station.\n");

912 
	}
}

915 
	$ußge
(*
_«me
)

917 
	`Ârötf
(
°dîr
,"\nUßge: %†[›ti⁄s] <±y1> <±y2> ...\n",
_«me
);

918 
	`Ârötf
(
°dîr
," <ptyN> :Öty devices (e.g. /dev/ptya0)\n\n");

919 
	`Ârötf
(
°dîr
,"options:\n");

920 
	`Ârötf
(
°dîr
," -p <serport> : SerialÖort deviceÅo connectÅo [/dev/modem]\n");

921 
	`Ârötf
(
°dîr
," -f <framsize> : Maximum frame size [32]\n");

922 
	`Ârötf
(
°dîr
," -d : Debug mode, don't fork\n");

923 
	`Ârötf
(
°dîr
," -m <modem> : Modem (mc35, mc75, generic, ...)\n");

924 
	`Ârötf
(
°dîr
," -b <baudrate> : MUX mode baudrate (0,9600,19200, ...)\n");

925 
	`Ârötf
(
°dîr
," -P <PIN-code> : PIN codeÅo fedÅoÅhe modem\n");

926 
	`Ârötf
(
°dîr
," -s <symlink-prefix> : Prefix forÅhe symlinks of slave devices (e.g. /dev/mux)\n");

927 
	`Ârötf
(
°dîr
," -w : Wait for deamon startup success/failure\n");

928 
	`Ârötf
(
°dîr
," -r : Restartáutomatically ifÅhe modem stopsÑesponding\n");

929 
	`Ârötf
(
°dîr
," -h : ShowÅhis help message\n");

930 
	}
}

937 
	$exåa˘_‰ames
(
GSM0710_Buf„r
 * 
buf
)

940 
vîsi⁄_ã°
[] = "\x23\x21\x04TEMUXVERSION2\0\0";

941 
‰amesExåa˘ed
 = 0;

943 
GSM0710_Føme
 *
‰ame
;

945 if(
_debug
)

946 
	`sy¶og
(
LOG_DEBUG
, "i†ö %s\n" , 
__FUNCTION__
);

947 (
‰ame
 = 
	`gsm0710_buf„r_gë_‰ame
(
buf
)))

949 ++
‰amesExåa˘ed
;

950 i‡((
	`FRAME_IS
(
UI
, 
‰ame
Ë|| FRAME_IS(
UIH
, frame)))

952 if(
_debug
)

953 
	`sy¶og
(
LOG_DEBUG
, "is (FRAME_IS(UI, frame) || FRAME_IS(UIH, frame))\n");

954 i‡(
‰ame
->
ch™√l
 > 0)

956 if(
_debug
)

957 
	`sy¶og
(
LOG_DEBUG
,"frame->channel > 0\n");

959 
	`us•_£nd_d©a
(
‰ame
->
d©a
, føme->
d©a_Àngth
, føme->
ch™√l
 - 1);

964 if(
_debug
)

965 
	`sy¶og
(
LOG_DEBUG
,"control channel command\n");

966 
	`h™dÀ_comm™d
(
‰ame
);

972 if(
_debug
)

973 
	`sy¶og
(
LOG_DEBUG
,"notán information frame\n");

974 #ifde‡
DEBUG


975 
	`¥öt_‰ame
(
‰ame
);

977 (
‰ame
->
c⁄åﬁ
 & ~
PF
))

979 
UA
:

980 if(
_debug
)

981 
	`sy¶og
(
LOG_DEBUG
,"is FRAME_IS(UA, frame)\n");

982 i‡(
c°©us
[
‰ame
->
ch™√l
].
›íed
 == 1)

984 
	`sy¶og
(
LOG_INFO
,"Logiˇ»ch™√»%d clo£d.\n", 
‰ame
->
ch™√l
);

985 
c°©us
[
‰ame
->
ch™√l
].
›íed
 = 0;

989 
c°©us
[
‰ame
->
ch™√l
].
›íed
 = 1;

990 i‡(
‰ame
->
ch™√l
 == 0)

992 
	`sy¶og
(
LOG_INFO
,"Control channel opened.\n");

994 
	`wrôe_‰ame
(0, 
vîsi⁄_ã°
, 18, 
UIH
);

998 
	`sy¶og
(
LOG_INFO
,"Logiˇ»ch™√»%d o≥√d.\n", 
‰ame
->
ch™√l
);

1002 
DM
:

1003 i‡(
c°©us
[
‰ame
->
ch™√l
].
›íed
)

1005 
	`sy¶og
(
LOG_INFO
,"DMÑe˚ived, sÿthêch™√»%d wa†Æªady clo£d.\n", 
‰ame
->
ch™√l
);

1006 
c°©us
[
‰ame
->
ch™√l
].
›íed
 = 0;

1010 i‡(
‰ame
->
ch™√l
 == 0)

1012 
	`sy¶og
(
LOG_INFO
,"Couldn't open control channel.\n->Terminating.\n");

1013 
ãrmö©e
 = 1;

1014 
ãrmö©eCou¡
 = -1;

1018 
	`sy¶og
(
LOG_INFO
,"Logiˇ»ch™√»%d couldn'àbê›íed.\n", 
‰ame
->
ch™√l
);

1022 
DISC
:

1023 i‡(
c°©us
[
‰ame
->
ch™√l
].
›íed
)

1025 
c°©us
[
‰ame
->
ch™√l
].
›íed
 = 0;

1026 
	`wrôe_‰ame
(
‰ame
->
ch™√l
, 
NULL
, 0, 
UA
 | 
PF
);

1027 i‡(
‰ame
->
ch™√l
 == 0)

1029 
	`sy¶og
(
LOG_INFO
,"Control channel closed.\n");

1030 i‡(
Áu…Tﬁî™t
) {

1031 
ª°¨t
 = 1;

1033 
ãrmö©e
 = 1;

1034 
ãrmö©eCou¡
 = -1;

1039 
	`sy¶og
(
LOG_INFO
,"Logiˇ»ch™√»%d clo£d.\n", 
‰ame
->
ch™√l
);

1045 
	`sy¶og
(
LOG_INFO
,"Re˚ived DISCÉvíÅhough ch™√»%d wa†Æªady clo£d.\n", 
‰ame
->
ch™√l
);

1046 
	`wrôe_‰ame
(
‰ame
->
ch™√l
, 
NULL
, 0, 
DM
 | 
PF
);

1049 
SABM
:

1051 i‡(
c°©us
[
‰ame
->
ch™√l
].
›íed
 == 0)

1053 i‡(
‰ame
->
ch™√l
 == 0)

1055 
	`sy¶og
(
LOG_INFO
,"Control channel opened.\n");

1059 
	`sy¶og
(
LOG_INFO
,"Logiˇ»ch™√»%d o≥√d.\n", 
‰ame
->
ch™√l
);

1065 
	`sy¶og
(
LOG_INFO
,"Re˚ived SABMÉvíÅhough ch™√»%d wa†Æªady clo£d.\n", 
‰ame
->
ch™√l
);

1067 
c°©us
[
‰ame
->
ch™√l
].
›íed
 = 1;

1068 
	`wrôe_‰ame
(
‰ame
->
ch™√l
, 
NULL
, 0, 
UA
 | 
PF
);

1073 
	`de°roy_‰ame
(
‰ame
);

1075 if(
_debug
)

1076 
	`sy¶og
(
LOG_DEBUG
,"ouào‡%s\n", 
__FUNCTION__
);

1077  
‰amesExåa˘ed
;

1078 
	}
}

1082 
	$∑ª¡_sig«l_åótmít
(
∑øm
) {

1083 
	`Ârötf
(
°dîr
, "MUX started\n");

1084 
	`exô
(0);

1085 
	}
}

1090 
	$d´m⁄ize
(
_debug
)

1092 if(!
_debug
)

1094 
	`sig«l
(
SIGHUP
, 
∑ª¡_sig«l_åótmít
);

1095 if((
the_pid
=
	`f‹k
()) < 0) {

1096 
waô_f‹_d´m⁄_°©us
 = 0;

1099 if(
the_pid
!=0) {

1100 i‡(
waô_f‹_d´m⁄_°©us
) {

1101 
	`waô
(
NULL
);

1102 
	`Ârötf
(
°dîr
, "MUX startup failed. See syslog for details.\n");

1103 
	`exô
(1);

1105 
	`exô
(0);

1108 
	`£tsid
();

1110 if(
waô_f‹_d´m⁄_°©us
 =0 && (
the_pid
 = 
	`f‹k
()) != 0)

1111 
	`exô
(0);

1112 
	`chdú
("/");

1113 
	`umask
(0);

1116 
	`˛o£
(
STDIN_FILENO
);

1117 
	`˛o£
(
STDOUT_FILENO
);

1118 
	`˛o£
(
STDERR_FILENO
);

1122 
	}
}

1128 
	$sig«l_åótmít
(
∑øm
)

1130 
∑øm
)

1132 
SIGPIPE
:

1133 
	`exô
(0);

1135 
SIGHUP
:

1138 
SIGINT
:

1140 
ãrmö©e
 = 1;

1142 
SIGKILL
:

1145 
ãrmö©e
 = 1;

1148 
SIGUSR1
:

1149 
ãrmö©e
 = 1;

1151 
SIGTERM
:

1152 
ãrmö©e
 = 1;

1155 
	`exô
(0);

1159 
	}
}

1165 
	$öôSõmísMC35
()

1167 
mux_comm™d
[] = "AT+CMUX=0\r\n";

1168 
•ìd_comm™d
[20] = "AT+IPR=57600\r\n";

1169 
˛o£_mux
[2] = { 
C_CLD
 | 
CR
, 1 };

1172 
baud
 = 
	`ödexOfBaud
(
baudøã
);

1174 i‡(!
	`©_comm™d
(
£rül_fd
,"AT\r\n", 10000))

1176 if(
_debug
)

1177 
	`sy¶og
(
LOG_DEBUG
, "ERROR AT %d\r\n", 
__LINE__
);

1179 
	`sy¶og
(
LOG_INFO
, "Modem doesÇotÑespondÅo AT commands,Årying close MUX mode");

1180 
	`wrôe_‰ame
(0, 
˛o£_mux
, 2, 
UIH
);

1181 
	`©_comm™d
(
£rül_fd
,"AT\r\n", 10000);

1184 i‡(
baud
 != 0) {

1185 
	`•rötf
(
•ìd_comm™d
, "AT+IPR=%d\r\n", 
baudøã
);

1187 i‡(!
	`©_comm™d
(
£rül_fd
, 
•ìd_comm™d
, 10000))

1189 if(
_debug
)

1190 
	`sy¶og
(
LOG_DEBUG
, "ERROR %†%d \r\n", 
•ìd_comm™d
, 
__LINE__
);

1192 i‡(!
	`©_comm™d
(
£rül_fd
,"AT\r\n", 10000))

1194 if(
_debug
)

1195 
	`sy¶og
(
LOG_DEBUG
, "ERROR AT %d \r\n", 
__LINE__
);

1198 i‡(!
	`©_comm™d
(
£rül_fd
,"AT&S0\r\n", 10000))

1200 if(
_debug
)

1201 
	`sy¶og
(
LOG_DEBUG
, "ERRO AT&S0 %d\r\n", 
__LINE__
);

1203 i‡(!
	`©_comm™d
(
£rül_fd
,"AT\\Q3\r\n", 10000))

1205 if(
_debug
)

1206 
	`sy¶og
(
LOG_DEBUG
, "ERRO AT\\Q3 %d\r\n", 
__LINE__
);

1208 i‡(
pö_code
 > 0 &&Öin_code < 10000)

1212 
pö_comm™d
[20];

1213 
	`•rötf
(
pö_comm™d
, "AT+CPIN=\"%d\"\r\n", 
pö_code
);

1214 i‡(!
	`©_comm™d
(
£rül_fd
,
pö_comm™d
, 20000))

1216 if(
_debug
)

1217 
	`sy¶og
(
LOG_DEBUG
, "ERROR AT+CPIN %d\r\n", 
__LINE__
);

1220 i‡(!
	`©_comm™d
(
£rül_fd
, 
mux_comm™d
, 10000))

1222 
	`sy¶og
(
LOG_ERR
, "MUX mode doesn't function.\n");

1226 
	}
}

1231 
	$öôGíîic
()

1233 
mux_comm™d
[20] = "AT+CMUX=0\r\n";

1234 
˛o£_mux
[2] = { 
C_CLD
 | 
CR
, 1 };

1236 
baud
 = 
	`ödexOfBaud
(
baudøã
);

1237 i‡(
baud
 != 0) {

1239 
	`•rötf
(
mux_comm™d
, "AT+CMUX=0,0,%d\r\n", 
baud
);

1246 i‡(!
	`©_comm™d
(
£rül_fd
,"AT\r\n", 10000))

1248 if(
_debug
)

1249 
	`sy¶og
(
LOG_DEBUG
, "ERROR AT %d\r\n", 
__LINE__
);

1251 
	`sy¶og
(
LOG_INFO
, "Modem doesÇotÑespondÅo AT commands,Årying close MUX mode");

1252 
	`wrôe_‰ame
(0, 
˛o£_mux
, 2, 
UIH
);

1253 
	`©_comm™d
(
£rül_fd
,"AT\r\n", 10000);

1255 i‡(
pö_code
 > 0 &&Öin_code < 10000)

1259 
pö_comm™d
[20];

1260 
	`•rötf
(
pö_comm™d
, "AT+CPIN=%d\r\n", 
pö_code
);

1261 i‡(!
	`©_comm™d
(
£rül_fd
,
pö_comm™d
, 20000))

1263 if(
_debug
)

1264 
	`sy¶og
(
LOG_DEBUG
, "ERROR AT+CPIN %d\r\n", 
__LINE__
);

1268 i‡(!
	`©_comm™d
(
£rül_fd
, 
mux_comm™d
, 10000))

1270 
	`sy¶og
(
LOG_ERR
, "MUX mode doesn't function.\n");

1274 
	}
}

1276 
	$›íDevi˚sAndMuxMode
() {

1277 
i
;

1278 
ªt
 = -1;

1279 
	`sy¶og
(
LOG_INFO
,"Open devices...\n");

1281 
maxfd
 = 0;

1282 
i
 = 0; i < 
numOfP‹ts
; i++)

1284 
ªmaöög
[
i
] = 0;

1285 i‡((
us•_fd
[
i
] = 
	`›í_±y
(
±ydev
[i], i)) < 0)

1287 
	`sy¶og
(
LOG_ERR
,"C™'à›í %s. %†(%d).\n", 
±ydev
[
i
], 
	`°ªº‹
(
î∫o
),Érrno);

1290 i‡(
us•_fd
[
i
] > 
maxfd
)

1291 
maxfd
 = 
us•_fd
[
i
];

1292 
c°©us
[
i
].
›íed
 = 0;

1293 
c°©us
[
i
].
v24_sig«ls
 = 
S_DV
 | 
S_RTR
 | 
S_RTC
 | 
EA
;

1295 
c°©us
[
i
].
›íed
 = 0;

1296 
	`sy¶og
(
LOG_INFO
,"Open serialÖort...\n");

1299 i‡((
£rül_fd
 = 
	`›í_£rüÕ‹t
(
£Ω‹tdev
)) < 0)

1301 
	`sy¶og
(
LOG_ALERT
,"C™'à›í %s. %†(%d).\n", 
£Ω‹tdev
, 
	`°ªº‹
(
î∫o
),Érrno);

1304 i‡(
£rül_fd
 > 
maxfd
)

1305 
maxfd
 = 
£rül_fd
;

1306 
	`sy¶og
(
LOG_INFO
,"Opened serialÖort. SwitchingÅo mux-mode.\n");

1308 
_modem_ty≥
)

1310 
MC35
:

1312 
ªt
 = 
	`öôSõmísMC35
();

1314 
GENERIC
:

1315 
ªt
 = 
	`öôGíîic
();

1321 i‡(
ªt
 != 0) {

1322  
ªt
;

1326 
ãrmö©eCou¡
 = 
numOfP‹ts
;

1327 
	`sy¶og
(
LOG_INFO
, "Waiting for mux-mode.\n");

1328 
	`¶ìp
(1);

1329 
	`sy¶og
(
LOG_INFO
, "Opening control channel.\n");

1330 
	`wrôe_‰ame
(0, 
NULL
, 0, 
SABM
 | 
PF
);

1331 
	`sy¶og
(
LOG_INFO
, "OpeningÜogical channels.\n");

1332 
i
 = 1; i <
numOfP‹ts
; i++)

1334 
	`¶ìp
(1);

1335 
	`wrôe_‰ame
(
i
, 
NULL
, 0, 
SABM
 | 
PF
);

1336 
	`sy¶og
(
LOG_INFO
, "C⁄√˘ög %†tÿvútuÆ ch™√»%d o¿%s\n", 
	`±¢ame
(
us•_fd
[
i
-1]), i, 
£Ω‹tdev
);

1338  
ªt
;

1339 
	}
}

1341 
	$˛o£Devi˚s
()

1343 
i
;

1344 
	`˛o£
(
£rül_fd
);

1346 
i
 = 0; i < 
numOfP‹ts
; i++) {

1347 *
symlökName
 = 
	`¸óãSymlökName
(
i
);

1348 
	`˛o£
(
us•_fd
[
i
]);

1349 i‡(
symlökName
) {

1351 
	`u∆ök
(
symlökName
);

1352 
	`‰ì
(
symlökName
);

1355 
	}
}

1360 
	$maö
(
¨gc
, *
¨gv
[], *
ív
[])

1362 
	#PING_TEST_LEN
 6

	)

1363 
pög_ã°
[] = "\x23\x09PING";

1365 
£l
, 
Àn
;

1366 
fd_£t
 
rfds
;

1367 
timevÆ
 
timeout
;

1368 
buf
[4096], **
tmp
;

1369 *
¥ogømName
;

1370 
i
, 
size
,
t
;

1372 
˛o£_mux
[2] = { 
C_CLD
 | 
CR
, 1 };

1373 
›t
;

1374 
pid_t
 
∑ª¡_pid
;

1376 
pögNumbî
 = 1;

1377 
time_t
 
‰ameRe˚iveTime
;

1378 
time_t
 
cuºítTime
;

1381 
¥ogømName
 = 
¨gv
[0];

1383 if(
¨gc
<2)

1385 
	`ußge
(
¥ogømName
);

1386 
	`exô
(-1);

1388 
_modem_ty≥
 = 
GENERIC
;

1390 
£Ω‹tdev
="/dev/modem";

1392 (
›t
=
	`gë›t
(
¨gc
,
¨gv
,"p:f:h?dwrm:b:P:s:"))>0)

1394 
›t
)

1397 
£Ω‹tdev
 = 
›èrg
;

1400 
max_‰ame_size
 = 
	`©oi
(
›èrg
);

1404 
_debug
 = 1;

1407 if(!
	`°rcmp
(
›èrg
,"mc35"))

1408 
_modem_ty≥
 = 
MC35
;

1409 if(!
	`°rcmp
(
›èrg
,"mc75"))

1410 
_modem_ty≥
 = 
MC35
;

1411 if(!
	`°rcmp
(
›èrg
,"generic"))

1412 
_modem_ty≥
 = 
GENERIC
;

1413 
_modem_ty≥
 = 
UNKNOW_MODEM
;

1416 
baudøã
 = 
	`©oi
(
›èrg
);

1419 
devSymlökPªfix
 = 
›èrg
;

1422 
waô_f‹_d´m⁄_°©us
 = 1;

1425 
pö_code
 = 
	`©oi
(
›èrg
);

1428 
Áu…Tﬁî™t
 = 1;

1432 
	`ußge
(
¥ogømName
);

1433 
	`exô
(0);

1441 
∑ª¡_pid
 = 
	`gëpid
();

1442 
	`d´m⁄ize
(
_debug
);

1446 
	`sig«l
(
SIGHUP
, 
sig«l_åótmít
);

1447 
	`sig«l
(
SIGPIPE
, 
sig«l_åótmít
);

1448 
	`sig«l
(
SIGKILL
, 
sig«l_åótmít
);

1449 
	`sig«l
(
SIGINT
, 
sig«l_åótmít
);

1450 
	`sig«l
(
SIGUSR1
, 
sig«l_åótmít
);

1451 
	`sig«l
(
SIGTERM
, 
sig«l_åótmít
);

1453 
¥ogømName
 = 
¨gv
[0];

1454 if(
_debug
)

1456 
	`›ílog
(
¥ogømName
, 
LOG_NDELAY
 | 
LOG_PID
 | 
LOG_PERROR
 , 
LOG_LOCAL0
);

1457 
_¥i‹ôy
 = 
LOG_DEBUG
;

1461 
	`›ílog
(
¥ogømName
, 
LOG_NDELAY
 | 
LOG_PID
 , 
LOG_LOCAL0
 );

1462 
_¥i‹ôy
 = 
LOG_INFO
;

1467 
t
=
›töd
;t<
¨gc
;t++)

1469 if((
t
-
›töd
)>=
MAX_CHANNELS
) ;

1470 
	`sy¶og
(
LOG_INFO
, "P‹à%d : %s\n",
t
-
›töd
,
¨gv
[t]);

1471 
±ydev
[
t
-
›töd
]=
¨gv
[t];

1474 
numOfP‹ts
 = 
t
-
›töd
;

1476 
	`sy¶og
(
LOG_INFO
,"Malloc buffers...\n");

1478 i‡(!(
us•_fd
 = 
	`mÆloc
((Ë* 
numOfP‹ts
))

1479 || !(
ö_buf
 = 
	`gsm0710_buf„r_öô
())

1480 || !(
ªmaöög
 = 
	`mÆloc
((Ë* 
numOfP‹ts
))

1481 || !(
tmp
 = 
	`mÆloc
((*Ë* 
numOfP‹ts
))

1482 || !(
c°©us
 = 
	`mÆloc
((
Ch™√l_Sètus
Ë* (1 + 
numOfP‹ts
))))

1484 
	`sy¶og
(
LOG_ALERT
,"Out of memory\n");

1485 
	`exô
(-1);

1489 i‡(
	`›íDevi˚sAndMuxMode
() != 0) {

1493 if(
_debug
) {

1494 
	`sy¶og
(
LOG_INFO
,

1496 } i‡(
waô_f‹_d´m⁄_°©us
) {

1497 
	`kûl
(
∑ª¡_pid
, 
SIGHUP
);

1505 !
ãrmö©e
 || 
ãrmö©eCou¡
 >= -1)

1508 
	`FD_ZERO
(&
rfds
);

1509 
	`FD_SET
(
£rül_fd
, &
rfds
);

1510 
i
 = 0; i < 
numOfP‹ts
; i++)

1511 
	`FD_SET
(
us•_fd
[
i
], &
rfds
);

1513 
timeout
.
tv_£c
 = 1;

1514 
timeout
.
tv_u£c
 = 0;

1516 
£l
 = 
	`£À˘
(
maxfd
 + 1, &
rfds
, 
NULL
, NULL, &
timeout
);

1517 i‡(
Áu…Tﬁî™t
) {

1519 
	`time
(&
cuºítTime
);

1521 i‡(
£l
 > 0)

1524 i‡(
	`FD_ISSET
(
£rül_fd
, &
rfds
))

1527 if(
_debug
)

1528 
	`sy¶og
(
LOG_DEBUG
, "Serial Data\n");

1529 i‡((
size
 = 
	`gsm0710_buf„r_‰ì
(
ö_buf
)Ë> 0 && (
Àn
 = 
	`ªad
(
£rül_fd
, 
buf
, 
	`mö
(size, (buf)))) > 0)

1531 
	`gsm0710_buf„r_wrôe
(
ö_buf
, 
buf
, 
Àn
);

1533 i‡(
	`exåa˘_‰ames
(
ö_buf
Ë> 0 && 
Áu…Tﬁî™t
) {

1534 
‰ameRe˚iveTime
 = 
cuºítTime
;

1535 
pögNumbî
 = 1;

1542 
i
 = 0; i < 
numOfP‹ts
; i++)

1543 i‡(
	`FD_ISSET
(
us•_fd
[
i
], &
rfds
))

1547 i‡(
ªmaöög
[
i
] > 0)

1549 
	`mem˝y
(
buf
, 
tmp
[
i
], 
ªmaöög
[i]);

1550 
	`‰ì
(
tmp
[
i
]);

1552 i‡((
Àn
 = 
	`ªad
(
us•_fd
[
i
], 
buf
 + 
ªmaöög
[i], (buf) -Ñemaining[i])) > 0)

1553 
ªmaöög
[
i
] = 
	`us•_ªcv_d©a
(
buf
, 
Àn
 +Ñemaining[i], i);

1554 if(
_debug
)

1555 
	`sy¶og
(
LOG_DEBUG
,"D©®‰omÖtya%d: %d byãs\n",
i
,
Àn
);

1556 if(
Àn
<0)

1559 
ªmaöög
[
i
] = 0;

1560 
	`˛o£
(
us•_fd
[
i
]);

1561 i‡((
us•_fd
[
i
] = 
	`›í_±y
(
±ydev
[i], i)) < 0)

1563 if(
_debug
)

1564 
	`sy¶og
(
LOG_DEBUG
,"C™'àª-›í %s. %†(%d).\n", 
±ydev
[
i
], 
	`°ªº‹
(
î∫o
),Érrno);

1565 
ãrmö©e
=1;

1567 i‡(
us•_fd
[
i
] > 
maxfd
)

1568 
maxfd
 = 
us•_fd
[
i
];

1572 i‡(
ªmaöög
[
i
] > 0)

1574 
tmp
[
i
] = 
	`mÆloc
(
ªmaöög
[i]);

1575 
	`mem˝y
(
tmp
[
i
], 
buf
 + (bufË- 
ªmaöög
[i],Ñemaining[i]);

1580 i‡(
ãrmö©e
)

1585 i‡(
ãrmö©eCou¡
 > 0)

1587 
	`sy¶og
(
LOG_INFO
,"Closög dow¿thêlogiˇ»ch™√»%d.\n", 
ãrmö©eCou¡
);

1588 i‡(
c°©us
[
ãrmö©eCou¡
].
›íed
)

1589 
	`wrôe_‰ame
(
ãrmö©eCou¡
, 
NULL
, 0, 
DISC
 | 
PF
);

1591 i‡(
ãrmö©eCou¡
 == 0)

1593 
	`sy¶og
(
LOG_INFO
,"Sending close downÑequestÅoÅhe multiplexer.\n");

1594 
	`wrôe_‰ame
(0, 
˛o£_mux
, 2, 
UIH
);

1596 
ãrmö©eCou¡
--;

1598 i‡(
Áu…Tﬁî™t
) {

1599 i‡(
ª°¨t
 || 
pögNumbî
 >
MAX_PINGS
) {

1600 i‡(
ª°¨t
 == 0) {

1602 
	`sy¶og
(
LOG_ALERT
,

1606 
ª°¨t
 = 0;

1607 
	`sy¶og
(
LOG_INFO
, "TryingÅoÑestartÅhe mux.\n");

1610 
	`˛o£Devi˚s
();

1611 
ãrmö©eCou¡
 = -1;

1612 
	`¶ìp
(1);

1613 i‡(
	`›íDevi˚sAndMuxMode
() == 0) {

1615 
	`time
(&
‰ameRe˚iveTime
);

1616 
pögNumbî
 = 1;

1619 
	`¶ìp
(
POLLING_INTERVAL
);

1620 } !
ãrmö©e
);

1622 } i‡(
‰ameRe˚iveTime
 + 
POLLING_INTERVAL
*
pögNumbî
 <

1623 
cuºítTime
) {

1625 i‡(
_debug
) {

1626 
	`sy¶og
(
LOG_DEBUG
,"Sending PINGÅoÅhe modem.\n");

1628 
	`wrôe_‰ame
(0, 
pög_ã°
, 
PING_TEST_LEN
, 
UIH
);

1629 ++
pögNumbî
;

1636 
	`˛o£Devi˚s
();

1638 
	`‰ì
(
us•_fd
);

1639 
	`‰ì
(
tmp
);

1640 
	`‰ì
(
ªmaöög
);

1641 
	`sy¶og
(
LOG_INFO
,"Re˚ived %ld føme†™d dr›≥d %ldÑe˚ived føme†durögÅhêmux-mode.\n", 
ö_buf
->
ª˚ived_cou¡
,

1642 
ö_buf
->
dr›≥d_cou¡
);

1643 
	`gsm0710_buf„r_de°roy
(
ö_buf
);

1644 
	`sy¶og
(
LOG_INFO
, "%†föished\n", 
¥ogømName
);

1648 
	`˛o£log
();

1651 
	}
}

	@gsm0710.h

1 #i‚de‡
_GSM0710_H_


2 
	#_GSM0710_H_


	)

29 #ifde‡
DEBUG


30 
	#PDEBUG
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
, fmt, ##árgs)

	)

32 
	#PDEBUG
(
fmt
, 
¨gs
...Ë

	)

36 
	#F_FLAG
 0xF9

	)

39 
	#PF
 16

	)

40 
	#CR
 2

	)

41 
	#EA
 1

	)

43 
	#SABM
 47

	)

44 
	#UA
 99

	)

45 
	#DM
 15

	)

46 
	#DISC
 67

	)

47 
	#UIH
 239

	)

48 
	#UI
 3

	)

50 
	#C_CLD
 193

	)

51 
	#C_TEST
 33

	)

52 
	#C_MSC
 225

	)

53 
	#C_NSC
 17

	)

56 
	#S_FC
 2

	)

57 
	#S_RTC
 4

	)

58 
	#S_RTR
 8

	)

59 
	#S_IC
 64

	)

60 
	#S_DV
 128

	)

62 
	#COMMAND_IS
(
comm™d
, 
ty≥
Ë(—y≥ & ~
CR
Ë=comm™d)

	)

63 
	#PF_ISSET
(
‰ame
Ë((‰ame->
c⁄åﬁ
 & 
PF
Ë=PF)

	)

64 
	#FRAME_IS
(
ty≥
, 
‰ame
Ë((‰ame->
c⁄åﬁ
 & ~
PF
Ë=ty≥)

	)

68 
	sCh™√l_Sètus
 {

69 
	m›íed
;

70 
	mv24_sig«ls
;

71 } 
	tCh™√l_Sètus
;

74 
	#¥öt_bôs
(
n
Ë
	`¥ötf
("%d%d%d%d%d%d%d%d", ((n&128) == 128), \

75 ((
n
&64) == 64),((n&32) == 32),((n&16) == 16), \

76 ((
n
&8) == 8),((n&4) == 4),((n&2) == 2), \

77 ((
n
&1Ë=1));

	)

	@
1
.
0
4
38
buffer.c
buffer.h
gsm0710.c
gsm0710.h
