cscope 15 F:\ss_asn1\module.asn1-1"               0000185559
	@F:\ss_asn1\cscope.files

1 
	gC
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
a¢_codecs_¥im
.
c


2 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
bî_decodî
.
c


3 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
bî_év_Àngth
.
c


4 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
bî_év_èg
.
c


5 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
BIT_STRING
.
c


6 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
c⁄°øöts
.
c


7 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
c⁄°r_TYPE
.
c


8 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
c⁄vîãr
-
ßm∂e
.
c


9 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
dî_ícodî
.
c


10 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
OCTET_STRING
.
c


11 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
≥r_decodî
.
c


12 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
≥r_ícodî
.
c


13 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
≥r_›íty≥
.
c


14 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
≥r_suµ‹t
.
c


15 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
xî_decodî
.
c


16 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
xî_ícodî
.
c


17 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
xî_suµ‹t
.
c


18 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
a¢_≠∂iˇti⁄
.
h


19 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
a¢_codecs
.
h


20 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
a¢_codecs_¥im
.
h


21 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
a¢_öã∫Æ
.
h


22 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
a¢_sy°em
.
h


23 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
bî_decodî
.
h


24 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
bî_év_Àngth
.
h


25 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
bî_év_èg
.
h


26 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
BIT_STRING
.
h


27 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
c⁄°øöts
.
h


28 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
c⁄°r_TYPE
.
h


29 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
dî_ícodî
.
h


30 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
OCTET_STRING
.
h


31 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
≥r_decodî
.
h


32 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
≥r_ícodî
.
h


33 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
≥r_›íty≥
.
h


34 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
≥r_suµ‹t
.
h


35 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
xî_decodî
.
h


36 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
xî_ícodî
.
h


37 
C
:\
U£rs
\
Admöi°øt‹
\
Deskt›
\
ss_a¢1
\
moduÀ
.
a¢1
-1\
xî_suµ‹t
.
h


	@F:\ss_asn1\lookupfile_genTags_windows.bat

1 @
echo
 
off


2 
bash
 
	glookupfûe_gíTags_wödows
.
	gsh


	@F:\ss_asn1\lookupfile_genTags_windows.sh

1 #! /
bö
/
sh


2 #gíî©ê
èg
 
fûe
 
lookupfûe
 
∂ugö


3 #gë 
cuºít
 
w‹k•a˚
 
absﬁuã
 
∑th
 
ö
 
wödows


4 
	gcuΩ©h
=
$
(
echo
 `
pwd
` | 
£d
 -
e
 's/^\/\([a-z]\)/\1:/g')

5 
echo
 
$cuΩ©h


7 
echo
 -
e
 "!_TAG_FILE_SORTED\t2\t/2=fﬁdˇ£/" > 
lookupfûëags


8 
vim_föd
 `
$cuΩ©h
` -
ty≥
 
f
 \–-
«me
 "*.[ch]" -
o
 -«mê"*.[ch]µ" \Ë-
¥ötf
 "%f\t%p\t1\n"|
vim_s‹t
 -‡>>
lookupfûëags


12 #echÿ-
e
 "!_TAG_FILE_SORTED\t2\t/2=fﬁdˇ£/" > 
fûíamëags


13 #föd . -
nŸ
 -
ªgex
 '.*\.\’ng\|gif\)' -
ty≥
 
f
 -
¥ötf
 "%f\t%p\t1\n" | \ 
s‹t
 -‡>> 
fûíamëags


	@F:\ss_asn1\module.asn1-1\+Compiler.Log

1 -- 
	gASN
.1 
	gCompûî
, 
	gv0
.9.22

2 -- 
C›yright
 (
c
Ë2003, 2004, 2005, 2006 
Lev
 
	gWÆkö
 <
	gvlm
@
	gli⁄ë
.
	göfo
>

3 
	gSymlöked
 /
	gskñë⁄s
/
	ga¢_≠∂iˇti⁄
.
	gh
 ->á¢_≠∂iˇti⁄.
h


4 
	gSymlöked
 /
	gskñë⁄s
/
	ga¢_sy°em
.
	gh
 ->á¢_sy°em.
h


5 
	gSymlöked
 /
	gskñë⁄s
/
	ga¢_codecs
.
	gh
 ->á¢_codecs.
h


6 
	gSymlöked
 /
	gskñë⁄s
/
	ga¢_öã∫Æ
.
	gh
 ->á¢_öã∫Æ.
h


7 
	gSymlöked
 /
	gskñë⁄s
/
	gOCTET_STRING
.
	gh
 -> OCTET_STRING.
h


8 
	gSymlöked
 /
	gskñë⁄s
/
	gOCTET_STRING
.
	gc
 -> OCTET_STRING.
c


9 
	gSymlöked
 /
	gskñë⁄s
/
	gBIT_STRING
.
	gh
 -> BIT_STRING.
h


10 
	gSymlöked
 /
	gskñë⁄s
/
	gBIT_STRING
.
	gc
 -> BIT_STRING.
c


11 
	gSymlöked
 /
	gskñë⁄s
/
	ga¢_codecs_¥im
.
	gc
 ->á¢_codecs_¥im.
c


12 
	gSymlöked
 /
	gskñë⁄s
/
	ga¢_codecs_¥im
.
	gh
 ->á¢_codecs_¥im.
h


13 
	gSymlöked
 /
	gskñë⁄s
/
	gbî_év_Àngth
.
	gh
 -> bî_év_Àngth.
h


14 
	gSymlöked
 /
	gskñë⁄s
/
	gbî_év_Àngth
.
	gc
 -> bî_év_Àngth.
c


15 
	gSymlöked
 /
	gskñë⁄s
/
	gbî_év_èg
.
	gh
 -> bî_év_èg.
h


16 
	gSymlöked
 /
	gskñë⁄s
/
	gbî_év_èg
.
	gc
 -> bî_év_èg.
c


17 
	gSymlöked
 /
	gskñë⁄s
/
	gbî_decodî
.
	gh
 -> bî_decodî.
h


18 
	gSymlöked
 /
	gskñë⁄s
/
	gbî_decodî
.
	gc
 -> bî_decodî.
c


19 
	gSymlöked
 /
	gskñë⁄s
/
	gdî_ícodî
.
	gh
 -> dî_ícodî.
h


20 
	gSymlöked
 /
	gskñë⁄s
/
	gdî_ícodî
.
	gc
 -> dî_ícodî.
c


21 
	gSymlöked
 /
	gskñë⁄s
/
	gc⁄°r_TYPE
.
	gh
 -> c⁄°r_TYPE.
h


22 
	gSymlöked
 /
	gskñë⁄s
/
	gc⁄°r_TYPE
.
	gc
 -> c⁄°r_TYPE.
c


23 
	gSymlöked
 /
	gskñë⁄s
/
	gc⁄°øöts
.
	gh
 -> c⁄°øöts.
h


24 
	gSymlöked
 /
	gskñë⁄s
/
	gc⁄°øöts
.
	gc
 -> c⁄°øöts.
c


25 
	gSymlöked
 /
	gskñë⁄s
/
	gxî_suµ‹t
.
	gh
 -> xî_suµ‹t.
h


26 
	gSymlöked
 /
	gskñë⁄s
/
	gxî_suµ‹t
.
	gc
 -> xî_suµ‹t.
c


27 
	gSymlöked
 /
	gskñë⁄s
/
	gxî_decodî
.
	gh
 -> xî_decodî.
h


28 
	gSymlöked
 /
	gskñë⁄s
/
	gxî_decodî
.
	gc
 -> xî_decodî.
c


29 
	gSymlöked
 /
	gskñë⁄s
/
	gxî_ícodî
.
	gh
 -> xî_ícodî.
h


30 
	gSymlöked
 /
	gskñë⁄s
/
	gxî_ícodî
.
	gc
 -> xî_ícodî.
c


31 
	gSymlöked
 /
	gskñë⁄s
/
	g≥r_suµ‹t
.
	gh
 ->Öî_suµ‹t.
h


32 
	gSymlöked
 /
	gskñë⁄s
/
	g≥r_suµ‹t
.
	gc
 ->Öî_suµ‹t.
c


33 
	gSymlöked
 /
	gskñë⁄s
/
	g≥r_decodî
.
	gh
 ->Öî_decodî.
h


34 
	gSymlöked
 /
	gskñë⁄s
/
	g≥r_decodî
.
	gc
 ->Öî_decodî.
c


35 
	gSymlöked
 /
	gskñë⁄s
/
	g≥r_ícodî
.
	gh
 ->Öî_ícodî.
h


36 
	gSymlöked
 /
	gskñë⁄s
/
	g≥r_ícodî
.
	gc
 ->Öî_ícodî.
c


37 
	gSymlöked
 /
	gskñë⁄s
/
	g≥r_›íty≥
.
	gh
 ->Öî_›íty≥.
h


38 
	gSymlöked
 /
	gskñë⁄s
/
	g≥r_›íty≥
.
	gc
 ->Öî_›íty≥.
c


39 
	gSymlöked
 /
	gskñë⁄s
/
	gc⁄vîãr
-
	gßm∂e
.
	gc
 -> c⁄vîãr-ßm∂e.
c


40 
Gíî©ed
 
	gMakefûe
.
	gam
.
	gßm∂e


	@F:\ss_asn1\module.asn1-1\BIT_STRING.c

5 
	~<a¢_öã∫Æ.h
>

6 
	~<BIT_STRING.h
>

7 
	~<a¢_öã∫Æ.h
>

12 
bî_év_èg_t
 
	ga¢_DEF_BIT_STRING_ègs
[] = {

13 (
ASN_TAG_CLASS_UNIVERSAL
 | (3 << 2))

15 
a¢_OCTET_STRING_•ecifics_t
 
	ga¢_DEF_BIT_STRING_•ecs
 = {

16 (
BIT_STRING_t
),

17 
off£tof
(
BIT_STRING_t
, 
_a¢_˘x
),

18 
ASN_OSUBV_BIT


20 
a¢_TYPE_des¸ùt‹_t
 
	ga¢_DEF_BIT_STRING
 = {

23 
OCTET_STRING_‰ì
,

24 
BIT_STRING_¥öt
,

25 
BIT_STRING_c⁄°øöt
,

26 
OCTET_STRING_decode_bî
,

27 
OCTET_STRING_ícode_dî
,

28 
OCTET_STRING_decode_xî_bö¨y
,

29 
BIT_STRING_ícode_xî
,

30 
OCTET_STRING_decode_u≥r
,

31 
OCTET_STRING_ícode_u≥r
,

33 
a¢_DEF_BIT_STRING_ègs
,

34 (
a¢_DEF_BIT_STRING_ègs
)

35 / (
a¢_DEF_BIT_STRING_ègs
[0]),

36 
a¢_DEF_BIT_STRING_ègs
,

37 (
a¢_DEF_BIT_STRING_ègs
)

38 / (
a¢_DEF_BIT_STRING_ègs
[0]),

41 &
a¢_DEF_BIT_STRING_•ecs


48 
	$BIT_STRING_c⁄°øöt
(
a¢_TYPE_des¸ùt‹_t
 *
td
, c⁄° *
•å
,

49 
a¢_≠p_c⁄°øöt_Áûed_f
 *
˘Áûcb
, *
≠p_key
) {

50 c⁄° 
BIT_STRING_t
 *
°
 = (c⁄° BIT_STRING_à*)
•å
;

52 if(
°
 && st->
buf
) {

53 if((
°
->
size
 =0 && st->
bôs_unu£d
)

54 || 
°
->
bôs_unu£d
 < 0 || st->bits_unused > 7) {

55 
	`_ASN_CTFAIL
(
≠p_key
, 
td
, 
•å
,

57 
td
->
«me
, 
__FILE__
, 
__LINE__
);

61 
	`_ASN_CTFAIL
(
≠p_key
, 
td
, 
•å
,

63 
td
->
«me
, 
__FILE__
, 
__LINE__
);

68 
	}
}

70 *
	g_bô_∑âîn
[16] = {

75 
a¢_íc_rvÆ_t


76 
	$BIT_STRING_ícode_xî
(
a¢_TYPE_des¸ùt‹_t
 *
td
, *
•å
,

77 
ûevñ
, 
xî_ícodî_Êags_e
 
Êags
,

78 
a¢_≠p_c⁄sume_byãs_f
 *
cb
, *
≠p_key
) {

79 
a¢_íc_rvÆ_t
 
î
;

80 
s¸©ch
[128];

81 *
p
 = 
s¸©ch
;

82 *
s˚nd
 = 
s¸©ch
 + ((scratch) - 10);

83 c⁄° 
BIT_STRING_t
 *
°
 = (c⁄° BIT_STRING_à*)
•å
;

84 
xˇn
 = (
Êags
 & 
XER_F_CANONICAL
);

85 
uöt8_t
 *
buf
;

86 
uöt8_t
 *
íd
;

88 if(!
°
 || !°->
buf
)

89 
_ASN_ENCODE_FAILED
;

91 
î
.
ícoded
 = 0;

93 
buf
 = 
°
->buf;

94 
íd
 = 
buf
 + 
°
->
size
 - 1;

99 ; 
buf
 < 
íd
; buf++) {

100 
v
 = *
buf
;

101 
∆öe
 = 
xˇn
?0:(((
buf
 - 
°
->buf) % 8) == 0);

102 if(
p
 >
s˚nd
 || 
∆öe
) {

103 
î
.
ícoded
 +
p
 - 
s¸©ch
;

104 
	`_ASN_CALLBACK
(
s¸©ch
, 
p
 - scratch);

105 
p
 = 
s¸©ch
;

106 if(
∆öe
Ë
	`_i_ASN_TEXT_INDENT
(1, 
ûevñ
);

108 
	`mem˝y
(
p
 + 0, 
_bô_∑âîn
[
v
 >> 4], 4);

109 
	`mem˝y
(
p
 + 4, 
_bô_∑âîn
[
v
 & 0x0f], 4);

110 
p
 += 8;

113 if(!
xˇn
 && ((
buf
 - 
°
->buf) % 8) == 0)

114 
	`_i_ASN_TEXT_INDENT
(1, 
ûevñ
);

115 
î
.
ícoded
 +
p
 - 
s¸©ch
;

116 
	`_ASN_CALLBACK
(
s¸©ch
, 
p
 - scratch);

117 
p
 = 
s¸©ch
;

119 if(
buf
 =
íd
) {

120 
v
 = *
buf
;

121 
ubôs
 = 
°
->
bôs_unu£d
;

122 
i
;

123 
i
 = 7; i >
ubôs
; i--)

124 *
p
++ = (
v
 & (1 << 
i
)) ? 0x31 : 0x30;

125 
î
.
ícoded
 +
p
 - 
s¸©ch
;

126 
	`_ASN_CALLBACK
(
s¸©ch
, 
p
 - scratch);

129 if(!
xˇn
Ë
	`_i_ASN_TEXT_INDENT
(1, 
ûevñ
 - 1);

131 
	`_ASN_ENCODED_OK
(
î
);

132 
cb_Áûed
:

133 
_ASN_ENCODE_FAILED
;

134 
	}
}

141 
	$BIT_STRING_¥öt
(
a¢_TYPE_des¸ùt‹_t
 *
td
, c⁄° *
•å
, 
ûevñ
,

142 
a¢_≠p_c⁄sume_byãs_f
 *
cb
, *
≠p_key
) {

143 c⁄° *
h2c
 = "0123456789ABCDEF";

144 
s¸©ch
[64];

145 c⁄° 
BIT_STRING_t
 *
°
 = (c⁄° BIT_STRING_à*)
•å
;

146 
uöt8_t
 *
buf
;

147 
uöt8_t
 *
íd
;

148 *
p
 = 
s¸©ch
;

150 ()
td
;

152 if(!
°
 || !°->
buf
)

153  (
	`cb
("<ab£¡>", 8, 
≠p_key
) < 0) ? -1 : 0;

155 
ûevñ
++;

156 
buf
 = 
°
->buf;

157 
íd
 = 
buf
 + 
°
->
size
;

162 ; 
buf
 < 
íd
; buf++) {

163 if((
buf
 - 
°
->bufË% 16 =0 && (°->
size
 > 16)

164 && 
buf
 !
°
->buf) {

165 
	`_i_INDENT
(1);

167 if(
	`cb
(
s¸©ch
, 
p
 - s¸©ch, 
≠p_key
) < 0)  -1;

168 
p
 = 
s¸©ch
;

170 *
p
++ = 
h2c
[*
buf
 >> 4];

171 *
p
++ = 
h2c
[*
buf
 & 0x0F];

172 *
p
++ = 0x20;

175 if(
p
 > 
s¸©ch
) {

176 
p
--;

178 if((
°
->
size
 > 16)) {

179 
	`_i_INDENT
(1);

183 if(
	`cb
(
s¸©ch
, 
p
 - s¸©ch, 
≠p_key
) < 0)

188 
	}
}

	@F:\ss_asn1\module.asn1-1\BIT_STRING.h

5 #i‚def 
_BIT_STRING_H_


6 
	#_BIT_STRING_H_


	)

8 
	~<OCTET_STRING.h
>

10 #ifde‡
__˝lu•lus


14 
	sBIT_STRING_s
 {

15 
uöt8_t
 *
buf
;

16 
size
;

18 
bôs_unu£d
;

20 
a¢_°ru˘_˘x_t
 
_a¢_˘x
;

21 } 
	tBIT_STRING_t
;

23 
a¢_TYPE_des¸ùt‹_t
 
a¢_DEF_BIT_STRING
;

25 
a¢_°ru˘_¥öt_f
 
	gBIT_STRING_¥öt
;

26 
a¢_c⁄°r_check_f
 
	gBIT_STRING_c⁄°øöt
;

27 
xî_ty≥_ícodî_f
 
	gBIT_STRING_ícode_xî
;

29 #ifde‡
__˝lu•lus


	@F:\ss_asn1\module.asn1-1\Makefile

1 
	gASN_MODULE_SOURCES
=

3 
ASN_MODULE_HEADERS
=

5 
ASN_MODULE_HEADERS
+=
a¢_≠∂iˇti⁄
.
h


6 
ASN_MODULE_HEADERS
+=
a¢_sy°em
.
h


7 
ASN_MODULE_HEADERS
+=
a¢_codecs
.
h


8 
ASN_MODULE_HEADERS
+=
a¢_öã∫Æ
.
h


9 
ASN_MODULE_HEADERS
+=
OCTET_STRING
.
h


10 
ASN_MODULE_SOURCES
+=
OCTET_STRING
.
c


11 
ASN_MODULE_HEADERS
+=
BIT_STRING
.
h


12 
ASN_MODULE_SOURCES
+=
BIT_STRING
.
c


13 
ASN_MODULE_SOURCES
+=
a¢_codecs_¥im
.
c


14 
ASN_MODULE_HEADERS
+=
a¢_codecs_¥im
.
h


15 
ASN_MODULE_HEADERS
+=
bî_év_Àngth
.
h


16 
ASN_MODULE_SOURCES
+=
bî_év_Àngth
.
c


17 
ASN_MODULE_HEADERS
+=
bî_év_èg
.
h


18 
ASN_MODULE_SOURCES
+=
bî_év_èg
.
c


19 
ASN_MODULE_HEADERS
+=
bî_decodî
.
h


20 
ASN_MODULE_SOURCES
+=
bî_decodî
.
c


21 
ASN_MODULE_HEADERS
+=
dî_ícodî
.
h


22 
ASN_MODULE_SOURCES
+=
dî_ícodî
.
c


23 
ASN_MODULE_HEADERS
+=
c⁄°r_TYPE
.
h


24 
ASN_MODULE_SOURCES
+=
c⁄°r_TYPE
.
c


25 
ASN_MODULE_HEADERS
+=
c⁄°øöts
.
h


26 
ASN_MODULE_SOURCES
+=
c⁄°øöts
.
c


27 
ASN_MODULE_HEADERS
+=
xî_suµ‹t
.
h


28 
ASN_MODULE_SOURCES
+=
xî_suµ‹t
.
c


29 
ASN_MODULE_HEADERS
+=
xî_decodî
.
h


30 
ASN_MODULE_SOURCES
+=
xî_decodî
.
c


31 
ASN_MODULE_HEADERS
+=
xî_ícodî
.
h


32 
ASN_MODULE_SOURCES
+=
xî_ícodî
.
c


33 
ASN_MODULE_HEADERS
+=
≥r_suµ‹t
.
h


34 
ASN_MODULE_SOURCES
+=
≥r_suµ‹t
.
c


35 
ASN_MODULE_HEADERS
+=
≥r_decodî
.
h


36 
ASN_MODULE_SOURCES
+=
≥r_decodî
.
c


37 
ASN_MODULE_HEADERS
+=
≥r_ícodî
.
h


38 
ASN_MODULE_SOURCES
+=
≥r_ícodî
.
c


39 
ASN_MODULE_HEADERS
+=
≥r_›íty≥
.
h


40 
ASN_MODULE_SOURCES
+=
≥r_›íty≥
.
c


41 
ASN_CONVERTER_SOURCES
+=
c⁄vîãr
-
ßm∂e
.
c


44 
lib_LTLIBRARIES
=
libsomëhög
.
œ


45 
libsomëhög_œ_SOURCES
=
$
(
ASN_MODULE_SOURCES
Ë
	$$
(
ASN_MODULE_HEADERS
)

47 #Thi†
fûe
 
may
 
be
 
u£d
 
as
 
™
 
öput
 
	`make
(3)

48 #Removê
the
 
löes
 
bñow
 
to
 
c⁄vît
 
ô
 
öto
 
a
 
puª
 .
am
 
fûe


49 
TARGET
 = 
¥og«me


50 
CC
 = 
gcc


51 
CFLAGS
 +-
I
.

52 
OBJS
=
$
{
ASN_MODULE_SOURCES
:.
c
=.
o
} ${ASN_CONVERTER_SOURCES:.c=.o}

54 
Æl
: 
$
(
TARGET
)

56 
	$$
(
TARGET
): 
$
{
OBJS
}

57 
$
(
CC
Ë$(
CFLAGS
Ë-
o
 $(
TARGET
Ë${
OBJS
} $(
LDFLAGS
Ë$(
LIBS
)

59 .
SUFFIXES
:

60 .
SUFFIXES
: .
c
 .
o


62 .
c
.
o
:

63 
$
(
CC
Ë$(
CFLAGS
Ë-
o
 $@ -
c
 $<

65 
˛ón
:

66 
rm
 -
f
 
	$$
(
TARGET
)

67 
rm
 -
f
 
	$$
(
OBJS
)

69 
ªgí
: 
ªgíî©e
-
‰om
-
a¢1
-
sour˚


71 
ªgíî©e
-
‰om
-
a¢1
-
sour˚
:

72 
a¢1c
 -
S
/
skñë⁄s
 -
‚©ive
-
ty≥s
 
moduÀ
.
a¢1


	@F:\ss_asn1\module.asn1-1\Makefile.am.sample

1 
	gASN_MODULE_SOURCES
=

3 
ASN_MODULE_HEADERS
=

5 
ASN_MODULE_HEADERS
+=
a¢_≠∂iˇti⁄
.
h


6 
ASN_MODULE_HEADERS
+=
a¢_sy°em
.
h


7 
ASN_MODULE_HEADERS
+=
a¢_codecs
.
h


8 
ASN_MODULE_HEADERS
+=
a¢_öã∫Æ
.
h


9 
ASN_MODULE_HEADERS
+=
OCTET_STRING
.
h


10 
ASN_MODULE_SOURCES
+=
OCTET_STRING
.
c


11 
ASN_MODULE_HEADERS
+=
BIT_STRING
.
h


12 
ASN_MODULE_SOURCES
+=
BIT_STRING
.
c


13 
ASN_MODULE_SOURCES
+=
a¢_codecs_¥im
.
c


14 
ASN_MODULE_HEADERS
+=
a¢_codecs_¥im
.
h


15 
ASN_MODULE_HEADERS
+=
bî_év_Àngth
.
h


16 
ASN_MODULE_SOURCES
+=
bî_év_Àngth
.
c


17 
ASN_MODULE_HEADERS
+=
bî_év_èg
.
h


18 
ASN_MODULE_SOURCES
+=
bî_év_èg
.
c


19 
ASN_MODULE_HEADERS
+=
bî_decodî
.
h


20 
ASN_MODULE_SOURCES
+=
bî_decodî
.
c


21 
ASN_MODULE_HEADERS
+=
dî_ícodî
.
h


22 
ASN_MODULE_SOURCES
+=
dî_ícodî
.
c


23 
ASN_MODULE_HEADERS
+=
c⁄°r_TYPE
.
h


24 
ASN_MODULE_SOURCES
+=
c⁄°r_TYPE
.
c


25 
ASN_MODULE_HEADERS
+=
c⁄°øöts
.
h


26 
ASN_MODULE_SOURCES
+=
c⁄°øöts
.
c


27 
ASN_MODULE_HEADERS
+=
xî_suµ‹t
.
h


28 
ASN_MODULE_SOURCES
+=
xî_suµ‹t
.
c


29 
ASN_MODULE_HEADERS
+=
xî_decodî
.
h


30 
ASN_MODULE_SOURCES
+=
xî_decodî
.
c


31 
ASN_MODULE_HEADERS
+=
xî_ícodî
.
h


32 
ASN_MODULE_SOURCES
+=
xî_ícodî
.
c


33 
ASN_MODULE_HEADERS
+=
≥r_suµ‹t
.
h


34 
ASN_MODULE_SOURCES
+=
≥r_suµ‹t
.
c


35 
ASN_MODULE_HEADERS
+=
≥r_decodî
.
h


36 
ASN_MODULE_SOURCES
+=
≥r_decodî
.
c


37 
ASN_MODULE_HEADERS
+=
≥r_ícodî
.
h


38 
ASN_MODULE_SOURCES
+=
≥r_ícodî
.
c


39 
ASN_MODULE_HEADERS
+=
≥r_›íty≥
.
h


40 
ASN_MODULE_SOURCES
+=
≥r_›íty≥
.
c


41 
ASN_CONVERTER_SOURCES
+=
c⁄vîãr
-
ßm∂e
.
c


44 
lib_LTLIBRARIES
=
libsomëhög
.
œ


45 
libsomëhög_œ_SOURCES
=
$
(
ASN_MODULE_SOURCES
Ë
	$$
(
ASN_MODULE_HEADERS
)

47 #Thi†
fûe
 
may
 
be
 
u£d
 
as
 
™
 
öput
 
	`make
(3)

48 #Removê
the
 
löes
 
bñow
 
to
 
c⁄vît
 
ô
 
öto
 
a
 
puª
 .
am
 
fûe


49 
TARGET
 = 
¥og«me


50 
CFLAGS
 +-
I
.

51 
OBJS
=
$
{
ASN_MODULE_SOURCES
:.
c
=.
o
} ${ASN_CONVERTER_SOURCES:.c=.o}

53 
Æl
: 
$
(
TARGET
)

55 
	$$
(
TARGET
): 
$
{
OBJS
}

56 
$
(
CC
Ë$(
CFLAGS
Ë-
o
 $(
TARGET
Ë${
OBJS
} $(
LDFLAGS
Ë$(
LIBS
)

58 .
SUFFIXES
:

59 .
SUFFIXES
: .
c
 .
o


61 .
c
.
o
:

62 
$
(
CC
Ë$(
CFLAGS
Ë-
o
 $@ -
c
 $<

64 
˛ón
:

65 
rm
 -
f
 
	$$
(
TARGET
)

66 
rm
 -
f
 
	$$
(
OBJS
)

68 
ªgí
: 
ªgíî©e
-
‰om
-
a¢1
-
sour˚


70 
ªgíî©e
-
‰om
-
a¢1
-
sour˚
:

71 
a¢1c
 -
S
/
skñë⁄s
 -
‚©ive
-
ty≥s
 
moduÀ
.
a¢1


	@F:\ss_asn1\module.asn1-1\OCTET_STRING.c

6 
	~<a¢_öã∫Æ.h
>

7 
	~<OCTET_STRING.h
>

8 
	~<BIT_STRING.h
>

9 
	~<î∫o.h
>

14 
bî_év_èg_t
 
	ga¢_DEF_OCTET_STRING_ègs
[] = {

15 (
ASN_TAG_CLASS_UNIVERSAL
 | (4 << 2))

17 
a¢_OCTET_STRING_•ecifics_t
 
	ga¢_DEF_OCTET_STRING_•ecs
 = {

18 (
OCTET_STRING_t
),

19 
off£tof
(
OCTET_STRING_t
, 
_a¢_˘x
),

20 
ASN_OSUBV_STR


22 
a¢_≥r_c⁄°øöts_t
 
	ga¢_DEF_OCTET_STRING_c⁄°øöts
 = {

23 { 
APC_CONSTRAINED
, 8, 8, 0, 255 },

24 { 
APC_SEMI_CONSTRAINED
, -1, -1, 0, 0 },

27 
a¢_TYPE_des¸ùt‹_t
 
	ga¢_DEF_OCTET_STRING
 = {

30 
OCTET_STRING_‰ì
,

31 
OCTET_STRING_¥öt
,

32 
a¢_gíîic_no_c⁄°øöt
,

33 
OCTET_STRING_decode_bî
,

34 
OCTET_STRING_ícode_dî
,

35 
OCTET_STRING_decode_xî_hex
,

36 
OCTET_STRING_ícode_xî
,

37 
OCTET_STRING_decode_u≥r
,

38 
OCTET_STRING_ícode_u≥r
,

40 
a¢_DEF_OCTET_STRING_ègs
,

41 (
a¢_DEF_OCTET_STRING_ègs
)

42 / (
a¢_DEF_OCTET_STRING_ègs
[0]),

43 
a¢_DEF_OCTET_STRING_ègs
,

44 (
a¢_DEF_OCTET_STRING_ègs
)

45 / (
a¢_DEF_OCTET_STRING_ègs
[0]),

48 &
a¢_DEF_OCTET_STRING_•ecs


51 #unde‡
_CH_PHASE


52 #unde‡
NEXT_PHASE


53 #unde‡
PREV_PHASE


54 
	#_CH_PHASE
(
˘x
, 
öc
) do { \

55 if(
˘x
->
pha£
 == 0) \

56 
˘x
->
c⁄ãxt
 = 0; \

57 
˘x
->
pha£
 +
öc
; \

58 } 0)

	)

59 
	#NEXT_PHASE
(
˘x
Ë
	`_CH_PHASE
(˘x, +1)

	)

60 
	#PREV_PHASE
(
˘x
Ë
	`_CH_PHASE
(˘x, -1)

	)

62 #unde‡
ADVANCE


63 
	#ADVANCE
(
num_byãs
) do { \

64 
size_t
 
num
 = (
num_byãs
); \

65 
buf_±r
 = ((c⁄° *)buf_±rË+ 
num
; \

66 
size
 -
num
; \

67 
c⁄sumed_my£lf
 +
num
; \

68 } 0)

	)

70 #unde‡
RETURN


71 
	#RETURN
(
_code
) do { \

72 
a¢_dec_rvÆ_t
 
tm¥vÆ
; \

73 
tm¥vÆ
.
code
 = 
_code
; \

74 
tm¥vÆ
.
c⁄sumed
 = 
c⁄sumed_my£lf
; \

75  
tm¥vÆ
; \

76 } 0)

	)

78 #unde‡
APPEND


79 
	#APPEND
(
buÂå
, 
bufsize
) do { \

80 
size_t
 
_bs
 = (
bufsize
); \

81 
size_t
 
_ns
 = 
˘x
->
c⁄ãxt
; \

82 
size_t
 
_es
 = 
°
->
size
 + 
_bs
; \

84 if(()
_es
 < 0Ë
	`RETURN
(
RC_FAIL
); \

85 if(
_ns
 <
_es
) { \

86 *
±r
; \

88 dÿ{ 
_ns
 = _ns ? _ns << 1 : 16; } \

89 
_ns
 <
_es
); \

91 if(()
_ns
 < 0Ë
	`RETURN
(
RC_FAIL
); \

92 
±r
 = 
	`REALLOC
(
°
->
buf
, 
_ns
); \

93 if(
±r
) { \

94 
°
->
buf
 = (
uöt8_t
 *)
±r
; \

95 
˘x
->
c⁄ãxt
 = 
_ns
; \

97 
	`RETURN
(
RC_FAIL
); \

99 
	`ASN_DEBUG
("RóŒoˇtög i¡ÿ%ld", ()
_ns
); \

101 
	`mem˝y
(
°
->
buf
 + st->
size
, 
buÂå
, 
_bs
); \

103 
°
->
buf
[
_es
] = '\0'; \

104 
°
->
size
 = 
_es
; \

105 } 0)

	)

113 
	s_°ack_ñ
 {

114 
bî_év_Àn_t
 
	mÀ·
;

115 
bî_év_Àn_t
 
	mgŸ
;

116 
	mc⁄t_Àvñ
;

117 
	mw™t_nuŒs
;

118 
	mbôs_ch›≥d
;

119 
bî_év_èg_t
 
	mèg
;

120 
_°ack_ñ
 *
	m¥ev
;

121 
_°ack_ñ
 *
	m√xt
;

123 
	s_°ack
 {

124 
_°ack_ñ
 *
	mèû
;

125 
_°ack_ñ
 *
	mcur_±r
;

128 
_°ack_ñ
 *

129 
	$OS__add_°ack_ñ
(
_°ack
 *
°
) {

130 
_°ack_ñ
 *
√l
;

135 if(
°
->
cur_±r
 && st->cur_±r->
√xt
) {

136 
√l
 = 
°
->
cur_±r
->
√xt
;

137 
√l
->
bôs_ch›≥d
 = 0;

138 
√l
->
gŸ
 = 0;

141 
√l
 = (
_°ack_ñ
 *)
	`CALLOC
(1, (_stack_el));

142 if(
√l
 =
NULL
)

143  
NULL
;

145 if(
°
->
èû
) {

147 
√l
->
c⁄t_Àvñ
 = 
°
->
èû
->cont_level + 1;

148 
°
->
èû
->
√xt
 = 
√l
;

150 
√l
->
¥ev
 = 
°
->
èû
;

151 
°
->
èû
 = 
√l
;

154 
°
->
cur_±r
 = 
√l
;

156  
√l
;

157 
	}
}

159 
_°ack
 *

160 
	$_√w_°ack
() {

161  (
_°ack
 *)
	`CALLOC
(1, (_stack));

162 
	}
}

167 
a¢_dec_rvÆ_t


168 
	$OCTET_STRING_decode_bî
(
a¢_codec_˘x_t
 *
›t_codec_˘x
,

169 
a¢_TYPE_des¸ùt‹_t
 *
td
,

170 **
•å
, c⁄° *
buf_±r
, 
size_t
 
size
, 
èg_mode
) {

171 
a¢_OCTET_STRING_•ecifics_t
 *
•ecs
 = 
td
->
•ecifics


172 ? (
a¢_OCTET_STRING_•ecifics_t
 *)
td
->
•ecifics


173 : &
a¢_DEF_OCTET_STRING_•ecs
;

174 
BIT_STRING_t
 *
°
 = (BIT_STRING_à*)*
•å
;

175 
a¢_dec_rvÆ_t
 
rvÆ
;

176 
a¢_°ru˘_˘x_t
 *
˘x
;

177 
ssize_t
 
c⁄sumed_my£lf
 = 0;

178 
_°ack
 *
°ck
;

179 
_°ack_ñ
 *
£l
 = 0;

180 
év_c⁄°r
;

181 
a¢_OS_Subv¨ü¡
 
ty≥_v¨ü¡
 = 
•ecs
->
subv¨ü¡
;

183 
	`ASN_DEBUG
("Decoding %sás %s (frame %ld)",

184 
td
->
«me
,

185 (
ty≥_v¨ü¡
 =
ASN_OSUBV_STR
) ?

187 ()
size
);

192 if(
°
 =
NULL
) {

193 
°
 = (
BIT_STRING_t
 *)(*
•å
 = 
	`CALLOC
(1, 
•ecs
->
°ru˘_size
));

194 if(
°
 =
NULL
Ë
	`RETURN
(
RC_FAIL
);

198 
˘x
 = (
a¢_°ru˘_˘x_t
 *)((*)
°
 + 
•ecs
->
˘x_off£t
);

200 
˘x
->
pha£
) {

205 
rvÆ
 = 
	`bî_check_ègs
(
›t_codec_˘x
, 
td
, 
˘x
,

206 
buf_±r
, 
size
, 
èg_mode
, -1,

207 &
˘x
->
À·
, &
év_c⁄°r
);

208 if(
rvÆ
.
code
 !
RC_OK
)

209  
rvÆ
;

211 if(
év_c⁄°r
) {

215 
˘x
->
±r
 = 
	`_√w_°ack
();

216 if(
˘x
->
±r
) {

217 
°ck
 = (
_°ack
 *)
˘x
->
±r
;

219 
	`RETURN
(
RC_FAIL
);

225 
	`_CH_PHASE
(
˘x
, 3);

226 if(
ty≥_v¨ü¡
 =
ASN_OSUBV_ANY
 && 
èg_mode
 != 1)

227 
	`APPEND
(
buf_±r
, 
rvÆ
.
c⁄sumed
);

228 
	`ADVANCE
(
rvÆ
.
c⁄sumed
);

229 
pha£3
;

232 
	`NEXT_PHASE
(
˘x
);

235 
pha£1
:

239 
°ck
 = (
_°ack
 *)
˘x
->
±r
;

240 
£l
 = 
°ck
->
cur_±r
;

242 
bî_év_èg_t
 
év_èg
;

243 
bî_év_Àn_t
 
év_Àn
;

244 
bî_év_èg_t
 
ex≥˘ed_èg
;

245 
ssize_t
 
é
, 
Œ
, 
évl
;

247 
ssize_t
 
Le·
 = ((!
£l
||(
size_t
)£l->
À·
 >
size
)

248 ?(
ssize_t
)
size
:
£l
->
À·
);

251 
	`ASN_DEBUG
("%p, s->l=%ld, s->wn=%ld, s->g=%ld\n", 
£l
,

252 ()(
£l
?£l->
À·
:0),

253 ()(
£l
?£l->
w™t_nuŒs
:0),

254 ()(
£l
?£l->
gŸ
:0)

256 if(
£l
 && sñ->
À·
 <0 && sñ->
w™t_nuŒs
 == 0) {

257 if(
£l
->
¥ev
) {

258 
_°ack_ñ
 *
¥ev
 = 
£l
->prev;

259 if(
¥ev
->
À·
 != -1) {

260 if(
¥ev
->
À·
 < 
£l
->
gŸ
)

261 
	`RETURN
(
RC_FAIL
);

262 
¥ev
->
À·
 -
£l
->
gŸ
;

264 
¥ev
->
gŸ
 +
£l
->got;

265 
£l
 = 
°ck
->
cur_±r
 = 
¥ev
;

266 if(!
£l
) ;

267 
év_c⁄°r
 = 1;

270 
£l
 = 
°ck
->
cur_±r
 = 0;

275 
é
 = 
	`bî_„tch_èg
(
buf_±r
, 
Le·
, &
év_èg
);

276 
	`ASN_DEBUG
("fetchÅag(size=%ld,L=%ld), %sstack,Üeft=%ld, wn=%ld,Ål=%ld",

277 ()
size
, ()
Le·
, 
£l
?"":"!",

278 ()(
£l
?£l->
À·
:0),

279 ()(
£l
?£l->
w™t_nuŒs
:0),

280 ()
é
);

281 
é
) {

282 -1: 
	`RETURN
(
RC_FAIL
);

283 0: 
	`RETURN
(
RC_WMORE
);

286 
év_c⁄°r
 = 
	`BER_TLV_CONSTRUCTED
(
buf_±r
);

288 
Œ
 = 
	`bî_„tch_Àngth
(
év_c⁄°r
,

289 (c⁄° *)
buf_±r
 + 
é
,
Le·
 -Ål,&
év_Àn
);

290 
	`ASN_DEBUG
("GotÅag=%s,Åc=%d,Üeft=%ld,Ål=%ld,Üen=%ld,Ül=%ld",

291 
	`bî_év_èg_°rög
(
év_èg
), 
év_c⁄°r
,

292 ()
Le·
, ()
é
, ()
év_Àn
, ()
Œ
);

293 
Œ
) {

294 -1: 
	`RETURN
(
RC_FAIL
);

295 0: 
	`RETURN
(
RC_WMORE
);

298 if(
£l
 && sñ->
w™t_nuŒs


299 && ((c⁄° 
uöt8_t
 *)
buf_±r
)[0] == 0

300 && ((c⁄° 
uöt8_t
 *)
buf_±r
)[1] == 0)

303 
	`ASN_DEBUG
("E© EOC; wn=%d--", 
£l
->
w™t_nuŒs
);

305 if(
ty≥_v¨ü¡
 =
ASN_OSUBV_ANY


306 && (
èg_mode
 !1 || 
£l
->
c⁄t_Àvñ
))

307 
	`APPEND
("\0\0", 2);

309 
	`ADVANCE
(2);

310 
£l
->
gŸ
 += 2;

311 if(
£l
->
À·
 != -1) {

312 
£l
->
À·
 -= 2;

315 
£l
->
w™t_nuŒs
--;

316 if(
£l
->
w™t_nuŒs
 == 0) {

318 
£l
->
À·
 = 0;

319 
év_c⁄°r
 = 1;

329 
ty≥_v¨ü¡
) {

330 
ASN_OSUBV_BIT
:

333 
ASN_OSUBV_STR
:

335 if(
£l
) {

336 
Àvñ
 = 
£l
->
c⁄t_Àvñ
;

337 if(
Àvñ
 < 
td
->
Æl_ègs_cou¡
) {

338 
ex≥˘ed_èg
 = 
td
->
Æl_ègs
[
Àvñ
];

340 } if(
td
->
Æl_ègs_cou¡
) {

341 
ex≥˘ed_èg
 = 
td
->
Æl_ègs


342 [
td
->
Æl_ègs_cou¡
 - 1];

348 
ASN_OSUBV_ANY
:

349 
ex≥˘ed_èg
 = 
év_èg
;

354 if(
év_èg
 !
ex≥˘ed_èg
) {

355 
buf
[2][32];

356 
	`bî_év_èg_¢¥öt
(
év_èg
,

357 
buf
[0], (buf[0]));

358 
	`bî_év_èg_¢¥öt
(
td
->
ègs
[td->
ègs_cou¡
-1],

359 
buf
[1], (buf[1]));

360 
	`ASN_DEBUG
("Tag doesÇot matchÉxpectation: %s != %s",

361 
buf
[0], buf[1]);

362 
	`RETURN
(
RC_FAIL
);

365 
évl
 = 
é
 + 
Œ
;

366 if((
év_Àn
 + 
évl
) < 0) {

368 
	`ASN_DEBUG
("TLVÉncoding +Üength (%ld) isÅoo big",

369 ()
év_Àn
);

370 
	`RETURN
(
RC_FAIL
);

376 
£l
 = 
	`OS__add_°ack_ñ
(
°ck
);

377 if(!
£l
Ë
	`RETURN
(
RC_FAIL
);

379 
£l
->
èg
 = 
év_èg
;

381 
£l
->
w™t_nuŒs
 = (
év_Àn
==-1);

382 if(
£l
->
¥ev
 && sñ->¥ev->
À·
 != -1) {

384 if(
£l
->
¥ev
->
À·
 < 
évl
 + (
év_Àn
==-1?0:tlv_len))

385 
	`RETURN
(
RC_FAIL
);

386 if(
év_Àn
 == -1)

387 
£l
->
À·
 = sñ->
¥ev
->À· - 
évl
;

389 
£l
->
À·
 = 
év_Àn
;

391 
£l
->
À·
 = 
év_Àn
;

393 if(
ty≥_v¨ü¡
 =
ASN_OSUBV_ANY


394 && (
èg_mode
 !1 || 
£l
->
c⁄t_Àvñ
))

395 
	`APPEND
(
buf_±r
, 
évl
);

396 
£l
->
gŸ
 +
évl
;

397 
	`ADVANCE
(
évl
);

399 
	`ASN_DEBUG
("+EXPECT2 got=%ldÜeft=%ld, wn=%d, clvl=%d",

400 ()
£l
->
gŸ
, ()£l->
À·
,

401 
£l
->
w™t_nuŒs
, sñ->
c⁄t_Àvñ
);

403 } 
év_c⁄°r
);

404 if(
£l
 =
NULL
) {

406 
	`ASN_DEBUG
("Phase out");

407 
	`_CH_PHASE
(
˘x
, +3);

411 
	`NEXT_PHASE
(
˘x
);

414 
°ck
 = (
_°ack
 *)
˘x
->
±r
;

415 
£l
 = 
°ck
->
cur_±r
;

416 
	`ASN_DEBUG
("Phase 2: Need %ld bytes, size=%ld,álrg=%ld, wn=%d",

417 ()
£l
->
À·
, ()
size
, ()£l->
gŸ
,

418 
£l
->
w™t_nuŒs
);

420 
bî_év_Àn_t
 
Àn
;

422 
	`as£π
(
£l
->
À·
 >= 0);

424 
Àn
 = ((
bî_év_Àn_t
)
size
 < 
£l
->
À·
)

425 ? (
bî_év_Àn_t
)
size
 : 
£l
->
À·
;

426 if(
Àn
 > 0) {

427 if(
ty≥_v¨ü¡
 =
ASN_OSUBV_BIT


428 && 
£l
->
bôs_ch›≥d
 == 0) {

430 
°
->
bôs_unu£d
 = *(c⁄° 
uöt8_t
 *)
buf_±r
;

431 
	`APPEND
(((c⁄° *)
buf_±r
+1), (
Àn
 - 1));

432 
£l
->
bôs_ch›≥d
 = 1;

434 
	`APPEND
(
buf_±r
, 
Àn
);

436 
	`ADVANCE
(
Àn
);

437 
£l
->
À·
 -
Àn
;

438 
£l
->
gŸ
 +
Àn
;

441 if(
£l
->
À·
) {

442 
	`ASN_DEBUG
("OSÜeft %ld, size = %ld, wn=%d\n",

443 ()
£l
->
À·
, ()
size
, sñ->
w™t_nuŒs
);

444 
	`RETURN
(
RC_WMORE
);

447 
	`PREV_PHASE
(
˘x
);

448 
pha£1
;

452 
pha£3
:

456 
	`as£π
(
˘x
->
À·
 >= 0);

458 if(
size
 < (
size_t
)
˘x
->
À·
) {

459 if(!
size
Ë
	`RETURN
(
RC_WMORE
);

460 if(
ty≥_v¨ü¡
 =
ASN_OSUBV_BIT
 && !
˘x
->
c⁄ãxt
) {

461 
°
->
bôs_unu£d
 = *(c⁄° 
uöt8_t
 *)
buf_±r
;

462 
˘x
->
À·
--;

463 
	`ADVANCE
(1);

465 
	`APPEND
(
buf_±r
, 
size
);

466 
	`as£π
(
˘x
->
c⁄ãxt
 > 0);

467 
˘x
->
À·
 -
size
;

468 
	`ADVANCE
(
size
);

469 
	`RETURN
(
RC_WMORE
);

471 if(
ty≥_v¨ü¡
 =
ASN_OSUBV_BIT


472 && !
˘x
->
c⁄ãxt
 && ctx->
À·
) {

473 
°
->
bôs_unu£d
 = *(c⁄° 
uöt8_t
 *)
buf_±r
;

474 
˘x
->
À·
--;

475 
	`ADVANCE
(1);

477 
	`APPEND
(
buf_±r
, 
˘x
->
À·
);

478 
	`ADVANCE
(
˘x
->
À·
);

479 
˘x
->
À·
 = 0;

481 
	`NEXT_PHASE
(
˘x
);

486 if(
£l
) {

487 
	`ASN_DEBUG
("3selÖ=%p, wn=%d,Ü=%ld, g=%ld, size=%ld",

488 
£l
->
¥ev
, sñ->
w™t_nuŒs
,

489 ()
£l
->
À·
, ()£l->
gŸ
, ()
size
);

490 if(
£l
->
¥ev
 || sñ->
w™t_nuŒs
 > 1 || sñ->
À·
 > 0) {

491 
	`RETURN
(
RC_WMORE
);

498 if(
ty≥_v¨ü¡
 =
ASN_OSUBV_BIT
 && 
°
->
size
) {

500 
°
->
buf
[°->
size
-1] &0xf‡<< st->
bôs_unu£d
;

503 
	`ASN_DEBUG
("Took %ld bytesÅoÉncode %s: [%s]:%ld",

504 ()
c⁄sumed_my£lf
, 
td
->
«me
,

505 (
ty≥_v¨ü¡
 =
ASN_OSUBV_STR
Ë? (*)
°
->
buf
 : "<data>",

506 ()
°
->
size
);

509 
	`RETURN
(
RC_OK
);

510 
	}
}

515 
a¢_íc_rvÆ_t


516 
	$OCTET_STRING_ícode_dî
(
a¢_TYPE_des¸ùt‹_t
 *
td
, *
•å
,

517 
èg_mode
, 
bî_év_èg_t
 
èg
,

518 
a¢_≠p_c⁄sume_byãs_f
 *
cb
, *
≠p_key
) {

519 
a¢_íc_rvÆ_t
 
î
;

520 
a¢_OCTET_STRING_•ecifics_t
 *
•ecs
 = 
td
->
•ecifics


521 ? (
a¢_OCTET_STRING_•ecifics_t
 *)
td
->
•ecifics


522 : &
a¢_DEF_OCTET_STRING_•ecs
;

523 
BIT_STRING_t
 *
°
 = (BIT_STRING_à*)
•å
;

524 
a¢_OS_Subv¨ü¡
 
ty≥_v¨ü¡
 = 
•ecs
->
subv¨ü¡
;

525 
fix_œ°_byã
 = 0;

527 
	`ASN_DEBUG
("%s %sás OCTET STRING",

528 
cb
?"E°im©ög":"Encodög", 
td
->
«me
);

533 if(
ty≥_v¨ü¡
 !
ASN_OSUBV_ANY
 || 
èg_mode
 == 1) {

534 
î
.
ícoded
 = 
	`dî_wrôe_ègs
(
td
,

535 (
ty≥_v¨ü¡
 =
ASN_OSUBV_BIT
Ë+ 
°
->
size
,

536 
èg_mode
, 
ty≥_v¨ü¡
 =
ASN_OSUBV_ANY
, 
èg
,

537 
cb
, 
≠p_key
);

538 if(
î
.
ícoded
 == -1) {

539 
î
.
Áûed_ty≥
 = 
td
;

540 
î
.
°ru˘uª_±r
 = 
•å
;

541  
î
;

545 
	`as£π
(
ty≥_v¨ü¡
 !
ASN_OSUBV_ANY
 || 
èg_mode
 != -1);

546 
î
.
ícoded
 = 0;

549 if(!
cb
) {

550 
î
.
ícoded
 +(
ty≥_v¨ü¡
 =
ASN_OSUBV_BIT
Ë+ 
°
->
size
;

551 
	`_ASN_ENCODED_OK
(
î
);

557 if(
ty≥_v¨ü¡
 =
ASN_OSUBV_BIT
) {

558 
uöt8_t
 
b
 = 
°
->
bôs_unu£d
 & 0x07;

559 if(
b
 && 
°
->
size
Ë
fix_œ°_byã
 = 1;

560 
	`_ASN_CALLBACK
(&
b
, 1);

561 
î
.
ícoded
++;

565 
	`_ASN_CALLBACK
(
°
->
buf
, st->
size
 - 
fix_œ°_byã
);

568 if(
fix_œ°_byã
) {

569 
uöt8_t
 
b
 = 
°
->
buf
[°->
size
-1] & (0xf‡<< st->
bôs_unu£d
);

570 
	`_ASN_CALLBACK
(&
b
, 1);

573 
î
.
ícoded
 +
°
->
size
;

574 
	`_ASN_ENCODED_OK
(
î
);

575 
cb_Áûed
:

576 
_ASN_ENCODE_FAILED
;

577 
	}
}

579 
a¢_íc_rvÆ_t


580 
	$OCTET_STRING_ícode_xî
(
a¢_TYPE_des¸ùt‹_t
 *
td
, *
•å
,

581 
ûevñ
, 
xî_ícodî_Êags_e
 
Êags
,

582 
a¢_≠p_c⁄sume_byãs_f
 *
cb
, *
≠p_key
) {

583 c⁄° *
h2c
 = "0123456789ABCDEF";

584 c⁄° 
OCTET_STRING_t
 *
°
 = (c⁄° OCTET_STRING_à*)
•å
;

585 
a¢_íc_rvÆ_t
 
î
;

586 
s¸©ch
[16 * 3 + 4];

587 *
p
 = 
s¸©ch
;

588 
uöt8_t
 *
buf
;

589 
uöt8_t
 *
íd
;

590 
size_t
 
i
;

592 if(!
°
 || (!°->
buf
 && st->
size
))

593 
_ASN_ENCODE_FAILED
;

595 
î
.
ícoded
 = 0;

600 
buf
 = 
°
->buf;

601 
íd
 = 
buf
 + 
°
->
size
;

602 if(
Êags
 & 
XER_F_CANONICAL
) {

603 *
s˚nd
 = 
s¸©ch
 + ((scratch) - 2);

604 ; 
buf
 < 
íd
; buf++) {

605 if(
p
 >
s˚nd
) {

606 
	`_ASN_CALLBACK
(
s¸©ch
, 
p
 - scratch);

607 
î
.
ícoded
 +
p
 - 
s¸©ch
;

608 
p
 = 
s¸©ch
;

610 *
p
++ = 
h2c
[(*
buf
 >> 4) & 0x0F];

611 *
p
++ = 
h2c
[*
buf
 & 0x0F];

614 
	`_ASN_CALLBACK
(
s¸©ch
, 
p
-scratch);

615 
î
.
ícoded
 +
p
 - 
s¸©ch
;

617 
i
 = 0; 
buf
 < 
íd
; buf++, i++) {

618 if(!(
i
 % 16Ë&& (ò|| 
°
->
size
 > 16)) {

619 
	`_ASN_CALLBACK
(
s¸©ch
, 
p
-scratch);

620 
î
.
ícoded
 +(
p
-
s¸©ch
);

621 
p
 = 
s¸©ch
;

622 
	`_i_ASN_TEXT_INDENT
(1, 
ûevñ
);

624 *
p
++ = 
h2c
[(*
buf
 >> 4) & 0x0F];

625 *
p
++ = 
h2c
[*
buf
 & 0x0F];

626 *
p
++ = 0x20;

628 if(
p
 - 
s¸©ch
) {

629 
p
--;

630 
	`_ASN_CALLBACK
(
s¸©ch
, 
p
-scratch);

631 
î
.
ícoded
 +
p
 - 
s¸©ch
;

632 if(
°
->
size
 > 16)

633 
	`_i_ASN_TEXT_INDENT
(1, 
ûevñ
-1);

637 
	`_ASN_ENCODED_OK
(
î
);

638 
cb_Áûed
:

639 
_ASN_ENCODE_FAILED
;

640 
	}
}

642 
	sOCTET_STRING__xî_esˇ≥_èbÀ_s
 {

643 *
	m°rög
;

644 
	msize
;

645 } 
	gOCTET_STRING__xî_esˇ≥_èbÀ
[] = {

646 
	#OSXET
(
s
Ë{ s, (sË- 1 }

	)

647 
OSXET
("\074\156\165\154\057\076"),

648 
OSXET
("\074\163\157\150\057\076"),

649 
OSXET
("\074\163\164\170\057\076"),

650 
OSXET
("\074\145\164\170\057\076"),

651 
OSXET
("\074\145\157\164\057\076"),

652 
OSXET
("\074\145\156\161\057\076"),

653 
OSXET
("\074\141\143\153\057\076"),

654 
OSXET
("\074\142\145\154\057\076"),

655 
OSXET
("\074\142\163\057\076"),

656 
OSXET
("\011"),

657 
OSXET
("\012"),

658 
OSXET
("\074\166\164\057\076"),

659 
OSXET
("\074\146\146\057\076"),

660 
OSXET
("\015"),

661 
OSXET
("\074\163\157\057\076"),

662 
OSXET
("\074\163\151\057\076"),

663 
OSXET
("\074\144\154\145\057\076"),

664 
OSXET
("\074\144\143\061\057\076"),

665 
OSXET
("\074\144\143\062\057\076"),

666 
OSXET
("\074\144\143\063\057\076"),

667 
OSXET
("\074\144\143\064\057\076"),

668 
OSXET
("\074\156\141\153\057\076"),

669 
OSXET
("\074\163\171\156\057\076"),

670 
OSXET
("\074\145\164\142\057\076"),

671 
OSXET
("\074\143\141\156\057\076"),

672 
OSXET
("\074\145\155\057\076"),

673 
OSXET
("\074\163\165\142\057\076"),

674 
OSXET
("\074\145\163\143\057\076"),

675 
OSXET
("\074\151\163\064\057\076"),

676 
OSXET
("\074\151\163\063\057\076"),

677 
OSXET
("\074\151\163\062\057\076"),

678 
OSXET
("\074\151\163\061\057\076"),

685 
OSXET
("\046\141\155\160\073"),

690 
OSXET
("\046\154\164\073"),

692 
OSXET
("\046\147\164\073"),

696 
	$OS__check_esˇ≥d_c⁄åﬁ_ch¨
(c⁄° *
buf
, 
size
) {

697 
size_t
 
i
;

704 
i
 = 0; i < 32 ; i++) {

705 
OCTET_STRING__xî_esˇ≥_èbÀ_s
 *
ñ
;

706 
ñ
 = &
OCTET_STRING__xî_esˇ≥_èbÀ
[
i
];

707 if(
ñ
->
size
 =sizê&& 
	`memcmp
(
buf
,Él->
°rög
, size) == 0)

708  
i
;

711 
	}
}

714 
	$OCTET_STRING__h™dÀ_c⁄åﬁ_ch¨s
(*
°ru˘_±r
, c⁄° *
chunk_buf
, 
size_t
 
chunk_size
) {

720 
c⁄åﬁ_ch¨
 = 
	`OS__check_esˇ≥d_c⁄åﬁ_ch¨
(
chunk_buf
,
chunk_size
);

721 if(
c⁄åﬁ_ch¨
 >= 0) {

722 
OCTET_STRING_t
 *
°
 = (OCTET_STRING_à*)
°ru˘_±r
;

723 *
p
 = 
	`REALLOC
(
°
->
buf
, st->
size
 + 2);

724 if(
p
) {

725 
°
->
buf
 = (
uöt8_t
 *)
p
;

726 
°
->
buf
[°->
size
++] = 
c⁄åﬁ_ch¨
;

727 
°
->
buf
[°->
size
] = '\0';

733 
	}
}

735 
a¢_íc_rvÆ_t


736 
	$OCTET_STRING_ícode_xî_utf8
(
a¢_TYPE_des¸ùt‹_t
 *
td
, *
•å
,

737 
ûevñ
, 
xî_ícodî_Êags_e
 
Êags
,

738 
a¢_≠p_c⁄sume_byãs_f
 *
cb
, *
≠p_key
) {

739 c⁄° 
OCTET_STRING_t
 *
°
 = (c⁄° OCTET_STRING_à*)
•å
;

740 
a¢_íc_rvÆ_t
 
î
;

741 
uöt8_t
 *
buf
, *
íd
;

742 
uöt8_t
 *
ss
;

743 
ssize_t
 
ícoded_Àn
 = 0;

745 ()
ûevñ
;

746 ()
Êags
;

748 if(!
°
 || (!°->
buf
 && st->
size
))

749 
_ASN_ENCODE_FAILED
;

751 
buf
 = 
°
->buf;

752 
íd
 = 
buf
 + 
°
->
size
;

753 
ss
 = 
buf
; bu‡< 
íd
; buf++) {

754 
ch
 = *
buf
;

755 
s_Àn
;

760 if(
ch
 < (
OCTET_STRING__xî_esˇ≥_èbÀ
)

761 /(
OCTET_STRING__xî_esˇ≥_èbÀ
[0])

762 && (
s_Àn
 = 
OCTET_STRING__xî_esˇ≥_èbÀ
[
ch
].
size
)) {

763 if(((
buf
 - 
ss
Ë&& 
	`cb
(ss, bu‡- ss, 
≠p_key
) < 0)

764 || 
	`cb
(
OCTET_STRING__xî_esˇ≥_èbÀ
[
ch
].
°rög
, 
s_Àn
,

765 
≠p_key
) < 0)

766 
_ASN_ENCODE_FAILED
;

767 
ícoded_Àn
 +(
buf
 - 
ss
Ë+ 
s_Àn
;

768 
ss
 = 
buf
 + 1;

772 
ícoded_Àn
 +(
buf
 - 
ss
);

773 if((
buf
 - 
ss
Ë&& 
	`cb
(ss, bu‡- ss, 
≠p_key
) < 0)

774 
_ASN_ENCODE_FAILED
;

776 
î
.
ícoded
 = 
ícoded_Àn
;

777 
	`_ASN_ENCODED_OK
(
î
);

778 
	}
}

783 
ssize_t
 
	$OCTET_STRING__c⁄vît_hexadecimÆ
(*
•å
, c⁄° *
chunk_buf
, 
size_t
 
chunk_size
, 
have_m‹e
) {

784 
OCTET_STRING_t
 *
°
 = (OCTET_STRING_à*)
•å
;

785 c⁄° *
chunk_°›
 = (c⁄° *)
chunk_buf
;

786 c⁄° *
p
 = 
chunk_°›
;

787 c⁄° *
≥nd
 = 
p
 + 
chunk_size
;

788 
˛v
 = 0;

789 
hÆf
 = 0;

790 
uöt8_t
 *
buf
;

793 
ssize_t
 
_ns
 = 
°
->
size
 + (
chunk_size
 + 1) / 2;

794 *
≈å
 = 
	`REALLOC
(
°
->
buf
, 
_ns
 + 1);

795 if(!
≈å
)  -1;

796 
°
->
buf
 = (
uöt8_t
 *)
≈å
;

797 
buf
 = 
°
->bu‡+ st->
size
;

804 ; 
p
 < 
≥nd
;Ö++) {

805 
ch
 = *(c⁄° *)
p
;

806 
ch
) {

813 
˛v
 = (˛v << 4Ë+ (
ch
 - 0x30);

817 
˛v
 = (˛v << 4Ë+ (
ch
 - 0x41 + 10);

821 
˛v
 = (˛v << 4Ë+ (
ch
 - 0x61 + 10);

824 *
buf
 = 0;

827 if(
hÆf
++) {

828 
hÆf
 = 0;

829 *
buf
++ = 
˛v
;

830 
chunk_°›
 = 
p
 + 1;

837 if(
hÆf
) {

838 if(
have_m‹e
) {

843 *
buf
++ = 
˛v
 << 4;

844 
chunk_°›
 = 
p
;

847 
chunk_°›
 = 
p
;

850 
°
->
size
 = 
buf
 - st->buf;

851 
	`as£π
(
°
->
size
 <
_ns
);

852 
°
->
buf
[°->
size
] = 0;

854  (
chunk_°›
 - (c⁄° *)
chunk_buf
);

855 
	}
}

860 
ssize_t
 
	$OCTET_STRING__c⁄vît_bö¨y
(*
•å
, c⁄° *
chunk_buf
, 
size_t
 
chunk_size
, 
have_m‹e
) {

861 
BIT_STRING_t
 *
°
 = (BIT_STRING_à*)
•å
;

862 c⁄° *
p
 = (c⁄° *)
chunk_buf
;

863 c⁄° *
≥nd
 = 
p
 + 
chunk_size
;

864 
bôs_unu£d
 = 
°
->bits_unused & 0x7;

865 
uöt8_t
 *
buf
;

868 
ssize_t
 
_ns
 = 
°
->
size
 + (
chunk_size
 + 7) / 8;

869 *
≈å
 = 
	`REALLOC
(
°
->
buf
, 
_ns
 + 1);

870 if(!
≈å
)  -1;

871 
°
->
buf
 = (
uöt8_t
 *)
≈å
;

872 
buf
 = 
°
->bu‡+ st->
size
;

874 ()
have_m‹e
;

876 if(
bôs_unu£d
 == 0)

877 
bôs_unu£d
 = 8;

878 if(
°
->
size
)

879 
buf
--;

884 ; 
p
 < 
≥nd
;Ö++) {

885 
ch
 = *(c⁄° *)
p
;

886 
ch
) {

893 if(
bôs_unu£d
-- <= 0) {

894 *++
buf
 = 0;

895 
bôs_unu£d
 = 7;

897 *
buf
 |(
ch
&1Ë<< 
bôs_unu£d
;

900 
°
->
bôs_unu£d
 = bits_unused;

905 if(
bôs_unu£d
 == 8) {

906 
°
->
size
 = 
buf
 - st->buf;

907 
°
->
bôs_unu£d
 = 0;

909 
°
->
size
 = 
buf
 - st->buf + 1;

910 
°
->
bôs_unu£d
 = bits_unused;

913 
	`as£π
(
°
->
size
 <
_ns
);

914 
°
->
buf
[°->
size
] = 0;

916  
chunk_size
;

917 
	}
}

923 
	$OS__°π€¡
(
ba£
, c⁄° *
buf
, c⁄° *
íd
, 
öt32_t
 *
ªt_vÆue
) {

924 
öt32_t
 
vÆ
 = 0;

925 c⁄° *
p
;

927 
p
 = 
buf
;Ö < 
íd
;Ö++) {

928 
ch
 = *
p
;

931 if((
vÆ
 * 
ba£
 + base) < 0)

934 
ch
) {

937 
vÆ
 = vÆ * 
ba£
 + (
ch
 - 0x30);

941 
vÆ
 = vÆ * 
ba£
 + (
ch
 - 0x41 + 10);

945 
vÆ
 = vÆ * 
ba£
 + (
ch
 - 0x61 + 10);

948 *
ªt_vÆue
 = 
vÆ
;

949  (
p
 - 
buf
) + 1;

955 *
ªt_vÆue
 = -1;

956  (
p
 - 
buf
);

957 
	}
}

962 
ssize_t
 
	$OCTET_STRING__c⁄vît_íåefs
(*
•å
, c⁄° *
chunk_buf
, 
size_t
 
chunk_size
, 
have_m‹e
) {

963 
OCTET_STRING_t
 *
°
 = (OCTET_STRING_à*)
•å
;

964 c⁄° *
p
 = (c⁄° *)
chunk_buf
;

965 c⁄° *
≥nd
 = 
p
 + 
chunk_size
;

966 
uöt8_t
 *
buf
;

969 
ssize_t
 
_ns
 = 
°
->
size
 + 
chunk_size
;

970 *
≈å
 = 
	`REALLOC
(
°
->
buf
, 
_ns
 + 1);

971 if(!
≈å
)  -1;

972 
°
->
buf
 = (
uöt8_t
 *)
≈å
;

973 
buf
 = 
°
->bu‡+ st->
size
;

978 ; 
p
 < 
≥nd
;Ö++) {

979 
ch
 = *(c⁄° *)
p
;

980 
Àn
;

982 if(
ch
 != 0x26 ) {

983 *
buf
++ = 
ch
;

990 
Àn
 = 
chunk_size
 - (
p
 - (c⁄° *)
chunk_buf
);

991 if(
Àn
 =1 ) 
w™t_m‹e
;

992 if(
p
[1] == 0x23 ) {

993 c⁄° *
pvÆ
;

994 
öt32_t
 
vÆ
 = 0;

995 
ba£
;

997 if(
Àn
 =2 ) 
w™t_m‹e
;

998 if(
p
[2] == 0x78 )

999 
pvÆ
 = 
p
 + 3, 
ba£
 = 16;

1001 
pvÆ
 = 
p
 + 2, 
ba£
 = 10;

1002 
Àn
 = 
	`OS__°π€¡
(
ba£
, 
pvÆ
, 
p
 +Üí, &
vÆ
);

1003 if(
Àn
 == -1) {

1005 *
buf
++ = 
ch
;

1008 if(!
Àn
 || 
pvÆ
[Àn-1] !0x3bË
w™t_m‹e
;

1009 
	`as£π
(
vÆ
 > 0);

1010 
p
 +(
pvÆ
 -ÖË+ 
Àn
 - 1;

1012 if(
vÆ
 < 0x80) {

1013 *
buf
++ = ()
vÆ
;

1014 } if(
vÆ
 < 0x800) {

1015 *
buf
++ = 0xc0 | ((
vÆ
 >> 6));

1016 *
buf
++ = 0x80 | ((
vÆ
 & 0x3f));

1017 } if(
vÆ
 < 0x10000) {

1018 *
buf
++ = 0xe0 | ((
vÆ
 >> 12));

1019 *
buf
++ = 0x80 | ((
vÆ
 >> 6) & 0x3f);

1020 *
buf
++ = 0x80 | ((
vÆ
 & 0x3f));

1021 } if(
vÆ
 < 0x200000) {

1022 *
buf
++ = 0xf0 | ((
vÆ
 >> 18));

1023 *
buf
++ = 0x80 | ((
vÆ
 >> 12) & 0x3f);

1024 *
buf
++ = 0x80 | ((
vÆ
 >> 6) & 0x3f);

1025 *
buf
++ = 0x80 | ((
vÆ
 & 0x3f));

1026 } if(
vÆ
 < 0x4000000) {

1027 *
buf
++ = 0xf8 | ((
vÆ
 >> 24));

1028 *
buf
++ = 0x80 | ((
vÆ
 >> 18) & 0x3f);

1029 *
buf
++ = 0x80 | ((
vÆ
 >> 12) & 0x3f);

1030 *
buf
++ = 0x80 | ((
vÆ
 >> 6) & 0x3f);

1031 *
buf
++ = 0x80 | ((
vÆ
 & 0x3f));

1033 *
buf
++ = 0xf¯| ((
vÆ
 >> 30) & 0x1);

1034 *
buf
++ = 0x80 | ((
vÆ
 >> 24) & 0x3f);

1035 *
buf
++ = 0x80 | ((
vÆ
 >> 18) & 0x3f);

1036 *
buf
++ = 0x80 | ((
vÆ
 >> 12) & 0x3f);

1037 *
buf
++ = 0x80 | ((
vÆ
 >> 6) & 0x3f);

1038 *
buf
++ = 0x80 | ((
vÆ
 & 0x3f));

1044 *
sc
 = (*)
	`memchr
(
p
, 0x3b, 
Àn
 > 5 ? 5 :Üen);

1045 if(!
sc
Ë
w™t_m‹e
;

1046 if((
sc
 - 
p
) == 4

1047 && 
p
[1] == 0x61

1048 && 
p
[2] == 0x6d

1049 && 
p
[3] == 0x70 ) {

1050 *
buf
++ = 0x26;

1051 
p
 = 
sc
;

1054 if((
sc
 - 
p
) == 3) {

1055 if(
p
[1] == 0x6c) {

1056 *
buf
 = 0x3c;

1057 } if(
p
[1] == 0x67) {

1058 *
buf
 = 0x3e;

1061 *
buf
++ = 
ch
;

1064 if(
p
[2] != 0x74) {

1066 *
buf
++ = 
ch
;

1069 
buf
++;

1070 
p
 = 
sc
;

1074 *
buf
++ = 
ch
;

1078 
w™t_m‹e
:

1079 if(
have_m‹e
) {

1084 *
buf
++ = 
ch
;

1087 
chunk_size
 = (
p
 - (c⁄° *)
chunk_buf
);

1092 
°
->
size
 = 
buf
 - st->buf;

1093 
	`as£π
(
°
->
size
 <
_ns
);

1094 
°
->
buf
[°->
size
] = 0;

1096  
chunk_size
;

1097 
	}
}

1102 
a¢_dec_rvÆ_t


1103 
OCTET_STRING__decode_xî
(
a¢_codec_˘x_t
 *
›t_codec_˘x
,

1104 
a¢_TYPE_des¸ùt‹_t
 *
td
, **
•å
,

1105 c⁄° *
›t_m«me
, c⁄° *
buf_±r
, 
size_t
 
size
,

1106 (*
›t_u√x≥˘ed_èg_decodî
)

1107 (*
°ru˘_±r
, c⁄° *
chunk_buf
, 
size_t
 
chunk_size
),

1108 
	$ssize_t
 (*
body_ª˚ivî
)

1109 (*
°ru˘_±r
, c⁄° *
chunk_buf
, 
size_t
 
chunk_size
,

1110 
have_m‹e
)

1112 
OCTET_STRING_t
 *
°
 = (OCTET_STRING_à*)*
•å
;

1113 
a¢_OCTET_STRING_•ecifics_t
 *
•ecs
 = 
td
->
•ecifics


1114 ? (
a¢_OCTET_STRING_•ecifics_t
 *)
td
->
•ecifics


1115 : &
a¢_DEF_OCTET_STRING_•ecs
;

1116 c⁄° *
xml_èg
 = 
›t_m«me
 ? o±_m«mê: 
td
->xml_tag;

1117 
a¢_°ru˘_˘x_t
 *
˘x
;

1118 
a¢_dec_rvÆ_t
 
rvÆ
;

1119 
°_Æloˇãd
;

1124 if(!
°
) {

1125 
°
 = (
OCTET_STRING_t
 *)
	`CALLOC
(1, 
•ecs
->
°ru˘_size
);

1126 *
•å
 = (*)
°
;

1127 if(!
°
Ë
°a_Áûed
;

1128 
°_Æloˇãd
 = 1;

1130 
°_Æloˇãd
 = 0;

1132 if(!
°
->
buf
) {

1134 
°
->
buf
 = (
uöt8_t
 *)
	`CALLOC
(1, 1);

1135 if(!
°
->
buf
) {

1136 if(
°_Æloˇãd
) {

1137 *
•å
 = 0;

1138 
°b_Áûed
;

1140 
°a_Áûed
;

1146 
˘x
 = (
a¢_°ru˘_˘x_t
 *)(((*)*
•å
Ë+ 
•ecs
->
˘x_off£t
);

1148  
	`xî_decode_gíîÆ
(
›t_codec_˘x
, 
˘x
, *
•å
, 
xml_èg
,

1149 
buf_±r
, 
size
, 
›t_u√x≥˘ed_èg_decodî
, 
body_ª˚ivî
);

1151 
°b_Áûed
:

1152 
	`FREEMEM
(
°
);

1153 
°a_Áûed
:

1154 
rvÆ
.
code
 = 
RC_FAIL
;

1155 
rvÆ
.
c⁄sumed
 = 0;

1156  
rvÆ
;

1157 
	}
}

1162 
a¢_dec_rvÆ_t


1163 
	$OCTET_STRING_decode_xî_hex
(
a¢_codec_˘x_t
 *
›t_codec_˘x
,

1164 
a¢_TYPE_des¸ùt‹_t
 *
td
, **
•å
,

1165 c⁄° *
›t_m«me
, c⁄° *
buf_±r
, 
size_t
 
size
) {

1166  
	`OCTET_STRING__decode_xî
(
›t_codec_˘x
, 
td
, 
•å
, 
›t_m«me
,

1167 
buf_±r
, 
size
, 0, 
OCTET_STRING__c⁄vît_hexadecimÆ
);

1168 
	}
}

1173 
a¢_dec_rvÆ_t


1174 
	$OCTET_STRING_decode_xî_bö¨y
(
a¢_codec_˘x_t
 *
›t_codec_˘x
,

1175 
a¢_TYPE_des¸ùt‹_t
 *
td
, **
•å
,

1176 c⁄° *
›t_m«me
, c⁄° *
buf_±r
, 
size_t
 
size
) {

1177  
	`OCTET_STRING__decode_xî
(
›t_codec_˘x
, 
td
, 
•å
, 
›t_m«me
,

1178 
buf_±r
, 
size
, 0, 
OCTET_STRING__c⁄vît_bö¨y
);

1179 
	}
}

1184 
a¢_dec_rvÆ_t


1185 
	$OCTET_STRING_decode_xî_utf8
(
a¢_codec_˘x_t
 *
›t_codec_˘x
,

1186 
a¢_TYPE_des¸ùt‹_t
 *
td
, **
•å
,

1187 c⁄° *
›t_m«me
, c⁄° *
buf_±r
, 
size_t
 
size
) {

1188  
	`OCTET_STRING__decode_xî
(
›t_codec_˘x
, 
td
, 
•å
, 
›t_m«me
,

1189 
buf_±r
, 
size
,

1190 
OCTET_STRING__h™dÀ_c⁄åﬁ_ch¨s
,

1191 
OCTET_STRING__c⁄vît_íåefs
);

1192 
	}
}

1195 
	$OCTET_STRING_≥r_gë_ch¨a˘îs
(
a¢_≥r_d©a_t
 *
po
, 
uöt8_t
 *
buf
,

1196 
size_t
 
unôs
, 
bpc
, 
unô_bôs
,

1197 
lb
, 
ub
, 
a¢_≥r_c⁄°øöts_t
 *
pc
) {

1198 
uöt8_t
 *
íd
 = 
buf
 + 
unôs
 * 
bpc
;

1200 
	`ASN_DEBUG
("Expanding %d characters into (%ld..%ld):%d",

1201 ()
unôs
, 
lb
, 
ub
, 
unô_bôs
);

1204 if(()
ub
 <(()2 << (
unô_bôs
 - 1))) {

1206 
lb
 = 0;

1207 } if(
pc
 &&Öc->
code2vÆue
) {

1208 if(
unô_bôs
 > 16)

1212 ; 
buf
 < 
íd
; bu‡+
bpc
) {

1213 
vÆue
;

1214 
code
 = 
	`≥r_gë_„w_bôs
(
po
, 
unô_bôs
);

1215 if(
code
 < 0)  -1;

1216 
vÆue
 = 
pc
->
	`code2vÆue
(
code
);

1217 if(
vÆue
 < 0) {

1218 
	`ASN_DEBUG
("Code %d (0x%02x) is"

1220 
code
, code, 
lb
, 
ub
);

1223 
bpc
) {

1224 1: *
buf
 = 
vÆue
; ;

1225 2: 
buf
[0] = 
vÆue
 >> 8; buf[1] = value; ;

1226 4: 
buf
[0] = 
vÆue
 >> 24; buf[1] = value >> 16;

1227 
buf
[2] = 
vÆue
 >> 8; buf[3] = value; ;

1234 if(
lb
 =0 && (
unô_bôs
 =8 * 
bpc
)) {

1235  
	`≥r_gë_m™y_bôs
(
po
, 
buf
, 0, 
unô_bôs
 * 
unôs
);

1238 ; 
buf
 < 
íd
; bu‡+
bpc
) {

1239 
code
 = 
	`≥r_gë_„w_bôs
(
po
, 
unô_bôs
);

1240 
ch
 = 
code
 + 
lb
;

1241 if(
code
 < 0)  -1;

1242 if(
ch
 > 
ub
) {

1243 
	`ASN_DEBUG
("Code %d is out ofÑange (%ld..%ld)",

1244 
ch
, 
lb
, 
ub
);

1247 
bpc
) {

1248 1: *
buf
 = 
ch
; ;

1249 2: 
buf
[0] = 
ch
 >> 8; buf[1] = ch; ;

1250 4: 
buf
[0] = 
ch
 >> 24; buf[1] = ch >> 16;

1251 
buf
[2] = 
ch
 >> 8; buf[3] = ch; ;

1256 
	}
}

1259 
	$OCTET_STRING_≥r_put_ch¨a˘îs
(
a¢_≥r_ouç_t
 *
po
, c⁄° 
uöt8_t
 *
buf
,

1260 
size_t
 
unôs
, 
bpc
, 
unô_bôs
,

1261 
lb
, 
ub
, 
a¢_≥r_c⁄°øöts_t
 *
pc
) {

1262 c⁄° 
uöt8_t
 *
íd
 = 
buf
 + 
unôs
 * 
bpc
;

1264 
	`ASN_DEBUG
("Squeezing %d characters into (%ld..%ld):%d (%d bpc)",

1265 ()
unôs
, 
lb
, 
ub
, 
unô_bôs
, 
bpc
);

1268 if(()
ub
 <(()2 << (
unô_bôs
 - 1))) {

1270 
lb
 = 0;

1271 } if(
pc
 &&Öc->
vÆue2code
) {

1272 ; 
buf
 < 
íd
; bu‡+
bpc
) {

1273 
code
;

1274 
uöt32_t
 
vÆue
;

1275 
bpc
) {

1276 1: 
vÆue
 = *(c⁄° 
uöt8_t
 *)
buf
; ;

1277 2: 
vÆue
 = (
buf
[0] << 8) | buf[1]; ;

1278 4: 
vÆue
 = (
buf
[0] << 24) | (buf[1] << 16)

1279 | (
buf
[2] << 8) | buf[3]; ;

1282 
code
 = 
pc
->
	`vÆue2code
(
vÆue
);

1283 if(
code
 < 0) {

1284 
	`ASN_DEBUG
("Character %d (0x%02x) is"

1286 *
buf
, *buf, 
lb
, 
ub
);

1289 if(
	`≥r_put_„w_bôs
(
po
, 
code
, 
unô_bôs
))

1295 if(
lb
 =0 && (
unô_bôs
 =8 * 
bpc
)) {

1296  
	`≥r_put_m™y_bôs
(
po
, 
buf
, 
unô_bôs
 * 
unôs
);

1299 
ub
 -
lb
; 
buf
 < 
íd
; bu‡+
bpc
) {

1300 
ch
;

1301 
uöt32_t
 
vÆue
;

1302 
bpc
) {

1303 1: 
vÆue
 = *(c⁄° 
uöt8_t
 *)
buf
; ;

1304 2: 
vÆue
 = (
buf
[0] << 8) | buf[1]; ;

1305 4: 
vÆue
 = (
buf
[0] << 24) | (buf[1] << 16)

1306 | (
buf
[2] << 8) | buf[3]; ;

1309 
ch
 = 
vÆue
 - 
lb
;

1310 if(
ch
 < 0 || ch > 
ub
) {

1311 
	`ASN_DEBUG
("Character %d (0x%02x)"

1313 *
buf
, *buf, 
lb
, 
ub
 +Üb);

1316 if(
	`≥r_put_„w_bôs
(
po
, 
ch
, 
unô_bôs
))

1321 
	}
}

1323 
a¢_dec_rvÆ_t


1324 
	$OCTET_STRING_decode_u≥r
(
a¢_codec_˘x_t
 *
›t_codec_˘x
,

1325 
a¢_TYPE_des¸ùt‹_t
 *
td
, 
a¢_≥r_c⁄°øöts_t
 *
c⁄°øöts
,

1326 **
•å
, 
a¢_≥r_d©a_t
 *
pd
) {

1328 
a¢_OCTET_STRING_•ecifics_t
 *
•ecs
 = 
td
->
•ecifics


1329 ? (
a¢_OCTET_STRING_•ecifics_t
 *)
td
->
•ecifics


1330 : &
a¢_DEF_OCTET_STRING_•ecs
;

1331 
a¢_≥r_c⁄°øöts_t
 *
pc
 = 
c⁄°øöts
 ? constraints

1332 : 
td
->
≥r_c⁄°øöts
;

1333 
a¢_≥r_c⁄°øöt_t
 *
cvÆ
;

1334 
a¢_≥r_c⁄°øöt_t
 *
csiz
;

1335 
a¢_dec_rvÆ_t
 
rvÆ
 = { 
RC_OK
, 0 };

1336 
BIT_STRING_t
 *
°
 = (BIT_STRING_à*)*
•å
;

1337 
ssize_t
 
c⁄sumed_my£lf
 = 0;

1338 
ª≥©
;

1340 
OS__BPC_BIT
 = 0,

1341 
OS__BPC_CHAR
 = 1,

1342 
OS__BPC_U16
 = 2,

1343 
OS__BPC_U32
 = 4

1344 } 
bpc
;

1345 
unô_bôs
;

1346 
ˇn⁄iˇl_unô_bôs
;

1348 ()
›t_codec_˘x
;

1350 if(
pc
) {

1351 
cvÆ
 = &
pc
->
vÆue
;

1352 
csiz
 = &
pc
->
size
;

1354 
cvÆ
 = &
a¢_DEF_OCTET_STRING_c⁄°øöts
.
vÆue
;

1355 
csiz
 = &
a¢_DEF_OCTET_STRING_c⁄°øöts
.
size
;

1358 
•ecs
->
subv¨ü¡
) {

1360 
ASN_OSUBV_ANY
:

1361 
	`ASN_DEBUG
("Uƒecognized subv¨ü¡ %d", 
•ecs
->
subv¨ü¡
);

1362 
	`RETURN
(
RC_FAIL
);

1363 
ASN_OSUBV_BIT
:

1364 
ˇn⁄iˇl_unô_bôs
 = 
unô_bôs
 = 1;

1365 
bpc
 = 
OS__BPC_BIT
;

1367 
ASN_OSUBV_STR
:

1368 
ˇn⁄iˇl_unô_bôs
 = 
unô_bôs
 = 8;

1369 if(
cvÆ
->
Êags
 & 
APC_CONSTRAINED
)

1370 
unô_bôs
 = 
cvÆ
->
ønge_bôs
;

1371 
bpc
 = 
OS__BPC_CHAR
;

1373 
ASN_OSUBV_U16
:

1374 
ˇn⁄iˇl_unô_bôs
 = 
unô_bôs
 = 16;

1375 if(
cvÆ
->
Êags
 & 
APC_CONSTRAINED
)

1376 
unô_bôs
 = 
cvÆ
->
ønge_bôs
;

1377 
bpc
 = 
OS__BPC_U16
;

1379 
ASN_OSUBV_U32
:

1380 
ˇn⁄iˇl_unô_bôs
 = 
unô_bôs
 = 32;

1381 if(
cvÆ
->
Êags
 & 
APC_CONSTRAINED
)

1382 
unô_bôs
 = 
cvÆ
->
ønge_bôs
;

1383 
bpc
 = 
OS__BPC_U32
;

1390 if(!
°
) {

1391 
°
 = (
BIT_STRING_t
 *)(*
•å
 = 
	`CALLOC
(1, 
•ecs
->
°ru˘_size
));

1392 if(!
°
Ë
	`RETURN
(
RC_FAIL
);

1395 
	`ASN_DEBUG
("PER Decoding %s size %ld .. %ld bits %d",

1396 
csiz
->
Êags
 & 
APC_EXTENSIBLE
 ? "extensible" : "non-extensible",

1397 
csiz
->
lowî_bound
, csiz->
uµî_bound
, csiz->
ef„˘ive_bôs
);

1399 if(
csiz
->
Êags
 & 
APC_EXTENSIBLE
) {

1400 
öext
 = 
	`≥r_gë_„w_bôs
(
pd
, 1);

1401 if(
öext
 < 0Ë
	`RETURN
(
RC_WMORE
);

1402 if(
öext
) {

1403 
csiz
 = &
a¢_DEF_OCTET_STRING_c⁄°øöts
.
size
;

1404 
cvÆ
 = &
a¢_DEF_OCTET_STRING_c⁄°øöts
.
vÆue
;

1405 
unô_bôs
 = 
ˇn⁄iˇl_unô_bôs
;

1409 if(
csiz
->
ef„˘ive_bôs
 >= 0) {

1410 
	`FREEMEM
(
°
->
buf
);

1411 if(
bpc
) {

1412 
°
->
size
 = 
csiz
->
uµî_bound
 * 
bpc
;

1414 
°
->
size
 = (
csiz
->
uµî_bound
 + 7) >> 3;

1416 
°
->
buf
 = (
uöt8_t
 *)
	`MALLOC
(°->
size
 + 1);

1417 if(!
°
->
buf
Ë{ st->
size
 = 0; 
	`RETURN
(
RC_FAIL
); }

1423 if(
csiz
->
ef„˘ive_bôs
 == 0) {

1424 
ªt
;

1425 if(
bpc
) {

1426 
	`ASN_DEBUG
("Encoding OCTET STRING size %ld",

1427 
csiz
->
uµî_bound
);

1428 
ªt
 = 
	`OCTET_STRING_≥r_gë_ch¨a˘îs
(
pd
, 
°
->
buf
,

1429 
csiz
->
uµî_bound
, 
bpc
, 
unô_bôs
,

1430 
cvÆ
->
lowî_bound
, cvÆ->
uµî_bound
, 
pc
);

1431 if(
ªt
 > 0Ë
	`RETURN
(
RC_FAIL
);

1433 
	`ASN_DEBUG
("Encoding BIT STRING size %ld",

1434 
csiz
->
uµî_bound
);

1435 
ªt
 = 
	`≥r_gë_m™y_bôs
(
pd
, 
°
->
buf
, 0,

1436 
unô_bôs
 * 
csiz
->
uµî_bound
);

1438 if(
ªt
 < 0Ë
	`RETURN
(
RC_WMORE
);

1439 
c⁄sumed_my£lf
 +
unô_bôs
 * 
csiz
->
uµî_bound
;

1440 
°
->
buf
[°->
size
] = 0;

1441 if(
bpc
 == 0) {

1442 
ubs
 = (
csiz
->
uµî_bound
 & 0x7);

1443 
°
->
bôs_unu£d
 = 
ubs
 ? 8 - ubs : 0;

1445 
	`RETURN
(
RC_OK
);

1448 
°
->
size
 = 0;

1450 
ssize_t
 
øw_Àn
;

1451 
ssize_t
 
Àn_byãs
;

1452 
ssize_t
 
Àn_bôs
;

1453 *
p
;

1454 
ªt
;

1457 
øw_Àn
 = 
	`u≥r_gë_Àngth
(
pd
, 
csiz
->
ef„˘ive_bôs
, &
ª≥©
);

1458 if(
øw_Àn
 < 0Ë
	`RETURN
(
RC_WMORE
);

1459 
øw_Àn
 +
csiz
->
lowî_bound
;

1461 
	`ASN_DEBUG
("Got PERÜengthÉb %ld,Üen %ld, %s (%s)",

1462 ()
csiz
->
ef„˘ive_bôs
, ()
øw_Àn
,

1463 
ª≥©
 ? "ª≥©" : "⁄˚", 
td
->
«me
);

1464 if(
bpc
) {

1465 
Àn_byãs
 = 
øw_Àn
 * 
bpc
;

1466 
Àn_bôs
 = 
Àn_byãs
 * 
unô_bôs
;

1468 
Àn_bôs
 = 
øw_Àn
;

1469 
Àn_byãs
 = (
Àn_bôs
 + 7) >> 3;

1470 if(
Àn_bôs
 & 0x7)

1471 
°
->
bôs_unu£d
 = 8 - (
Àn_bôs
 & 0x7);

1474 
p
 = 
	`REALLOC
(
°
->
buf
, st->
size
 + 
Àn_byãs
 + 1);

1475 if(!
p
Ë
	`RETURN
(
RC_FAIL
);

1476 
°
->
buf
 = (
uöt8_t
 *)
p
;

1478 if(
bpc
) {

1479 
ªt
 = 
	`OCTET_STRING_≥r_gë_ch¨a˘îs
(
pd
,

1480 &
°
->
buf
[°->
size
], 
øw_Àn
, 
bpc
, 
unô_bôs
,

1481 
cvÆ
->
lowî_bound
, cvÆ->
uµî_bound
, 
pc
);

1482 if(
ªt
 > 0Ë
	`RETURN
(
RC_FAIL
);

1484 
ªt
 = 
	`≥r_gë_m™y_bôs
(
pd
, &
°
->
buf
[°->
size
],

1485 0, 
Àn_bôs
);

1487 if(
ªt
 < 0Ë
	`RETURN
(
RC_WMORE
);

1488 
°
->
size
 +
Àn_byãs
;

1489 } 
ª≥©
);

1490 
°
->
buf
[°->
size
] = 0;

1492  
rvÆ
;

1493 
	}
}

1495 
a¢_íc_rvÆ_t


1496 
	$OCTET_STRING_ícode_u≥r
(
a¢_TYPE_des¸ùt‹_t
 *
td
,

1497 
a¢_≥r_c⁄°øöts_t
 *
c⁄°øöts
, *
•å
, 
a¢_≥r_ouç_t
 *
po
) {

1499 
a¢_OCTET_STRING_•ecifics_t
 *
•ecs
 = 
td
->
•ecifics


1500 ? (
a¢_OCTET_STRING_•ecifics_t
 *)
td
->
•ecifics


1501 : &
a¢_DEF_OCTET_STRING_•ecs
;

1502 
a¢_≥r_c⁄°øöts_t
 *
pc
 = 
c⁄°øöts
 ? constraints

1503 : 
td
->
≥r_c⁄°øöts
;

1504 
a¢_≥r_c⁄°øöt_t
 *
cvÆ
;

1505 
a¢_≥r_c⁄°øöt_t
 *
csiz
;

1506 c⁄° 
BIT_STRING_t
 *
°
 = (c⁄° BIT_STRING_à*)
•å
;

1507 
a¢_íc_rvÆ_t
 
î
 = { 0, 0, 0 };

1508 
öext
 = 0;

1509 
unô_bôs
;

1510 
ˇn⁄iˇl_unô_bôs
;

1511 
sizeöunôs
;

1512 c⁄° 
uöt8_t
 *
buf
;

1513 
ªt
;

1515 
OS__BPC_BIT
 = 0,

1516 
OS__BPC_CHAR
 = 1,

1517 
OS__BPC_U16
 = 2,

1518 
OS__BPC_U32
 = 4

1519 } 
bpc
;

1520 
˘_exãnsibÀ
;

1522 if(!
°
 || (!°->
buf
 && st->
size
))

1523 
_ASN_ENCODE_FAILED
;

1525 if(
pc
) {

1526 
cvÆ
 = &
pc
->
vÆue
;

1527 
csiz
 = &
pc
->
size
;

1529 
cvÆ
 = &
a¢_DEF_OCTET_STRING_c⁄°øöts
.
vÆue
;

1530 
csiz
 = &
a¢_DEF_OCTET_STRING_c⁄°øöts
.
size
;

1532 
˘_exãnsibÀ
 = 
csiz
->
Êags
 & 
APC_EXTENSIBLE
;

1534 
•ecs
->
subv¨ü¡
) {

1536 
ASN_OSUBV_ANY
:

1537 
_ASN_ENCODE_FAILED
;

1538 
ASN_OSUBV_BIT
:

1539 
ˇn⁄iˇl_unô_bôs
 = 
unô_bôs
 = 1;

1540 
bpc
 = 
OS__BPC_BIT
;

1541 
sizeöunôs
 = 
°
->
size
 * 8 - (°->
bôs_unu£d
 & 0x07);

1542 
	`ASN_DEBUG
("BIT STRING of %d bytes, %d bits unused",

1543 
sizeöunôs
, 
°
->
bôs_unu£d
);

1545 
ASN_OSUBV_STR
:

1546 
ˇn⁄iˇl_unô_bôs
 = 
unô_bôs
 = 8;

1547 if(
cvÆ
->
Êags
 & 
APC_CONSTRAINED
)

1548 
unô_bôs
 = 
cvÆ
->
ønge_bôs
;

1549 
bpc
 = 
OS__BPC_CHAR
;

1550 
sizeöunôs
 = 
°
->
size
;

1552 
ASN_OSUBV_U16
:

1553 
ˇn⁄iˇl_unô_bôs
 = 
unô_bôs
 = 16;

1554 if(
cvÆ
->
Êags
 & 
APC_CONSTRAINED
)

1555 
unô_bôs
 = 
cvÆ
->
ønge_bôs
;

1556 
bpc
 = 
OS__BPC_U16
;

1557 
sizeöunôs
 = 
°
->
size
 / 2;

1559 
ASN_OSUBV_U32
:

1560 
ˇn⁄iˇl_unô_bôs
 = 
unô_bôs
 = 32;

1561 if(
cvÆ
->
Êags
 & 
APC_CONSTRAINED
)

1562 
unô_bôs
 = 
cvÆ
->
ønge_bôs
;

1563 
bpc
 = 
OS__BPC_U32
;

1564 
sizeöunôs
 = 
°
->
size
 / 4;

1568 
	`ASN_DEBUG
("Encoding %s into %d units of %d bits"

1570 
td
->
«me
, 
sizeöunôs
, 
unô_bôs
,

1571 
csiz
->
lowî_bound
, csiz->
uµî_bound
,

1572 
csiz
->
ef„˘ive_bôs
, 
˘_exãnsibÀ
 ? " EXT" : "");

1576 if(
csiz
->
ef„˘ive_bôs
 >= 0) {

1577 if(()
sizeöunôs
 < 
csiz
->
lowî_bound


1578 || ()
sizeöunôs
 > 
csiz
->
uµî_bound
) {

1579 if(
˘_exãnsibÀ
) {

1580 
cvÆ
 = &
a¢_DEF_OCTET_STRING_c⁄°øöts
.
vÆue
;

1581 
csiz
 = &
a¢_DEF_OCTET_STRING_c⁄°øöts
.
size
;

1582 
unô_bôs
 = 
ˇn⁄iˇl_unô_bôs
;

1583 
öext
 = 1;

1585 
_ASN_ENCODE_FAILED
;

1588 
öext
 = 0;

1591 if(
˘_exãnsibÀ
) {

1593 if(
	`≥r_put_„w_bôs
(
po
, 
öext
, 1))

1594 
_ASN_ENCODE_FAILED
;

1600 if(
csiz
->
ef„˘ive_bôs
 >= 0) {

1601 
	`ASN_DEBUG
("Encoding %d bytes (%ld),Üength in %d bits",

1602 
°
->
size
, 
sizeöunôs
 - 
csiz
->
lowî_bound
,

1603 
csiz
->
ef„˘ive_bôs
);

1604 
ªt
 = 
	`≥r_put_„w_bôs
(
po
, 
sizeöunôs
 - 
csiz
->
lowî_bound
,

1605 
csiz
->
ef„˘ive_bôs
);

1606 if(
ªt
Ë
_ASN_ENCODE_FAILED
;

1607 if(
bpc
) {

1608 
ªt
 = 
	`OCTET_STRING_≥r_put_ch¨a˘îs
(
po
, 
°
->
buf
,

1609 
sizeöunôs
, 
bpc
, 
unô_bôs
,

1610 
cvÆ
->
lowî_bound
, cvÆ->
uµî_bound
, 
pc
);

1612 
ªt
 = 
	`≥r_put_m™y_bôs
(
po
, 
°
->
buf
,

1613 
sizeöunôs
 * 
unô_bôs
);

1615 if(
ªt
Ë
_ASN_ENCODE_FAILED
;

1616 
	`_ASN_ENCODED_OK
(
î
);

1619 
	`ASN_DEBUG
("Encodög %d byãs", 
°
->
size
);

1621 if(
sizeöunôs
 == 0) {

1622 if(
	`u≥r_put_Àngth
(
po
, 0))

1623 
_ASN_ENCODE_FAILED
;

1624 
	`_ASN_ENCODED_OK
(
î
);

1627 
buf
 = 
°
->buf;

1628 
sizeöunôs
) {

1629 
ssize_t
 
maySave
 = 
	`u≥r_put_Àngth
(
po
, 
sizeöunôs
);

1630 if(
maySave
 < 0Ë
_ASN_ENCODE_FAILED
;

1632 
	`ASN_DEBUG
("Encoding %ld of %ld",

1633 ()
maySave
, ()
sizeöunôs
);

1635 if(
bpc
) {

1636 
ªt
 = 
	`OCTET_STRING_≥r_put_ch¨a˘îs
(
po
, 
buf
,

1637 
maySave
, 
bpc
, 
unô_bôs
,

1638 
cvÆ
->
lowî_bound
, cvÆ->
uµî_bound
, 
pc
);

1640 
ªt
 = 
	`≥r_put_m™y_bôs
(
po
, 
buf
, 
maySave
 * 
unô_bôs
);

1642 if(
ªt
Ë
_ASN_ENCODE_FAILED
;

1644 if(
bpc
)

1645 
buf
 +
maySave
 * 
bpc
;

1647 
buf
 +
maySave
 >> 3;

1648 
sizeöunôs
 -
maySave
;

1649 
	`as£π
(!(
maySave
 & 0x07Ë|| !
sizeöunôs
);

1652 
	`_ASN_ENCODED_OK
(
î
);

1653 
	}
}

1656 
	$OCTET_STRING_¥öt
(
a¢_TYPE_des¸ùt‹_t
 *
td
, c⁄° *
•å
, 
ûevñ
,

1657 
a¢_≠p_c⁄sume_byãs_f
 *
cb
, *
≠p_key
) {

1658 c⁄° *
h2c
 = "0123456789ABCDEF";

1659 c⁄° 
OCTET_STRING_t
 *
°
 = (c⁄° OCTET_STRING_à*)
•å
;

1660 
s¸©ch
[16 * 3 + 4];

1661 *
p
 = 
s¸©ch
;

1662 
uöt8_t
 *
buf
;

1663 
uöt8_t
 *
íd
;

1664 
size_t
 
i
;

1666 ()
td
;

1668 if(!
°
 || (!°->
buf
 && st->
size
))

1669  (
	`cb
("<ab£¡>", 8, 
≠p_key
) < 0) ? -1 : 0;

1674 
buf
 = 
°
->buf;

1675 
íd
 = 
buf
 + 
°
->
size
;

1676 
i
 = 0; 
buf
 < 
íd
; buf++, i++) {

1677 if(!(
i
 % 16Ë&& (ò|| 
°
->
size
 > 16)) {

1678 if(
	`cb
(
s¸©ch
, 
p
 - s¸©ch, 
≠p_key
) < 0)

1680 
	`_i_INDENT
(1);

1681 
p
 = 
s¸©ch
;

1683 *
p
++ = 
h2c
[(*
buf
 >> 4) & 0x0F];

1684 *
p
++ = 
h2c
[*
buf
 & 0x0F];

1685 *
p
++ = 0x20;

1688 if(
p
 > 
s¸©ch
) {

1689 
p
--;

1690 if(
	`cb
(
s¸©ch
, 
p
 - s¸©ch, 
≠p_key
) < 0)

1695 
	}
}

1698 
	$OCTET_STRING_¥öt_utf8
(
a¢_TYPE_des¸ùt‹_t
 *
td
, c⁄° *
•å
,

1699 
ûevñ
, 
a¢_≠p_c⁄sume_byãs_f
 *
cb
, *
≠p_key
) {

1700 c⁄° 
OCTET_STRING_t
 *
°
 = (c⁄° OCTET_STRING_à*)
•å
;

1702 ()
td
;

1703 ()
ûevñ
;

1705 if(
°
 && (°->
buf
 || !°->
size
)) {

1706  (
	`cb
(
°
->
buf
, st->
size
, 
≠p_key
) < 0) ? -1 : 0;

1708  (
	`cb
("<ab£¡>", 8, 
≠p_key
) < 0) ? -1 : 0;

1710 
	}
}

1713 
	$OCTET_STRING_‰ì
(
a¢_TYPE_des¸ùt‹_t
 *
td
, *
•å
, 
c⁄ã¡s_⁄ly
) {

1714 
OCTET_STRING_t
 *
°
 = (OCTET_STRING_à*)
•å
;

1715 
a¢_OCTET_STRING_•ecifics_t
 *
•ecs
 = 
td
->
•ecifics


1716 ? (
a¢_OCTET_STRING_•ecifics_t
 *)
td
->
•ecifics


1717 : &
a¢_DEF_OCTET_STRING_•ecs
;

1718 
a¢_°ru˘_˘x_t
 *
˘x
 = (asn_struct_ctx_t *)

1719 ((*)
°
 + 
•ecs
->
˘x_off£t
);

1720 
_°ack
 *
°ck
;

1722 if(!
td
 || !
°
)

1725 
	`ASN_DEBUG
("Fªeög %†a†OCTET STRING", 
td
->
«me
);

1727 if(
°
->
buf
) {

1728 
	`FREEMEM
(
°
->
buf
);

1729 
°
->
buf
 = 0;

1735 
°ck
 = (
_°ack
 *)
˘x
->
±r
;

1736 if(
°ck
) {

1737 
°ck
->
èû
) {

1738 
_°ack_ñ
 *
£l
 = 
°ck
->
èû
;

1739 
°ck
->
èû
 = 
£l
->
¥ev
;

1740 
	`FREEMEM
(
£l
);

1742 
	`FREEMEM
(
°ck
);

1745 if(!
c⁄ã¡s_⁄ly
) {

1746 
	`FREEMEM
(
°
);

1748 
	}
}

1754 
	$OCTET_STRING_‰omBuf
(
OCTET_STRING_t
 *
°
, c⁄° *
°r
, 
Àn
) {

1755 *
buf
;

1757 if(
°
 =0 || (
°r
 =0 && 
Àn
)) {

1758 
î∫o
 = 
EINVAL
;

1765 if(
°r
 =
NULL
) {

1766 
	`FREEMEM
(
°
->
buf
);

1767 
°
->
buf
 = 0;

1768 
°
->
size
 = 0;

1773 if(
Àn
 < 0)

1774 
Àn
 = 
	`°æí
(
°r
);

1777 
buf
 = 
	`MALLOC
(
Àn
 + 1);

1778 if(
buf
 =
NULL
)

1781 
	`mem˝y
(
buf
, 
°r
, 
Àn
);

1782 ((
uöt8_t
 *)
buf
)[
Àn
] = '\0';

1783 
	`FREEMEM
(
°
->
buf
);

1784 
°
->
buf
 = (
uöt8_t
 *)buf;

1785 
°
->
size
 = 
Àn
;

1788 
	}
}

1790 
OCTET_STRING_t
 *

1791 
	$OCTET_STRING_√w_‰omBuf
(
a¢_TYPE_des¸ùt‹_t
 *
td
, c⁄° *
°r
, 
Àn
) {

1792 
a¢_OCTET_STRING_•ecifics_t
 *
•ecs
 = 
td
->
•ecifics


1793 ? (
a¢_OCTET_STRING_•ecifics_t
 *)
td
->
•ecifics


1794 : &
a¢_DEF_OCTET_STRING_•ecs
;

1795 
OCTET_STRING_t
 *
°
;

1797 
°
 = (
OCTET_STRING_t
 *)
	`CALLOC
(1, 
•ecs
->
°ru˘_size
);

1798 if(
°
 && 
°r
 && 
	`OCTET_STRING_‰omBuf
(°, så, 
Àn
)) {

1799 
	`FREEMEM
(
°
);

1800 
°
 = 
NULL
;

1803  
°
;

1804 
	}
}

	@F:\ss_asn1\module.asn1-1\OCTET_STRING.h

5 #i‚def 
_OCTET_STRING_H_


6 
	#_OCTET_STRING_H_


	)

8 
	~<a¢_≠∂iˇti⁄.h
>

10 #ifde‡
__˝lu•lus


14 
	sOCTET_STRING
 {

15 
uöt8_t
 *
buf
;

16 
size
;

18 
a¢_°ru˘_˘x_t
 
_a¢_˘x
;

19 } 
	tOCTET_STRING_t
;

21 
a¢_TYPE_des¸ùt‹_t
 
a¢_DEF_OCTET_STRING
;

23 
a¢_°ru˘_‰ì_f
 
	gOCTET_STRING_‰ì
;

24 
a¢_°ru˘_¥öt_f
 
	gOCTET_STRING_¥öt
;

25 
a¢_°ru˘_¥öt_f
 
	gOCTET_STRING_¥öt_utf8
;

26 
bî_ty≥_decodî_f
 
	gOCTET_STRING_decode_bî
;

27 
dî_ty≥_ícodî_f
 
	gOCTET_STRING_ícode_dî
;

28 
xî_ty≥_decodî_f
 
	gOCTET_STRING_decode_xî_hex
;

29 
xî_ty≥_decodî_f
 
	gOCTET_STRING_decode_xî_bö¨y
;

30 
xî_ty≥_decodî_f
 
	gOCTET_STRING_decode_xî_utf8
;

31 
xî_ty≥_ícodî_f
 
	gOCTET_STRING_ícode_xî
;

32 
xî_ty≥_ícodî_f
 
	gOCTET_STRING_ícode_xî_utf8
;

33 
≥r_ty≥_decodî_f
 
	gOCTET_STRING_decode_u≥r
;

34 
≥r_ty≥_ícodî_f
 
	gOCTET_STRING_ícode_u≥r
;

49 
OCTET_STRING_‰omBuf
(
OCTET_STRING_t
 *
s
, c⁄° *
°r
, 
size
);

52 
	#OCTET_STRING_‰omSåög
(
s
, 
°r
Ë
	`OCTET_STRING_‰omBuf
(s, så, -1)

	)

59 
OCTET_STRING_t
 *
OCTET_STRING_√w_‰omBuf
(
a¢_TYPE_des¸ùt‹_t
 *
td
,

60 c⁄° *
°r
, 
size
);

66 
	sa¢_OCTET_STRING_•ecifics_s
 {

70 
	g°ru˘_size
;

71 
	g˘x_off£t
;

73 
	ea¢_OS_Subv¨ü¡
 {

74 
	gASN_OSUBV_ANY
,

75 
	gASN_OSUBV_BIT
,

76 
	gASN_OSUBV_STR
,

77 
	gASN_OSUBV_U16
,

78 
	gASN_OSUBV_U32


79 } 
	gsubv¨ü¡
;

80 } 
	ta¢_OCTET_STRING_•ecifics_t
;

82 #ifde‡
__˝lu•lus


	@F:\ss_asn1\module.asn1-1\asn_application.h

8 #i‚def 
_ASN_APPLICATION_H_


9 
	#_ASN_APPLICATION_H_


	)

11 
	~"a¢_sy°em.h
"

12 
	~"a¢_codecs.h
"

14 #ifde‡
__˝lu•lus


25 (
a¢_≠p_c⁄sume_byãs_f
)(c⁄° *
	tbuf„r
, 
	tsize_t
 
	tsize
,

26 *
	t≠∂iˇti⁄_•ecific_key
);

36 (
a¢_≠p_c⁄°øöt_Áûed_f
)(*
	t≠∂iˇti⁄_•ecific_key
,

37 
	ta¢_TYPE_des¸ùt‹_s
 *
	tty≥_des¸ùt‹_which_Áûed
,

38 c⁄° *
	t°ru˘uª_which_Áûed_±r
,

39 c⁄° *
	tîr‹_mesßge_f‹m©
, ...Ë
	tGCC_PRINTFLIKE
(4, 5);

41 #ifde‡
__˝lu•lus


45 
	~"c⁄°r_TYPE.h
"

	@F:\ss_asn1\module.asn1-1\asn_codecs.h

6 #i‚def 
_ASN_CODECS_H_


7 
	#_ASN_CODECS_H_


	)

9 #ifde‡
__˝lu•lus


13 
a¢_TYPE_des¸ùt‹_s
;

24 
	sa¢_codec_˘x_s
 {

36 
size_t
 
max_°ack_size
;

37 } 
	ta¢_codec_˘x_t
;

42 
	sa¢_íc_rvÆ_s
 {

48 
ssize_t
 
ícoded
;

55 
a¢_TYPE_des¸ùt‹_s
 *
Áûed_ty≥
;

58 *
°ru˘uª_±r
;

59 } 
	ta¢_íc_rvÆ_t
;

60 
	#_ASN_ENCODE_FAILED
 do { \

61 
a¢_íc_rvÆ_t
 
tmp_îr‹
; \

62 
tmp_îr‹
.
ícoded
 = -1; \

63 
tmp_îr‹
.
Áûed_ty≥
 = 
td
; \

64 
tmp_îr‹
.
°ru˘uª_±r
 = 
•å
; \

65 
	`ASN_DEBUG
("FaûedÅÿícodêñemíà%s", 
td
->
«me
); \

66  
tmp_îr‹
; \

67 } 0)

	)

68 
	#_ASN_ENCODED_OK
(
rvÆ
) do { \

69 
rvÆ
.
°ru˘uª_±r
 = 0; \

70 
rvÆ
.
Áûed_ty≥
 = 0; \

71  
rvÆ
; \

72 } 0)

	)

82 
	ea¢_dec_rvÆ_code_e
 {

83 
RC_OK
,

84 
RC_WMORE
,

85 
RC_FAIL


87 
	sa¢_dec_rvÆ_s
 {

88 
a¢_dec_rvÆ_code_e
 
code
;

89 
size_t
 
c⁄sumed
;

90 } 
	ta¢_dec_rvÆ_t
;

91 
	#_ASN_DECODE_FAILED
 do { \

92 
a¢_dec_rvÆ_t
 
tmp_îr‹
; \

93 
tmp_îr‹
.
code
 = 
RC_FAIL
; \

94 
tmp_îr‹
.
c⁄sumed
 = 0; \

95 
	`ASN_DEBUG
("FaûedÅÿdecodêñemíà%s", 
td
->
«me
); \

96  
tmp_îr‹
; \

97 } 0)

	)

98 
	#_ASN_DECODE_STARVED
 do { \

99 
a¢_dec_rvÆ_t
 
tmp_îr‹
; \

100 
tmp_îr‹
.
code
 = 
RC_WMORE
; \

101 
tmp_îr‹
.
c⁄sumed
 = 0; \

102  
tmp_îr‹
; \

103 } 0)

	)

105 #ifde‡
__˝lu•lus


	@F:\ss_asn1\module.asn1-1\asn_codecs_prim.c

5 
	~<a¢_öã∫Æ.h
>

6 
	~<a¢_codecs_¥im.h
>

7 
	~<î∫o.h
>

12 
a¢_dec_rvÆ_t


13 
	$bî_decode_¥imôive
(
a¢_codec_˘x_t
 *
›t_codec_˘x
,

14 
a¢_TYPE_des¸ùt‹_t
 *
td
,

15 **
•å
, c⁄° *
buf_±r
, 
size_t
 
size
, 
èg_mode
) {

16 
ASN__PRIMITIVE_TYPE_t
 *
°
 = (ASN__PRIMITIVE_TYPE_à*)*
•å
;

17 
a¢_dec_rvÆ_t
 
rvÆ
;

18 
bî_év_Àn_t
 
Àngth
;

23 if(
°
 =
NULL
) {

24 
°
 = (
ASN__PRIMITIVE_TYPE_t
 *)
	`CALLOC
(1, (*st));

25 if(
°
 =
NULL
Ë
_ASN_DECODE_FAILED
;

26 *
•å
 = (*)
°
;

29 
	`ASN_DEBUG
("Decoding %sásÖlainÖrimitive (tm=%d)",

30 
td
->
«me
, 
èg_mode
);

35 
rvÆ
 = 
	`bî_check_ègs
(
›t_codec_˘x
, 
td
, 0, 
buf_±r
, 
size
,

36 
èg_mode
, 0, &
Àngth
, 0);

37 if(
rvÆ
.
code
 !
RC_OK
)

38  
rvÆ
;

40 
	`ASN_DEBUG
("%†Àngth i†%d byãs", 
td
->
«me
, ()
Àngth
);

45 
buf_±r
 = ((c⁄° *)buf_±rË+ 
rvÆ
.
c⁄sumed
;

46 
size
 -
rvÆ
.
c⁄sumed
;

47 if(
Àngth
 > (
bî_év_Àn_t
)
size
) {

48 
rvÆ
.
code
 = 
RC_WMORE
;

49 
rvÆ
.
c⁄sumed
 = 0;

50  
rvÆ
;

53 
°
->
size
 = ()
Àngth
;

55 if((
°
->
size
Ë!(
Àngth
)

56 && (
bî_év_Àn_t
)
°
->
size
 !
Àngth
) {

57 
°
->
size
 = 0;

58 
_ASN_DECODE_FAILED
;

61 
°
->
buf
 = (
uöt8_t
 *)
	`MALLOC
(
Àngth
 + 1);

62 if(!
°
->
buf
) {

63 
°
->
size
 = 0;

64 
_ASN_DECODE_FAILED
;

67 
	`mem˝y
(
°
->
buf
, 
buf_±r
, 
Àngth
);

68 
°
->
buf
[
Àngth
] = '\0';

70 
rvÆ
.
code
 = 
RC_OK
;

71 
rvÆ
.
c⁄sumed
 +
Àngth
;

73 
	`ASN_DEBUG
("Took %ld/%ld bytesÅoÉncode %s",

74 ()
rvÆ
.
c⁄sumed
,

75 ()
Àngth
, 
td
->
«me
);

77  
rvÆ
;

78 
	}
}

83 
a¢_íc_rvÆ_t


84 
	$dî_ícode_¥imôive
(
a¢_TYPE_des¸ùt‹_t
 *
td
, *
•å
,

85 
èg_mode
, 
bî_év_èg_t
 
èg
,

86 
a¢_≠p_c⁄sume_byãs_f
 *
cb
, *
≠p_key
) {

87 
a¢_íc_rvÆ_t
 
îvÆ
;

88 
ASN__PRIMITIVE_TYPE_t
 *
°
 = (ASN__PRIMITIVE_TYPE_à*)
•å
;

90 
	`ASN_DEBUG
("%s %sásáÖrimitiveÅype (tm=%d)",

91 
cb
?"Encodög":"E°im©ög", 
td
->
«me
, 
èg_mode
);

93 
îvÆ
.
ícoded
 = 
	`dî_wrôe_ègs
(
td
, 
°
->
size
, 
èg_mode
, 0, 
èg
,

94 
cb
, 
≠p_key
);

95 
	`ASN_DEBUG
("%†wrŸêèg†%d", 
td
->
«me
, ()
îvÆ
.
ícoded
);

96 if(
îvÆ
.
ícoded
 == -1) {

97 
îvÆ
.
Áûed_ty≥
 = 
td
;

98 
îvÆ
.
°ru˘uª_±r
 = 
•å
;

99  
îvÆ
;

102 if(
cb
 && 
°
->
buf
) {

103 if(
	`cb
(
°
->
buf
, st->
size
, 
≠p_key
) < 0) {

104 
îvÆ
.
ícoded
 = -1;

105 
îvÆ
.
Áûed_ty≥
 = 
td
;

106 
îvÆ
.
°ru˘uª_±r
 = 
•å
;

107  
îvÆ
;

110 
	`as£π
(
°
->
buf
 || st->
size
 == 0);

113 
îvÆ
.
ícoded
 +
°
->
size
;

114 
	`_ASN_ENCODED_OK
(
îvÆ
);

115 
	}
}

118 
	$ASN__PRIMITIVE_TYPE_‰ì
(
a¢_TYPE_des¸ùt‹_t
 *
td
, *
•å
,

119 
c⁄ã¡s_⁄ly
) {

120 
ASN__PRIMITIVE_TYPE_t
 *
°
 = (ASN__PRIMITIVE_TYPE_à*)
•å
;

122 if(!
td
 || !
•å
)

125 
	`ASN_DEBUG
("Fªeög %†a†®¥imôivêty≥", 
td
->
«me
);

127 if(
°
->
buf
)

128 
	`FREEMEM
(
°
->
buf
);

130 if(!
c⁄ã¡s_⁄ly
)

131 
	`FREEMEM
(
°
);

132 
	}
}

138 
	sxdp_¨g_s
 {

139 
a¢_TYPE_des¸ùt‹_t
 *
	mty≥_des¸ùt‹
;

140 *
	m°ru˘_key
;

141 
xî_¥imôive_body_decodî_f
 *
	m¥im_body_decodî
;

142 
	mdecoded_somëhög
;

143 
	mw™t_m‹e
;

148 
	$xî_decode__u√x≥˘ed_èg
(*
key
, c⁄° *
chunk_buf
, 
size_t
 
chunk_size
) {

149 
xdp_¨g_s
 *
¨g
 = (xdp_¨g_†*)
key
;

150 
xî_pbd_rvÆ
 
bªt
;

152 if(
¨g
->
decoded_somëhög
) {

153 if(
	`xî_is_whôe•a˚
(
chunk_buf
, 
chunk_size
))

161 
bªt
 = 
¨g
->
	`¥im_body_decodî
◊rg->
ty≥_des¸ùt‹
,

162 
¨g
->
°ru˘_key
, 
chunk_buf
, 
chunk_size
);

163 
bªt
) {

164 
XPBD_SYSTEM_FAILURE
:

165 
XPBD_DECODER_LIMIT
:

166 
XPBD_BROKEN_ENCODING
:

168 
XPBD_BODY_CONSUMED
:

170 
¨g
->
decoded_somëhög
 = 1;

172 
XPBD_NOT_BODY_IGNORE
:

177 
	}
}

179 
ssize_t


180 
	$xî_decode__body
(*
key
, c⁄° *
chunk_buf
, 
size_t
 
chunk_size
, 
have_m‹e
) {

181 
xdp_¨g_s
 *
¨g
 = (xdp_¨g_†*)
key
;

182 
xî_pbd_rvÆ
 
bªt
;

184 if(
¨g
->
decoded_somëhög
) {

185 if(
	`xî_is_whôe•a˚
(
chunk_buf
, 
chunk_size
))

186  
chunk_size
;

193 if(!
have_m‹e
) {

202 
¨g
->
w™t_m‹e
 = 1;

206 
bªt
 = 
¨g
->
	`¥im_body_decodî
◊rg->
ty≥_des¸ùt‹
,

207 
¨g
->
°ru˘_key
, 
chunk_buf
, 
chunk_size
);

208 
bªt
) {

209 
XPBD_SYSTEM_FAILURE
:

210 
XPBD_DECODER_LIMIT
:

211 
XPBD_BROKEN_ENCODING
:

213 
XPBD_BODY_CONSUMED
:

215 
¨g
->
decoded_somëhög
 = 1;

217 
XPBD_NOT_BODY_IGNORE
:

218  
chunk_size
;

222 
	}
}

225 
a¢_dec_rvÆ_t


226 
	$xî_decode_¥imôive
(
a¢_codec_˘x_t
 *
›t_codec_˘x
,

227 
a¢_TYPE_des¸ùt‹_t
 *
td
,

228 **
•å
,

229 
size_t
 
°ru˘_size
,

230 c⁄° *
›t_m«me
,

231 c⁄° *
buf_±r
, 
size_t
 
size
,

232 
xî_¥imôive_body_decodî_f
 *
¥im_body_decodî


234 c⁄° *
xml_èg
 = 
›t_m«me
 ? o±_m«mê: 
td
->xml_tag;

235 
a¢_°ru˘_˘x_t
 
s_˘x
;

236 
xdp_¨g_s
 
s_¨g
;

237 
a¢_dec_rvÆ_t
 
rc
;

242 if(!*
•å
) {

243 *
•å
 = 
	`CALLOC
(1, 
°ru˘_size
);

244 if(!*
•å
Ë
_ASN_DECODE_FAILED
;

247 
	`mem£t
(&
s_˘x
, 0, (s_ctx));

248 
s_¨g
.
ty≥_des¸ùt‹
 = 
td
;

249 
s_¨g
.
°ru˘_key
 = *
•å
;

250 
s_¨g
.
¥im_body_decodî
 =Örim_body_decoder;

251 
s_¨g
.
decoded_somëhög
 = 0;

252 
s_¨g
.
w™t_m‹e
 = 0;

254 
rc
 = 
	`xî_decode_gíîÆ
(
›t_codec_˘x
, &
s_˘x
, &
s_¨g
,

255 
xml_èg
, 
buf_±r
, 
size
,

256 
xî_decode__u√x≥˘ed_èg
, 
xî_decode__body
);

257 
rc
.
code
) {

258 
RC_OK
:

259 if(!
s_¨g
.
decoded_somëhög
) {

260 
ch
;

261 
	`ASN_DEBUG
("Primitive body isÇotÑecognized, "

268 if(
	`¥im_body_decodî
(
s_¨g
.
ty≥_des¸ùt‹
,

269 
s_¨g
.
°ru˘_key
, &
ch
, 0)

270 !
XPBD_BODY_CONSUMED
) {

274 
_ASN_DECODE_FAILED
;

278 
RC_WMORE
:

283 
rc
.
c⁄sumed
 = 0;

285 
RC_FAIL
:

286 
rc
.
c⁄sumed
 = 0;

287 if(
s_¨g
.
w™t_m‹e
)

288 
rc
.
code
 = 
RC_WMORE
;

290 
_ASN_DECODE_FAILED
;

293  
rc
;

294 
	}
}

	@F:\ss_asn1\module.asn1-1\asn_codecs_prim.h

5 #i‚def 
ASN_CODECS_PRIM_H


6 
	#ASN_CODECS_PRIM_H


	)

8 
	~<a¢_≠∂iˇti⁄.h
>

10 #ifde‡
__˝lu•lus


14 
	sASN__PRIMITIVE_TYPE_s
 {

15 
uöt8_t
 *
buf
;

16 
size
;

17 } 
	tASN__PRIMITIVE_TYPE_t
;

19 
a¢_°ru˘_‰ì_f
 
ASN__PRIMITIVE_TYPE_‰ì
;

20 
bî_ty≥_decodî_f
 
bî_decode_¥imôive
;

21 
dî_ty≥_ícodî_f
 
dî_ícode_¥imôive
;

26 
	exî_pbd_rvÆ
 {

27 
XPBD_SYSTEM_FAILURE
,

28 
XPBD_DECODER_LIMIT
,

29 
XPBD_BROKEN_ENCODING
,

30 
XPBD_NOT_BODY_IGNORE
,

31 
XPBD_BODY_CONSUMED


33 
xî_pbd_rvÆ
 (
	txî_¥imôive_body_decodî_f
)

34 (
	ta¢_TYPE_des¸ùt‹_t
 *
	ttd
, *
	t°ru˘_±r
,

35 c⁄° *
	tchunk_buf
, 
	tsize_t
 
	tchunk_size
);

41 
a¢_dec_rvÆ_t
 
xî_decode_¥imôive
(
a¢_codec_˘x_t
 *
›t_codec_˘x
,

42 
a¢_TYPE_des¸ùt‹_t
 *
ty≥_des¸ùt‹
,

43 **
°ru˘_±r
, 
size_t
 
°ru˘_size
,

44 c⁄° *
›t_m«me
,

45 c⁄° *
buf_±r
, 
size_t
 
size
,

46 
xî_¥imôive_body_decodî_f
 *
¥im_body_decodî


49 #ifde‡
__˝lu•lus


	@F:\ss_asn1\module.asn1-1\asn_internal.h

9 #i‚def 
_ASN_INTERNAL_H_


10 
	#_ASN_INTERNAL_H_


	)

12 
	~"a¢_≠∂iˇti⁄.h
"

14 #i‚def 
__NO_ASSERT_H__


15 
	~<as£π.h
>

18 #ifdef 
__˝lu•lus


23 
	#ASN1C_ENVIRONMENT_VERSION
 922

	)

24 
gë_a¢1c_ívú⁄mít_vîsi⁄
();

26 
	#CALLOC
(
nmemb
, 
size
Ë
	`ˇŒoc
“memb, size)

	)

27 
	#MALLOC
(
size
Ë
	`mÆloc
(size)

	)

28 
	#REALLOC
(
ﬁd±r
, 
size
Ë
	`ªÆloc
(ﬁd±r, size)

	)

29 
	#FREEMEM
(
±r
Ë
	`‰ì
’å)

	)

35 #i‚def 
ASN_DEBUG


36 #if 
EMIT_ASN_DEBUG
 == 1

37 #ifdef 
__GNUC__


38 #ifdef 
ASN_THREAD_SAFE


39 
	#a¢_debug_ödít
 0

	)

41 
a¢_debug_ödít
;

43 
	#ASN_DEBUG
(
fmt
, 
¨gs
...) do { \

44 
adi
 = 
a¢_debug_ödít
; \

45 
adi
--Ë
	`Ârötf
(
°dîr
, " "); \

46 
	`Ârötf
(
°dîr
, 
fmt
, ##
¨gs
); \

47 
	`Ârötf
(
°dîr
, " (%s:%d)\n", \

48 
__FILE__
, 
__LINE__
); \

49 } 0)

	)

51 
ASN_DEBUG_f
(c⁄° *
fmt
, ...);

52 
	#ASN_DEBUG
 
ASN_DEBUG_f


	)

55 
ölöe
 
ASN_DEBUG
(c⁄° *
fmt
, ...) { ()fmt; }

62 
	#__ASN_E_cbc
(
buf
, 
size
Ë(
	`cb
((buf), (size), 
≠p_key
Ë< 0)

	)

63 
	#_ASN_E_CALLBACK
(
foo
) do { \

64 if(
foo
Ë
cb_Áûed
; \

65 } 0)

	)

66 
	#_ASN_CALLBACK
(
buf
, 
size
) \

67 
	`_ASN_E_CALLBACK
(
	`__ASN_E_cbc
(
buf
, 
size
))

	)

68 
	#_ASN_CALLBACK2
(
buf1
, 
size1
, 
buf2
, 
size2
) \

69 
	`_ASN_E_CALLBACK
(
	`__ASN_E_cbc
(
buf1
, 
size1
Ë|| __ASN_E_cbc(
buf2
, 
size2
))

	)

70 
	#_ASN_CALLBACK3
(
buf1
, 
size1
, 
buf2
, 
size2
, 
buf3
, 
size3
) \

71 
	`_ASN_E_CALLBACK
(
	`__ASN_E_cbc
(
buf1
, 
size1
) \

72 || 
	`__ASN_E_cbc
(
buf2
, 
size2
) \

73 || 
	`__ASN_E_cbc
(
buf3
, 
size3
))

	)

75 
	#_i_ASN_TEXT_INDENT
(
∆
, 
Àvñ
) do { \

76 
__Àvñ
 = (
Àvñ
); \

77 
__∆
 = ((
∆
) != 0); \

78 
__i
; \

79 if(
__∆
Ë
	`_ASN_CALLBACK
("\n", 1); \

80 if(
__Àvñ
 < 0) __level = 0; \

81 
__i
 = 0; __ò< 
__Àvñ
; __i++) \

82 
	`_ASN_CALLBACK
(" ", 4); \

83 
î
.
ícoded
 +
__∆
 + 4 * 
__Àvñ
; \

84 } 0)

	)

86 
	#_i_INDENT
(
∆
) do { \

87 
__i
; \

88 if((
∆
Ë&& 
	`cb
("\n", 1, 
≠p_key
) < 0)  -1; \

89 
__i
 = 0; __ò< 
ûevñ
; __i++) \

90 if(
	`cb
(" ", 4, 
≠p_key
) < 0)  -1; \

91 } 0)

	)

96 
	#_ASN_DEFAULT_STACK_MAX
 (30000)

	)

97 
ölöe
 

98 
_ASN_STACK_OVERFLOW_CHECK
(
a¢_codec_˘x_t
 *
˘x
) {

99 if(
˘x
 && ctx->
max_°ack_size
) {

102 
±rdiff_t
 
u£d°ack
 = ((*)
˘x
 - (*)&ctx);

103 if(
u£d°ack
 > 0) usedstack = -usedstack;

106 if(
u£d°ack
 < -(
±rdiff_t
)
˘x
->
max_°ack_size
) {

107 
ASN_DEBUG
("StackÜimit %ldÑeached",

108 ()
˘x
->
max_°ack_size
);

115 #ifdef 
__˝lu•lus


	@F:\ss_asn1\module.asn1-1\asn_system.h

9 #i‚def 
_ASN_SYSTEM_H_


10 
	#_ASN_SYSTEM_H_


	)

12 #ifdef 
HAVE_CONFIG_H


13 
	~"c⁄fig.h
"

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<°rög.h
>

19 
	~<sys/ty≥s.h
>

20 
	~<limôs.h
>

21 
	~<°d¨g.h
>

22 
	~<°ddef.h
>

24 #ifdef 
WIN32


26 
	~<mÆloc.h
>

27 
	#¢¥ötf
 
_¢¥ötf


	)

28 
	#v¢¥ötf
 
_v¢¥ötf


	)

31 
	#sys_¡ohl
(
l
) ((((l) << 24) & 0xff000000) \

32 | (((
l
) << 16) & 0xff0000) \

33 | (((
l
) << 8) & 0xff00) \

34 | ((
l
Ë& 0xff))

	)

36 #ifde‡
_MSC_VER


37 #i‚de‡
__˝lu•lus


38 
	#ölöe
 
__ölöe


	)

40 #i‚def 
ASSUMESTDTYPES


41 
	#ssize_t
 
SSIZE_T


	)

42 
	töt8_t
;

43 
	töt16_t
;

44 
	töt32_t
;

45 
	tuöt8_t
;

46 
	tuöt16_t
;

47 
	tuöt32_t
;

49 
	#WIN32_LEAN_AND_MEAN


	)

50 
	~<wödows.h
>

51 
	~<Êﬂt.h
>

52 
	#i¢™
 
_i¢™


	)

53 
	#föôe
 
_föôe


	)

54 
	#c›ysign
 
_c›ysign


	)

55 
	#ûogb
 
_logb


	)

57 
	~<°döt.h
>

62 #i‡
deföed
(
__vxw‹ks
)

63 
	~<ty≥s/vxTy≥s.h
>

66 
	~<öây≥s.h
>

73 #if (!
deföed
(
__FªeBSD__
Ë|| !deföed(
_SYS_INTTYPES_H_
))

74 #if 
deföed
(
sun
)

75 
	~<Æloˇ.h
>

76 
	~<õìÂ.h
>

77 #ñif 
deföed
(
__hpux
)

78 #ifdef 
__GNUC__


79 
	~<Æloˇ.h
>

81 
	#ölöe


	)

84 
	~<°döt.h
>

88 
	~<√töë/ö.h
>

89 
	#sys_¡ohl
(
foo
Ë
	`¡ohl
(foo)

	)

95 #if 
__GNUC__
 >= 3

96 #i‚def 
GCC_PRINTFLIKE


97 
	#GCC_PRINTFLIKE
(
fmt
,
v¨
Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
,fmt,v¨)))

	)

99 #i‚def 
GCC_NOTUSED


100 
	#GCC_NOTUSED
 
	`__©åibuã__
((
unu£d
))

	)

103 #i‚def 
GCC_PRINTFLIKE


104 
	#GCC_PRINTFLIKE
(
fmt
,
v¨
Ë

	)

106 #i‚def 
GCC_NOTUSED


107 
	#GCC_NOTUSED


	)

112 #i‡!
deföed
(
ASN_THREAD_SAFE
Ë&& (deföed(
THREAD_SAFE
Ë|| deföed(
_REENTRANT
))

113 
	#ASN_THREAD_SAFE


	)

116 #i‚def 
off£tof


117 
	#off£tof
(
s
, 
m
Ë((
±rdiff_t
)&(((†*)0)->mË- (±rdiff_t)((†*)0))

	)

120 #i‚def 
MIN


121 #i‡
deföed
(
__GNUC__
)

122 
	#MIN
(
a
,
b
Ë({ 
__ty≥of
á 
_a
 =á; __ty≥o‡b 
_b
 = b; \

123 ((
_a
)<(
_b
)?(_a):(_b)); })

	)

125 
	#MIN
(
a
,
b
Ë(◊)<(b)?◊):(b)Ë

	)

	@F:\ss_asn1\module.asn1-1\ber_decoder.c

5 
	~<a¢_öã∫Æ.h
>

7 #unde‡
ADVANCE


8 
	#ADVANCE
(
num_byãs
) do { \

9 
size_t
 
num
 = 
num_byãs
; \

10 
±r
 = ((c⁄° *ÌåË+ 
num
; \

11 
size
 -
num
; \

12 
c⁄sumed_my£lf
 +
num
; \

13 } 0)

	)

14 #unde‡
RETURN


15 
	#RETURN
(
_code
) do { \

16 
a¢_dec_rvÆ_t
 
rvÆ
; \

17 
rvÆ
.
code
 = 
_code
; \

18 if(
›t_˘x
Ë›t_˘x->
°ï
 = step; \

19 if(
_code
 =
RC_OK
 || 
›t_˘x
) \

20 
rvÆ
.
c⁄sumed
 = 
c⁄sumed_my£lf
; \

22 
rvÆ
.
c⁄sumed
 = 0; \

23  
rvÆ
; \

24 } 0)

	)

29 
a¢_dec_rvÆ_t


30 
	$bî_decode
(
a¢_codec_˘x_t
 *
›t_codec_˘x
,

31 
a¢_TYPE_des¸ùt‹_t
 *
ty≥_des¸ùt‹
,

32 **
°ru˘_±r
, c⁄° *
±r
, 
size_t
 
size
) {

33 
a¢_codec_˘x_t
 
s_codec_˘x
;

39 if(
›t_codec_˘x
) {

40 if(
›t_codec_˘x
->
max_°ack_size
) {

41 
s_codec_˘x
 = *
›t_codec_˘x
;

42 
›t_codec_˘x
 = &
s_codec_˘x
;

46 
	`mem£t
(&
s_codec_˘x
, 0, (s_codec_ctx));

47 
s_codec_˘x
.
max_°ack_size
 = 
_ASN_DEFAULT_STACK_MAX
;

48 
›t_codec_˘x
 = &
s_codec_˘x
;

54  
ty≥_des¸ùt‹
->
	`bî_decodî
(
›t_codec_˘x
,Åype_descriptor,

55 
°ru˘_±r
,

56 
±r
, 
size
,

59 
	}
}

64 
a¢_dec_rvÆ_t


65 
	$bî_check_ègs
(
a¢_codec_˘x_t
 *
›t_codec_˘x
,

66 
a¢_TYPE_des¸ùt‹_t
 *
td
, 
a¢_°ru˘_˘x_t
 *
›t_˘x
,

67 c⁄° *
±r
, 
size_t
 
size
, 
èg_mode
, 
œ°_èg_f‹m
,

68 
bî_év_Àn_t
 *
œ°_Àngth
, *
›t_év_f‹m
) {

69 
ssize_t
 
c⁄sumed_my£lf
 = 0;

70 
ssize_t
 
èg_Àn
;

71 
ssize_t
 
Àn_Àn
;

72 
bî_év_èg_t
 
év_èg
;

73 
bî_év_Àn_t
 
év_Àn
;

74 
bî_év_Àn_t
 
limô_Àn
 = -1;

75 
ex≥˘_00_ãrmö©‹s
 = 0;

76 
év_c⁄°r
 = -1;

77 
°ï
 = 
›t_˘x
 ? opt_ctx->step : 0;

78 
ègno
;

83 if(
	`_ASN_STACK_OVERFLOW_CHECK
(
›t_codec_˘x
))

84 
	`RETURN
(
RC_FAIL
);

108 
ègno
 = 
°ï


109 + (
èg_mode
==1?-1:0)

111 
	`ASN_DEBUG
("ber_check_tags(%s, size=%ld,Åm=%d, step=%d,Åagno=%d)",

112 
td
->
«me
, ()
size
, 
èg_mode
, 
°ï
, 
ègno
);

115 if(
èg_mode
 =0 && 
ègno
 =
td
->
ègs_cou¡
) {

121 
èg_Àn
 = 
	`bî_„tch_èg
(
±r
, 
size
, &
év_èg
);

122 
èg_Àn
) {

123 -1: 
	`RETURN
(
RC_FAIL
);

124 0: 
	`RETURN
(
RC_WMORE
);

126 
év_c⁄°r
 = 
	`BER_TLV_CONSTRUCTED
(
±r
);

127 
Àn_Àn
 = 
	`bî_„tch_Àngth
(
év_c⁄°r
,

128 (c⁄° *)
±r
 + 
èg_Àn
, 
size
 -Åag_Àn, &
év_Àn
);

129 
Àn_Àn
) {

130 -1: 
	`RETURN
(
RC_FAIL
);

131 0: 
	`RETURN
(
RC_WMORE
);

133 
	`ASN_DEBUG
("Advancing %ld in ANY case",

134 ()(
èg_Àn
 + 
Àn_Àn
));

135 
	`ADVANCE
(
èg_Àn
 + 
Àn_Àn
);

137 
	`as£π
(
ègno
 < 
td
->
ègs_cou¡
);

139 ()
ègno
;Åagnÿ< 
td
->
ègs_cou¡
;Åagno++, 
°ï
++) {

144 
èg_Àn
 = 
	`bî_„tch_èg
(
±r
, 
size
, &
év_èg
);

145 
	`ASN_DEBUG
("FetchingÅag from {%p,%ld}: "

147 
±r
, ()
size
,

148 ()
èg_Àn
, 
°ï
, 
ègno
,

149 
	`bî_év_èg_°rög
(
év_èg
));

150 
èg_Àn
) {

151 -1: 
	`RETURN
(
RC_FAIL
);

152 0: 
	`RETURN
(
RC_WMORE
);

155 
év_c⁄°r
 = 
	`BER_TLV_CONSTRUCTED
(
±r
);

161 if(
èg_mode
 !0 && 
°ï
 == 0) {

168 
	`as£π
(
ègno
 >= 0);

169 if(
év_èg
 !
td
->
ègs
[
ègno
]) {

173 
	`ASN_DEBUG
("Expected: %s, "

175 
	`bî_év_èg_°rög
(
td
->
ègs
[
ègno
]),

176 
ègno
, 
èg_mode


178 
	`RETURN
(
RC_FAIL
);

189 if(
ègno
 < (
td
->
ègs_cou¡
 - 1)) {

190 if(
év_c⁄°r
 == 0) {

191 
	`ASN_DEBUG
("tlv_constr = %d,Éxpfail",

192 
év_c⁄°r
);

193 
	`RETURN
(
RC_FAIL
);

196 if(
œ°_èg_f‹m
 !
év_c⁄°r


197 && 
œ°_èg_f‹m
 != -1) {

198 
	`ASN_DEBUG
("last_tag_form %d != %d",

199 
œ°_èg_f‹m
, 
év_c⁄°r
);

200 
	`RETURN
(
RC_FAIL
);

207 
Àn_Àn
 = 
	`bî_„tch_Àngth
(
év_c⁄°r
,

208 (c⁄° *)
±r
 + 
èg_Àn
, 
size
 -Åag_Àn, &
év_Àn
);

209 
	`ASN_DEBUG
("FëchöigÜí = %ld", ()
Àn_Àn
);

210 
Àn_Àn
) {

211 -1: 
	`RETURN
(
RC_FAIL
);

212 0: 
	`RETURN
(
RC_WMORE
);

222 if(
év_Àn
 == -1) {

226 if(
limô_Àn
 == -1) {

227 
ex≥˘_00_ãrmö©‹s
++;

229 
	`ASN_DEBUG
("Unexpected indefiniteÜength "

231 
	`RETURN
(
RC_FAIL
);

233 
	`ADVANCE
(
èg_Àn
 + 
Àn_Àn
);

236 if(
ex≥˘_00_ãrmö©‹s
) {

237 
	`ASN_DEBUG
("Unexpected definiteÜength "

239 
	`RETURN
(
RC_FAIL
);

247 if(
limô_Àn
 == -1) {

248 
limô_Àn
 = 
év_Àn
 + 
èg_Àn
 + 
Àn_Àn
;

249 if(
limô_Àn
 < 0) {

251 
	`RETURN
(
RC_FAIL
);

253 } if(
limô_Àn
 !
év_Àn
 + 
èg_Àn
 + 
Àn_Àn
) {

258 
	`ASN_DEBUG
("Outer TLV is %ldánd inner is %ld",

259 ()
limô_Àn
, ()
év_Àn
);

260 
	`RETURN
(
RC_FAIL
);

263 
	`ADVANCE
(
èg_Àn
 + 
Àn_Àn
);

265 
limô_Àn
 -(
èg_Àn
 + 
Àn_Àn
);

266 if((
ssize_t
)
size
 > 
limô_Àn
) {

271 
size
 = 
limô_Àn
;

275 if(
›t_év_f‹m
)

276 *
›t_év_f‹m
 = 
év_c⁄°r
;

277 if(
ex≥˘_00_ãrmö©‹s
)

278 *
œ°_Àngth
 = -
ex≥˘_00_ãrmö©‹s
;

280 *
œ°_Àngth
 = 
év_Àn
;

282 
	`RETURN
(
RC_OK
);

283 
	}
}

	@F:\ss_asn1\module.asn1-1\ber_decoder.h

5 #i‚def 
_BER_DECODER_H_


6 
	#_BER_DECODER_H_


	)

8 
	~<a¢_≠∂iˇti⁄.h
>

10 #ifde‡
__˝lu•lus


14 
a¢_TYPE_des¸ùt‹_s
;

15 
a¢_codec_˘x_s
;

22 
a¢_dec_rvÆ_t
 
bî_decode
(
a¢_codec_˘x_s
 *
›t_codec_˘x
,

23 
a¢_TYPE_des¸ùt‹_s
 *
ty≥_des¸ùt‹
,

24 **
°ru˘_±r
,

25 c⁄° *
buf„r
,

26 
size_t
 
size


32 
a¢_dec_rvÆ_t
 (
	tbî_ty≥_decodî_f
)(

33 
	ta¢_codec_˘x_s
 *
	t›t_codec_˘x
,

34 
	ta¢_TYPE_des¸ùt‹_s
 *
	tty≥_des¸ùt‹
,

35 **
	t°ru˘_±r
, c⁄° *
	tbuf_±r
, 
	tsize_t
 
	tsize
,

36 
	tèg_mode
);

49 
a¢_dec_rvÆ_t
 
bî_check_ègs
(

50 
a¢_codec_˘x_s
 *
›t_codec_˘x
,

51 
a¢_TYPE_des¸ùt‹_s
 *
ty≥_des¸ùt‹
,

52 
a¢_°ru˘_˘x_t
 *
›t_˘x
,

53 c⁄° *
±r
, 
size_t
 
size
,

54 
èg_mode
,

55 
œ°_èg_f‹m
,

56 
bî_év_Àn_t
 *
œ°_Àngth
,

57 *
›t_év_f‹m


60 #ifde‡
__˝lu•lus


	@F:\ss_asn1\module.asn1-1\ber_tlv_length.c

5 
	~<a¢_öã∫Æ.h
>

6 
	~<bî_év_Àngth.h
>

7 
	~<bî_év_èg.h
>

9 
ssize_t


10 
	$bî_„tch_Àngth
(
_is_c⁄°ru˘ed
, c⁄° *
buÂå
, 
size_t
 
size
,

11 
bî_év_Àn_t
 *
Àn_r
) {

12 c⁄° 
uöt8_t
 *
buf
 = (c⁄° uöt8_à*)
buÂå
;

13 
o˘
;

15 if(
size
 == 0)

18 
o˘
 = *(c⁄° 
uöt8_t
 *)
buf
;

19 if((
o˘
 & 0x80) == 0) {

23 *
Àn_r
 = 
o˘
;

26 
bî_év_Àn_t
 
Àn
;

27 
size_t
 
skù≥d
;

29 if(
_is_c⁄°ru˘ed
 && 
o˘
 == 0x80) {

30 *
Àn_r
 = -1;

34 if(
o˘
 == 0xff) {

39 
o˘
 &= 0x7F;

40 
Àn
 = 0, 
buf
++, 
skù≥d
 = 1;

41 
o˘
 && (++
skù≥d
 <
size
); 
buf
++, oct--) {

43 
Àn
 = (À¿<< 8Ë| *
buf
;

44 if(
Àn
 < 0

45 || (
Àn
 >> ((8 * ÷í)Ë- 8Ë&& 
o˘
 > 1)) {

53 if(
o˘
 == 0) {

54 
bî_év_Àn_t
 
À≈lu£psû⁄
 = (
size_t
)
Àn
 + 1024;

63 if(
À≈lu£psû⁄
 < 0) {

68 *
Àn_r
 = 
Àn
;

69  
skù≥d
;

75 
	}
}

77 
ssize_t


78 
	$bî_skù_Àngth
(
a¢_codec_˘x_t
 *
›t_codec_˘x
,

79 
_is_c⁄°ru˘ed
, c⁄° *
±r
, 
size_t
 
size
) {

80 
bî_év_Àn_t
 
vÀn
;

81 
ssize_t
 
é
;

82 
ssize_t
 
Œ
;

83 
size_t
 
skù
;

88 if(
	`_ASN_STACK_OVERFLOW_CHECK
(
›t_codec_˘x
))

94 
Œ
 = 
	`bî_„tch_Àngth
(
_is_c⁄°ru˘ed
, 
±r
, 
size
, &
vÀn
);

95 if(
Œ
 <= 0) Ül;

100 if(
vÀn
 >= 0) {

101 
skù
 = 
Œ
 + 
vÀn
;

102 if(
skù
 > 
size
)

104  
skù
;

110 
	`ASN_DEBUG
("Skipping indefiniteÜength");

111 
skù
 = 
Œ
, 
±r
 = ((c⁄° *ÌåË+Ül, 
size
 -=Ül;;) {

112 
bî_év_èg_t
 
èg
;

115 
é
 = 
	`bî_„tch_èg
(
±r
, 
size
, &
èg
);

116 if(
é
 <= 0) Ål;

118 
Œ
 = 
	`bî_skù_Àngth
(
›t_codec_˘x
,

119 
	`BER_TLV_CONSTRUCTED
(
±r
),

120 ((c⁄° *)
±r
Ë+ 
é
, 
size
 -Ål);

121 if(
Œ
 <= 0) Ül;

123 
skù
 +
é
 + 
Œ
;

130 if(((c⁄° 
uöt8_t
 *)
±r
)[0] == 0

131 && ((c⁄° 
uöt8_t
 *)
±r
)[1] == 0)

132  
skù
;

134 
±r
 = ((c⁄° *ÌåË+ 
é
 + 
Œ
;

135 
size
 -
é
 + 
Œ
;

139 
	}
}

141 
size_t


142 
	$dî_év_Àngth_£rülize
(
bî_év_Àn_t
 
Àn
, *
buÂ
, 
size_t
 
size
) {

143 
size_t
 
ªquúed_size
;

144 
uöt8_t
 *
buf
 = (uöt8_à*)
buÂ
;

145 
uöt8_t
 *
íd
;

146 
size_t
 
i
;

148 if(
Àn
 <= 127) {

150 if(
size
Ë*
buf
 = (
uöt8_t
)
Àn
;

157 
ªquúed_size
 = 1, 
i
 = 8; i < 8 * (
Àn
); i += 8) {

158 if(
Àn
 >> 
i
)

159 
ªquúed_size
++;

164 if(
size
 <
ªquúed_size
)

165  
ªquúed_size
 + 1;

167 *
buf
++ = (
uöt8_t
)(0x80 | 
ªquúed_size
);

172 
íd
 = 
buf
 + 
ªquúed_size
;

173 
i
 -8; 
buf
 < 
íd
; i -= 8, buf++)

174 *
buf
 = (
uöt8_t
)(
Àn
 >> 
i
);

176  
ªquúed_size
 + 1;

177 
	}
}

	@F:\ss_asn1\module.asn1-1\ber_tlv_length.h

5 #i‚def 
_BER_TLV_LENGTH_H_


6 
	#_BER_TLV_LENGTH_H_


	)

8 #ifde‡
__˝lu•lus


12 
ssize_t
 
	tbî_év_Àn_t
;

24 
ssize_t
 
bî_„tch_Àngth
(
_is_c⁄°ru˘ed
, c⁄° *
buÂå
, 
size_t
 
size
,

25 
bî_év_Àn_t
 *
Àn_r
);

34 
ssize_t
 
bî_skù_Àngth
(

35 
a¢_codec_˘x_s
 *
›t_codec_˘x
,

36 
_is_c⁄°ru˘ed
, c⁄° *
buÂå
, 
size_t
 
size
);

44 
size_t
 
dî_év_Àngth_£rülize
(
bî_év_Àn_t
 
Àn
, *
buÂå
, size_à
size
);

46 #ifde‡
__˝lu•lus


	@F:\ss_asn1\module.asn1-1\ber_tlv_tag.c

5 
	~<a¢_öã∫Æ.h
>

6 
	~<bî_év_èg.h
>

7 
	~<î∫o.h
>

9 
ssize_t


10 
	$bî_„tch_èg
(c⁄° *
±r
, 
size_t
 
size
, 
bî_év_èg_t
 *
èg_r
) {

11 
bî_év_èg_t
 
vÆ
;

12 
bî_év_èg_t
 
t˛ass
;

13 
size_t
 
skù≥d
;

15 if(
size
 == 0)

18 
vÆ
 = *(c⁄° 
uöt8_t
 *)
±r
;

19 
t˛ass
 = (
vÆ
 >> 6);

20 if((
vÆ
 &= 0x1F) != 0x1F) {

25 *
èg_r
 = (
vÆ
 << 2Ë| 
t˛ass
;

33 
vÆ
 = 0, 
±r
 = ((c⁄° *ÌåË+ 1, 
skù≥d
 = 2;

34 
skù≥d
 <
size
;

35 
±r
 = ((c⁄° *ÌåË+ 1, 
skù≥d
++) {

36 
o˘
 = *(c⁄° 
uöt8_t
 *)
±r
;

37 if(
o˘
 & 0x80) {

38 
vÆ
 = (vÆ << 7Ë| (
o˘
 & 0x7F);

43 if(
vÆ
 >> ((8 * (val)) - 9)) {

51 
vÆ
 = (vÆ << 7Ë| 
o˘
;

52 *
èg_r
 = (
vÆ
 << 2Ë| 
t˛ass
;

53  
skù≥d
;

58 
	}
}

61 
ssize_t


62 
	$bî_év_èg_fwrôe
(
bî_év_èg_t
 
èg
, 
FILE
 *
f
) {

63 
buf
[("[APPLICATION ]") + 32];

64 
ssize_t
 
ªt
;

66 
ªt
 = 
	`bî_év_èg_¢¥öt
(
èg
, 
buf
, (buf));

67 if(
ªt
 >(
ssize_t
)(
buf
) ||Ñet < 2) {

68 
î∫o
 = 
EPERM
;

72  
	`fwrôe
(
buf
, 1, 
ªt
, 
f
);

73 
	}
}

75 
ssize_t


76 
	$bî_év_èg_¢¥öt
(
bî_év_èg_t
 
èg
, *
buf
, 
size_t
 
size
) {

77 *
ty≥
 = 0;

78 
ªt
;

80 
èg
 & 0x3) {

81 
ASN_TAG_CLASS_UNIVERSAL
: 
ty≥
 = "UNIVERSAL "; ;

82 
ASN_TAG_CLASS_APPLICATION
: 
ty≥
 = "APPLICATION "; ;

83 
ASN_TAG_CLASS_CONTEXT
: 
ty≥
 = ""; ;

84 
ASN_TAG_CLASS_PRIVATE
: 
ty≥
 = "PRIVATE "; ;

87 
ªt
 = 
	`¢¥ötf
(
buf
, 
size
, "[%s%u]", 
ty≥
, (()
èg
) >> 2);

88 if(
ªt
 <0 && 
size
Ë
buf
[0] = '\0';

90  
ªt
;

91 
	}
}

94 
	$bî_év_èg_°rög
(
bî_év_èg_t
 
èg
) {

95 
buf
[("[APPLICATION ]") + 32];

97 ()
	`bî_év_èg_¢¥öt
(
èg
, 
buf
, (buf));

99  
buf
;

100 
	}
}

103 
size_t


104 
	$bî_év_èg_£rülize
(
bî_év_èg_t
 
èg
, *
buÂ
, 
size_t
 
size
) {

105 
t˛ass
 = 
	`BER_TAG_CLASS
(
èg
);

106 
bî_év_èg_t
 
tvÆ
 = 
	`BER_TAG_VALUE
(
èg
);

107 
uöt8_t
 *
buf
 = (uöt8_à*)
buÂ
;

108 
uöt8_t
 *
íd
;

109 
size_t
 
ªquúed_size
;

110 
size_t
 
i
;

112 if(
tvÆ
 <= 30) {

114 if(
size
Ë
buf
[0] = (
t˛ass
 << 6Ë| 
tvÆ
;

116 } if(
size
) {

117 *
buf
++ = (
t˛ass
 << 6) | 0x1F;

118 
size
--;

124 
ªquúed_size
 = 1, 
i
 = 7; i < 8 * (
tvÆ
); i += 7) {

125 if(
tvÆ
 >> 
i
)

126 
ªquúed_size
++;

131 if(
size
 < 
ªquúed_size
)

132  
ªquúed_size
 + 1;

137 
íd
 = 
buf
 + 
ªquúed_size
 - 1;

138 
i
 -7; 
buf
 < 
íd
; i -= 7, buf++)

139 *
buf
 = 0x80 | ((
tvÆ
 >> 
i
) & 0x7F);

140 *
buf
 = (
tvÆ
 & 0x7F);

142  
ªquúed_size
 + 1;

143 
	}
}

	@F:\ss_asn1\module.asn1-1\ber_tlv_tag.h

5 #i‚def 
_BER_TLV_TAG_H_


6 
	#_BER_TLV_TAG_H_


	)

8 #ifde‡
__˝lu•lus


12 
	ea¢_èg_˛ass
 {

13 
ASN_TAG_CLASS_UNIVERSAL
 = 0,

14 
ASN_TAG_CLASS_APPLICATION
 = 1,

15 
ASN_TAG_CLASS_CONTEXT
 = 2,

16 
ASN_TAG_CLASS_PRIVATE
 = 3

18 
	tbî_év_èg_t
;

23 
	#BER_TAG_CLASS
(
èg
Ë(—agË& 0x3)

	)

24 
	#BER_TAG_VALUE
(
èg
Ë(—agË>> 2)

	)

25 
	#BER_TLV_CONSTRUCTED
(
èg±r
Ë(((*(c⁄° 
uöt8_t
 *Èag±r)&0x20)?1:0)

	)

27 
	#BER_TAGS_EQUAL
(
èg1
, 
èg2
Ë(—ag1Ë=—ag2))

	)

34 
ssize_t
 
bî_év_èg_¢¥öt
(
bî_év_èg_t
 
èg
, *
buf
, 
size_t
 
buÊí
);

35 
ssize_t
 
bî_év_èg_fwrôe
(
bî_év_èg_t
 
èg
, 
FILE
 *);

36 *
bî_év_èg_°rög
(
bî_év_èg_t
 
èg
);

46 
ssize_t
 
bî_„tch_èg
(c⁄° *
buÂå
, 
size_t
 
size
, 
bî_év_èg_t
 *
èg_r
);

54 
size_t
 
bî_év_èg_£rülize
(
bî_év_èg_t
 
èg
, *
buÂå
, size_à
size
);

56 #ifde‡
__˝lu•lus


	@F:\ss_asn1\module.asn1-1\constr_TYPE.c

5 
	~<a¢_öã∫Æ.h
>

6 
	~<c⁄°r_TYPE.h
>

7 
	~<î∫o.h
>

12 
	$gë_a¢1c_ívú⁄mít_vîsi⁄
(Ë{  
ASN1C_ENVIRONMENT_VERSION
; 
	}
}

14 
a¢_≠p_c⁄sume_byãs_f
 
	g_¥öt2Â
;

19 
bî_év_èg_t


20 
	$a¢_TYPE_outmo°_èg
(
a¢_TYPE_des¸ùt‹_t
 *
ty≥_des¸ùt‹
,

21 c⁄° *
°ru˘_±r
, 
èg_mode
, 
bî_év_èg_t
 
èg
) {

23 if(
èg_mode
)

24  
èg
;

26 if(
ty≥_des¸ùt‹
->
ègs_cou¡
)

27  
ty≥_des¸ùt‹
->
ègs
[0];

29  
ty≥_des¸ùt‹
->
	`outmo°_èg
—y≥_des¸ùt‹, 
°ru˘_±r
, 0, 0);

30 
	}
}

36 
	$a¢_Âröt
(
FILE
 *
°ªam
, 
a¢_TYPE_des¸ùt‹_t
 *
td
, c⁄° *
°ru˘_±r
) {

37 if(!
°ªam
Ë°ªam = 
°dout
;

38 if(!
td
 || !
°ru˘_±r
) {

39 
î∫o
 = 
EINVAL
;

44 if(
td
->
	`¥öt_°ru˘
—d, 
°ru˘_±r
, 1, 
_¥öt2Â
, 
°ªam
))

48 if(
	`_¥öt2Â
("\n", 1, 
°ªam
))

51  
	`fÊush
(
°ªam
);

52 
	}
}

56 
	$_¥öt2Â
(c⁄° *
buf„r
, 
size_t
 
size
, *
≠p_key
) {

57 
FILE
 *
°ªam
 = (FILE *)
≠p_key
;

59 if(
	`fwrôe
(
buf„r
, 1, 
size
, 
°ªam
) != size)

63 
	}
}

70 
ASN_DEBUG_f
(c⁄° *
fmt
, ...);

71 
	$ASN_DEBUG_f
(c⁄° *
fmt
, ...) {

72 
va_li°
 
≠
;

73 
	`va_°¨t
(
≠
, 
fmt
);

74 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

75 
	`Ârötf
(
°dîr
, "\n");

76 
	`va_íd
(
≠
);

77 
	}
}

	@F:\ss_asn1\module.asn1-1\constr_TYPE.h

12 #i‚def 
_CONSTR_TYPE_H_


13 
	#_CONSTR_TYPE_H_


	)

15 
	~<bî_év_Àngth.h
>

16 
	~<bî_év_èg.h
>

18 #ifde‡
__˝lu•lus


22 
a¢_TYPE_des¸ùt‹_s
;

23 
a¢_TYPE_membî_s
;

30 
	sa¢_°ru˘_˘x_s
 {

31 
pha£
;

32 
°ï
;

33 
c⁄ãxt
;

34 *
±r
;

35 
bî_év_Àn_t
 
À·
;

36 } 
	ta¢_°ru˘_˘x_t
;

38 
	~<bî_decodî.h
>

39 
	~<dî_ícodî.h
>

40 
	~<xî_decodî.h
>

41 
	~<xî_ícodî.h
>

42 
	~<≥r_decodî.h
>

43 
	~<≥r_ícodî.h
>

44 
	~<c⁄°øöts.h
>

53 (
a¢_°ru˘_‰ì_f
)(

54 
	ta¢_TYPE_des¸ùt‹_s
 *
	tty≥_des¸ùt‹
,

55 *
	t°ru˘_±r
, 
	t‰ì_c⁄ã¡s_⁄ly
);

56 
	#ASN_STRUCT_FREE
(
a¢_DEF
, 
±r
Ë◊¢_DEF).
	`‰ì_°ru˘
(&◊¢_DEF),±r,0)

	)

57 
	#ASN_STRUCT_FREE_CONTENTS_ONLY
(
a¢_DEF
, 
±r
) \

58 (
a¢_DEF
).
	`‰ì_°ru˘
(&◊¢_DEF),
±r
,1)

	)

63 (
a¢_°ru˘_¥öt_f
)(

64 
	ta¢_TYPE_des¸ùt‹_s
 *
	tty≥_des¸ùt‹
,

65 c⁄° *
	t°ru˘_±r
,

66 
	tÀvñ
,

67 
	ta¢_≠p_c⁄sume_byãs_f
 *
	tˇŒback
, *
	t≠p_key
);

75 
bî_év_èg_t
 (
	ta¢_outmo°_èg_f
)(

76 
	ta¢_TYPE_des¸ùt‹_s
 *
	tty≥_des¸ùt‹
,

77 c⁄° *
	t°ru˘_±r
, 
	tèg_mode
, 
	tbî_év_èg_t
 
	tèg
);

79 
a¢_outmo°_èg_f
 
a¢_TYPE_outmo°_èg
;

85 
	sa¢_TYPE_des¸ùt‹_s
 {

86 *
«me
;

87 *
xml_èg
;

93 
a¢_°ru˘_‰ì_f
 *
‰ì_°ru˘
;

94 
a¢_°ru˘_¥öt_f
 *
¥öt_°ru˘
;

95 
a¢_c⁄°r_check_f
 *
check_c⁄°øöts
;

96 
bî_ty≥_decodî_f
 *
bî_decodî
;

97 
dî_ty≥_ícodî_f
 *
dî_ícodî
;

98 
xî_ty≥_decodî_f
 *
xî_decodî
;

99 
xî_ty≥_ícodî_f
 *
xî_ícodî
;

100 
≥r_ty≥_decodî_f
 *
u≥r_decodî
;

101 
≥r_ty≥_ícodî_f
 *
u≥r_ícodî
;

110 
a¢_outmo°_èg_f
 *
outmo°_èg
;

111 
bî_év_èg_t
 *
ègs
;

112 
ègs_cou¡
;

113 
bî_év_èg_t
 *
Æl_ègs
;

114 
Æl_ègs_cou¡
;

116 
a¢_≥r_c⁄°øöts_t
 *
≥r_c⁄°øöts
;

121 
a¢_TYPE_membî_s
 *
ñemíts
;

122 
ñemíts_cou¡
;

128 *
•ecifics
;

129 } 
	ta¢_TYPE_des¸ùt‹_t
;

135 
	ea¢_TYPE_Êags_e
 {

136 
ATF_NOFLAGS
,

137 
ATF_POINTER
 = 0x01,

138 
ATF_OPEN_TYPE
 = 0x02

140 
	sa¢_TYPE_membî_s
 {

141 
a¢_TYPE_Êags_e
 
Êags
;

142 
›ti⁄Æ
;

143 
memb_off£t
;

144 
bî_év_èg_t
 
èg
;

145 
èg_mode
;

146 
a¢_TYPE_des¸ùt‹_t
 *
ty≥
;

147 
a¢_c⁄°r_check_f
 *
memb_c⁄°øöts
;

148 
a¢_≥r_c⁄°øöts_t
 *
≥r_c⁄°øöts
;

149 (*
deÁu…_vÆue
)(
£tvÆ
, **
•å
);

150 *
«me
;

151 } 
	ta¢_TYPE_membî_t
;

156 
	sa¢_TYPE_èg2membî_s
 {

157 
bî_év_èg_t
 
ñ_èg
;

158 
ñ_no
;

159 
toff_fú°
;

160 
toff_œ°
;

161 } 
	ta¢_TYPE_èg2membî_t
;

172 
a¢_Âröt
(
FILE
 *
°ªam
,

173 
a¢_TYPE_des¸ùt‹_t
 *
td
,

174 c⁄° *
°ru˘_±r
);

176 #ifde‡
__˝lu•lus


	@F:\ss_asn1\module.asn1-1\constraints.c

1 
	~"a¢_öã∫Æ.h
"

2 
	~"c⁄°øöts.h
"

5 
	$a¢_gíîic_no_c⁄°øöt
(
a¢_TYPE_des¸ùt‹_t
 *
ty≥_des¸ùt‹
,

6 c⁄° *
°ru˘_±r
, 
a¢_≠p_c⁄°øöt_Áûed_f
 *
cb
, *
key
) {

8 ()
ty≥_des¸ùt‹
;

9 ()
°ru˘_±r
;

10 ()
cb
;

11 ()
key
;

15 
	}
}

18 
	$a¢_gíîic_unknown_c⁄°øöt
(
a¢_TYPE_des¸ùt‹_t
 *
ty≥_des¸ùt‹
,

19 c⁄° *
°ru˘_±r
, 
a¢_≠p_c⁄°øöt_Áûed_f
 *
cb
, *
key
) {

21 ()
ty≥_des¸ùt‹
;

22 ()
°ru˘_±r
;

23 ()
cb
;

24 ()
key
;

28 
	}
}

30 
	sîrbufDesc
 {

31 
a¢_TYPE_des¸ùt‹_t
 *
	mÁûed_ty≥
;

32 c⁄° *
	mÁûed_°ru˘_±r
;

33 *
	mîrbuf
;

34 
size_t
 
	mîæí
;

38 
	$_a¢_i_˘Áûcb
(*
key
, 
a¢_TYPE_des¸ùt‹_t
 *
td
, c⁄° *
•å
, c⁄° *
fmt
, ...) {

39 
îrbufDesc
 *
¨g
 = 
key
;

40 
va_li°
 
≠
;

41 
ssize_t
 
vÀn
;

42 
ssize_t
 
maxÀn
;

44 
¨g
->
Áûed_ty≥
 = 
td
;

45 
¨g
->
Áûed_°ru˘_±r
 = 
•å
;

47 
maxÀn
 = 
¨g
->
îæí
;

48 if(
maxÀn
 <= 0)

51 
	`va_°¨t
(
≠
, 
fmt
);

52 
vÀn
 = 
	`v¢¥ötf
(
¨g
->
îrbuf
, 
maxÀn
, 
fmt
, 
≠
);

53 
	`va_íd
(
≠
);

54 if(
vÀn
 >
maxÀn
) {

55 
¨g
->
îrbuf
[
maxÀn
-1] = '\0';

56 
¨g
->
îæí
 = 
maxÀn
 - 1;

58 } if(
vÀn
 >= 0) {

59 
¨g
->
îrbuf
[
vÀn
] = '\0';

60 
¨g
->
îæí
 = 
vÀn
;

65 
vÀn
 = ("<broken vsnprintf>") - 1;

66 
maxÀn
--;

67 
¨g
->
îæí
 = 
vÀn
 < 
maxÀn
 ? vlen : maxlen;

68 
	`mem˝y
(
¨g
->
îrbuf
, "<brokí v¢¥ötf>",árg->
îæí
);

69 
¨g
->
îrbuf
[¨g->
îæí
] = 0;

73 
	}
}

76 
	$a¢_check_c⁄°øöts
(
a¢_TYPE_des¸ùt‹_t
 *
ty≥_des¸ùt‹
,

77 c⁄° *
°ru˘_±r
, *
îrbuf
, 
size_t
 *
îæí
) {

78 
îrbufDesc
 
¨g
;

79 
ªt
;

81 
¨g
.
Áûed_ty≥
 = 0;

82 
¨g
.
Áûed_°ru˘_±r
 = 0;

83 
¨g
.
îrbuf
 =Érrbuf;

84 
¨g
.
îæí
 =Érrlen ? *errlen : 0;

86 
ªt
 = 
ty≥_des¸ùt‹
->
	`check_c⁄°øöts
(type_descriptor,

87 
°ru˘_±r
, 
_a¢_i_˘Áûcb
, &
¨g
);

88 if(
ªt
 =-1 && 
îæí
)

89 *
îæí
 = 
¨g
.errlen;

91  
ªt
;

92 
	}
}

	@F:\ss_asn1\module.asn1-1\constraints.h

5 #i‚def 
_ASN1_CONSTRAINTS_VALIDATOR_H_


6 
	#_ASN1_CONSTRAINTS_VALIDATOR_H_


	)

8 
	~<a¢_sy°em.h
>

10 #ifde‡
__˝lu•lus


14 
a¢_TYPE_des¸ùt‹_s
;

29 
a¢_check_c⁄°øöts
(
a¢_TYPE_des¸ùt‹_s
 *
ty≥_des¸ùt‹
,

30 c⁄° *
°ru˘_±r
,

31 *
îrbuf
,

32 
size_t
 *
îæí


40 (
a¢_c⁄°r_check_f
)(

41 
	ta¢_TYPE_des¸ùt‹_s
 *
	tty≥_des¸ùt‹
,

42 c⁄° *
	t°ru˘_±r
,

43 
	ta¢_≠p_c⁄°øöt_Áûed_f
 *
	t›ti⁄Æ_ˇŒback
,

44 *
	t›ti⁄Æ_≠p_key


51 
a¢_c⁄°r_check_f
 
a¢_gíîic_no_c⁄°øöt
;

52 
a¢_c⁄°r_check_f
 
a¢_gíîic_unknown_c⁄°øöt
;

57 
	#_ASN_CTFAIL
 if(
˘Áûcb
Ë
	)
ctfailcb

59 #ifde‡
__˝lu•lus


	@F:\ss_asn1\module.asn1-1\converter-sample.c

10 #ifdef 
HAVE_CONFIG_H


11 
	~<c⁄fig.h
>

13 
	~<°dio.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<°dlib.h
>

16 
	~<uni°d.h
>

17 
	~<°rög.h
>

18 
	~<sy£xôs.h
>

19 
	~<î∫o.h
>

21 
	~<a¢_≠∂iˇti⁄.h
>

22 
	~<a¢_öã∫Æ.h
>

25 
	#ASN_DEF_PDU
(
t
Ë
a¢_DEF_
 ## 
	)
t

26 
	#DEF_PDU_Ty≥
(
t
Ë
	`ASN_DEF_PDU
—)

	)

27 
	#PDU_Ty≥
 
	`DEF_PDU_Ty≥
(
PDU
)

	)

29 
a¢_TYPE_des¸ùt‹_t
 
PDU_Ty≥
;

30 #ifdef 
ASN_PDU_COLLECTION


31 
a¢_TYPE_des¸ùt‹_t
 *
a¢_pdu_cﬁÀ˘i⁄
[];

37 *
d©a_decode_‰om_fûe
(
a¢_TYPE_des¸ùt‹_t
 *
a¢Ty≥OfPDU
,

38 
FILE
 *
fûe
, c⁄° *
«me
, 
ssize_t
 
sugge°ed_bufsize
, 
fú°_pdu
);

39 
wrôe_out
(c⁄° *
buf„r
, 
size_t
 
size
, *
key
);

40 
FILE
 *
¨gumít_to_fûe
(*
av
[], 
idx
);

41 *
¨gumít_to_«me
(*
av
[], 
idx
);

43 
	g›t_debug
;

44 
	g›t_check
;

45 
	g›t_°ack
;

46 
	g›t_n›ad
;

47 
	g›t_⁄ïdu
;

50 
	eöput_f‹m©
 {

51 
	mINP_BER
,

52 
	mINP_XER
,

53 
	mINP_PER


54 } 
	gif‹m
;

57 
	eouçut_f‹m©
 {

58 
	mOUT_XER
,

59 
	mOUT_DER
,

60 
	mOUT_PER
,

61 
	mOUT_TEXT
,

62 
	mOUT_NULL


63 } 
	gof‹m
;

65 #ifdef 
JUNKTEST


66 
	#JUNKOPT
 "J:"

	)

67 
	g›t_j¥ob
;

68 
	gjunk_Áûuªs
;

69 
junk_byãs_wôh_¥obabûôy
(
uöt8_t
 *, 
size_t
, 
¥ob
);

71 
	#JUNKOPT


	)

75 
ölöe
 

76 
	$DEBUG
(c⁄° *
fmt
, ...) {

77 
va_li°
 
≠
;

78 if(!
›t_debug
) ;

79 
	`Ârötf
(
°dîr
, "AD: ");

80 
	`va_°¨t
(
≠
, 
fmt
);

81 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

82 
	`va_íd
(
≠
);

83 
	`Ârötf
(
°dîr
, "\n");

84 
	}
}

87 
	$maö
(
ac
, *
av
[]) {

88 
a¢_TYPE_des¸ùt‹_t
 *
pduTy≥
 = &
PDU_Ty≥
;

89 
ssize_t
 
sugge°ed_bufsize
 = 8192;

90 
numbî_of_ôî©i⁄s
 = 1;

91 
num
;

92 
ch
;

95 if(
pduTy≥
->
u≥r_decodî
)

96 
if‹m
 = 
INP_PER
;

101 (
ch
 = 
	`gë›t
(
ac
, 
av
, "i:o:1b:cdn:p:hs:" 
JUNKOPT
)) != -1)

102 
ch
) {

104 if(
›èrg
[0] ='b'Ë{ 
if‹m
 = 
INP_BER
; ; }

105 if(
›èrg
[0] ='x'Ë{ 
if‹m
 = 
INP_XER
; ; }

106 if(
pduTy≥
->
u≥r_decodî


107 && 
›èrg
[0] ='p'Ë{ 
if‹m
 = 
INP_PER
; ; }

108 
	`Ârötf
(
°dîr
, "-i<format>: '%s': improper format selector\n",

109 
›èrg
);

110 
	`exô
(
EX_UNAVAILABLE
);

112 if(
›èrg
[0] ='d'Ë{ 
of‹m
 = 
OUT_DER
; ; }

113 if(
pduTy≥
->
u≥r_ícodî


114 && 
›èrg
[0] ='p'Ë{ 
of‹m
 = 
OUT_PER
; ; }

115 if(
›èrg
[0] ='x'Ë{ 
of‹m
 = 
OUT_XER
; ; }

116 if(
›èrg
[0] ='t'Ë{ 
of‹m
 = 
OUT_TEXT
; ; }

117 if(
›èrg
[0] ='n'Ë{ 
of‹m
 = 
OUT_NULL
; ; }

118 
	`Ârötf
(
°dîr
, "-o<format>: '%s': improper format selector\n",

119 
›èrg
);

120 
	`exô
(
EX_UNAVAILABLE
);

122 
›t_⁄ïdu
 = 1;

125 
sugge°ed_bufsize
 = 
	`©oi
(
›èrg
);

126 if(
sugge°ed_bufsize
 < 1

127 || 
sugge°ed_bufsize
 > 16 * 1024 * 1024) {

128 
	`Ârötf
(
°dîr
,

130 
›èrg
);

131 
	`exô
(
EX_UNAVAILABLE
);

135 
›t_check
 = 1;

138 
›t_debug
++;

141 
numbî_of_ôî©i⁄s
 = 
	`©oi
(
›èrg
);

142 if(
numbî_of_ôî©i⁄s
 < 1) {

143 
	`Ârötf
(
°dîr
,

144 "-¿%s: Im¥›î iãøti⁄†cou¡\n", 
›èrg
);

145 
	`exô
(
EX_UNAVAILABLE
);

149 if(
	`°rcmp
(
›èrg
, "er-nopad") == 0) {

150 
›t_n›ad
 = 1;

153 #ifdef 
ASN_PDU_COLLECTION


154 if(
	`°rcmp
(
›èrg
, "list") == 0) {

155 
a¢_TYPE_des¸ùt‹_t
 **
pdu
 = 
a¢_pdu_cﬁÀ˘i⁄
;

156 
	`Ârötf
(
°dîr
, "Available PDUÅypes:\n");

157 ; *
pdu
;Ödu++Ë
	`¥ötf
("%s\n", (*pdu)->
«me
);

158 
	`exô
(0);

159 } if(
›èrg
[0] >= 'A' && optarg[0] <= 'Z') {

160 
a¢_TYPE_des¸ùt‹_t
 **
pdu
 = 
a¢_pdu_cﬁÀ˘i⁄
;

161 *
pdu
 && 
	`°rcmp
((*pdu)->
«me
, 
›èrg
))Ödu++;

162 if(*
pdu
Ë{ 
pduTy≥
 = *pdu; ; }

163 
	`Ârötf
(
°dîr
, "-∞%s: Uƒecognized PDU\n", 
›èrg
);

166 
	`Ârötf
(
°dîr
, "-∞%s: Uƒecognized o±i⁄\n", 
›èrg
);

167 
	`exô
(
EX_UNAVAILABLE
);

169 
›t_°ack
 = 
	`©oi
(
›èrg
);

170 if(
›t_°ack
 < 0) {

171 
	`Ârötf
(
°dîr
,

173 
›èrg
);

174 
	`exô
(
EX_UNAVAILABLE
);

177 #ifdef 
JUNKTEST


179 
›t_j¥ob
 = 
	`°πod
(
›èrg
, 0);

180 if(
›t_j¥ob
 <= 0.0 || opt_jprob > 1.0) {

181 
	`Ârötf
(
°dîr
,

183 
›èrg
);

184 
	`exô
(
EX_UNAVAILABLE
);

190 #ifdef 
ASN_CONVERTER_TITLE


191 
	#_AXS
(
x
Ë#x

	)

192 
	#_ASX
(
x
Ë
	`_AXS
(x)

	)

193 
	`Ârötf
(
°dîr
, "%s\n", 
	`_ASX
(
ASN_CONVERTER_TITLE
));

195 
	`Ârötf
(
°dîr
, "Ußge: %†[›ti⁄s] <d©a.bî> ...\n", 
av
[0]);

196 
	`Ârötf
(
°dîr
, "Where optionsáre:\n");

197 if(
pduTy≥
->
u≥r_decodî
)

198 
	`Ârötf
(
°dîr
,

200 
	`Ârötf
(
°dîr
,

202 
if‹m
 =
INP_PER
 ? "" : " (DEFAULT)");

203 
	`Ârötf
(
°dîr
,

205 if(
pduTy≥
->
u≥r_ícodî
)

206 
	`Ârötf
(
°dîr
,

208 
	`Ârötf
(
°dîr
,

213 if(
pduTy≥
->
u≥r_decodî
)

214 
	`Ârötf
(
°dîr
,

216 #ifdef 
ASN_PDU_COLLECTION


217 
	`Ârötf
(
°dîr
,

221 
	`Ârötf
(
°dîr
,

228 #ifdef 
JUNKTEST


231 , ()
sugge°ed_bufsize
, 
_ASN_DEFAULT_STACK_MAX
);

232 
	`exô
(
EX_USAGE
);

235 
ac
 -
›töd
;

236 
av
 +
›töd
;

238 if(
ac
 < 1) {

239 
	`Ârötf
(
°dîr
, "%s: No input files specified. "

241 
av
[-
›töd
]);

242 
	`exô
(
EX_USAGE
);

245 
	`£tvbuf
(
°dout
, 0, 
_IOLBF
, 0);

247 
num
 = 0;Çum < 
numbî_of_ôî©i⁄s
;Çum++) {

248 
ac_i
;

252 
ac_i
 = 0;ác_ò< 
ac
;ác_i++) {

253 
a¢_íc_rvÆ_t
 
îv
;

254 *
°ru˘uª
;

255 
FILE
 *
fûe
 = 
	`¨gumít_to_fûe
(
av
, 
ac_i
);

256 *
«me
 = 
	`¨gumít_to_«me
(
av
, 
ac_i
);

257 
fú°_pdu
;

259 
fú°_pdu
 = 1; fú°_pdu || !
›t_⁄ïdu
; first_pdu = 0) {

263 
°ru˘uª
 = 
	`d©a_decode_‰om_fûe
(
pduTy≥
,

264 
fûe
, 
«me
, 
sugge°ed_bufsize
, 
fú°_pdu
);

265 if(!
°ru˘uª
) {

266 if(
î∫o
) {

268 
	`exô
(
EX_DATAERR
);

276 if(
›t_check
) {

277 
îrbuf
[128];

278 
size_t
 
îæí
 = (
îrbuf
);

279 if(
	`a¢_check_c⁄°øöts
(
pduTy≥
, 
°ru˘uª
,

280 
îrbuf
, &
îæí
)) {

281 
	`Ârötf
(
°dîr
, "%s: ASN.1 constraint "

282 "check faûed: %s\n", 
«me
, 
îrbuf
);

283 
	`exô
(
EX_DATAERR
);

287 
of‹m
) {

288 
OUT_NULL
:

289 #ifdef 
JUNKTEST


290 if(
›t_j¥ob
 == 0.0)

292 
	`Ârötf
(
°dîr
, "%s: decoded suc˚ssfuŒy\n", 
«me
);

294 
OUT_TEXT
:

295 
	`a¢_Âröt
(
°dout
, 
pduTy≥
, 
°ru˘uª
);

297 
OUT_XER
:

298 if(
	`xî_Âröt
(
°dout
, 
pduTy≥
, 
°ru˘uª
)) {

299 
	`Ârötf
(
°dîr
,

301 
«me
, 
pduTy≥
->name);

302 
	`exô
(
EX_UNAVAILABLE
);

305 
OUT_DER
:

306 
îv
 = 
	`dî_ícode
(
pduTy≥
, 
°ru˘uª
, 
wrôe_out
, 
°dout
);

307 if(
îv
.
ícoded
 < 0) {

308 
	`Ârötf
(
°dîr
,

310 
«me
, 
pduTy≥
->name);

311 
	`exô
(
EX_UNAVAILABLE
);

313 
	`DEBUG
("Encoded i¿%ld byã†o‡DER", ()
îv
.
ícoded
);

315 
OUT_PER
:

316 
îv
 = 
	`u≥r_ícode
(
pduTy≥
, 
°ru˘uª
, 
wrôe_out
, 
°dout
);

317 if(
îv
.
ícoded
 < 0) {

318 
	`Ârötf
(
°dîr
,

320 
«me
, 
pduTy≥
->name);

321 
	`exô
(
EX_UNAVAILABLE
);

323 
	`DEBUG
("Encoded i¿%ld bô†o‡UPER", ()
îv
.
ícoded
);

327 
	`ASN_STRUCT_FREE
(*
pduTy≥
, 
°ru˘uª
);

330 if(
fûe
 && fûê!
°dö
)

331 
	`f˛o£
(
fûe
);

335 #ifdef 
JUNKTEST


336 if(
›t_j¥ob
 > 0.0) {

337 
	`Ârötf
(
°dîr
, "Junked %f OK (%d/%d)\n",

338 
›t_j¥ob
, 
junk_Áûuªs
, 
numbî_of_ôî©i⁄s
);

343 
	}
}

345 
	sdy«mic_buf„r
 {

346 
uöt8_t
 *
	md©a
;

347 
size_t
 
	moff£t
;

348 
size_t
 
	mÀngth
;

349 
size_t
 
	munbôs
;

350 
size_t
 
	mÆloˇãd
;

351 
	mƒóŒocs
;

352 
off_t
 
	mbyãs_shi·ed
;

353 } 
	gDy«micBuf„r
;

356 
	$buf„r_dump
() {

357 
uöt8_t
 *
p
 = 
Dy«micBuf„r
.
d©a
 + Dy«micBuf„r.
off£t
;

358 
uöt8_t
 *
e
 = 
p
 + 
Dy«micBuf„r
.
Àngth
 - (Dy«micBuf„r.
unbôs
 ? 1 : 0);

359 if(!
›t_debug
) ;

360 
	`DEBUG
("Buffer: { d=%p, o=%ld,Ü=%ld, u=%ld,á=%ld, s=%ld }",

361 
Dy«micBuf„r
.
d©a
,

362 ()
Dy«micBuf„r
.
off£t
,

363 ()
Dy«micBuf„r
.
Àngth
,

364 ()
Dy«micBuf„r
.
unbôs
,

365 ()
Dy«micBuf„r
.
Æloˇãd
,

366 ()
Dy«micBuf„r
.
byãs_shi·ed
);

367 ; 
p
 < 
e
;Ö++) {

368 
	`Ârötf
(
°dîr
, " %c%c%c%c%c%c%c%c",

369 ((*
p
 >> 7) & 1) ? '1' : '0',

370 ((*
p
 >> 6) & 1) ? '1' : '0',

371 ((*
p
 >> 5) & 1) ? '1' : '0',

372 ((*
p
 >> 4) & 1) ? '1' : '0',

373 ((*
p
 >> 3) & 1) ? '1' : '0',

374 ((*
p
 >> 2) & 1) ? '1' : '0',

375 ((*
p
 >> 1) & 1) ? '1' : '0',

376 ((*
p
 >> 0) & 1) ? '1' : '0');

378 if(
Dy«micBuf„r
.
unbôs
) {

379 
shi·
;

380 
	`Ârötf
(
°dîr
, " ");

381 
shi·
 = 7; shi· >
Dy«micBuf„r
.
unbôs
; shift--)

382 
	`Ârötf
(
°dîr
, "%c", ((*
p
 >> 
shi·
) & 1) ? '1' : '0');

383 
	`Ârötf
(
°dîr
, " %ld:%ld\n",

384 ()
Dy«micBuf„r
.
Àngth
 - 1,

385 ()8 - 
Dy«micBuf„r
.
unbôs
);

387 
	`Ârötf
(
°dîr
, " %d\n", 
Dy«micBuf„r
.
Àngth
);

389 
	}
}

396 
	$buf„r_shi·_À·
(
size_t
 
off£t
, 
bôs
) {

397 
uöt8_t
 *
±r
 = 
Dy«micBuf„r
.
d©a
 + Dy«micBuf„r.
off£t
 + offset;

398 
uöt8_t
 *
íd
 = 
Dy«micBuf„r
.
d©a
 + Dy«micBuf„r.
off£t


399 + 
Dy«micBuf„r
.
Àngth
 - 1;

401 if(!
bôs
) ;

403 
	`DEBUG
("ShiftingÜeft %d bits off %ld (o=%ld, u=%ld,Ü=%ld)",

404 
bôs
, ()
off£t
,

405 ()
Dy«micBuf„r
.
off£t
,

406 ()
Dy«micBuf„r
.
unbôs
,

407 ()
Dy«micBuf„r
.
Àngth
);

409 if(
off£t
) {

410 
right
;

411 
right
 = 
±r
[0] >> (8 - 
bôs
);

413 
	`DEBUG
("oleft: %c%c%c%c%c%c%c%c",

414 ((
±r
[-1] >> 7) & 1) ? '1' : '0',

415 ((
±r
[-1] >> 6) & 1) ? '1' : '0',

416 ((
±r
[-1] >> 5) & 1) ? '1' : '0',

417 ((
±r
[-1] >> 4) & 1) ? '1' : '0',

418 ((
±r
[-1] >> 3) & 1) ? '1' : '0',

419 ((
±r
[-1] >> 2) & 1) ? '1' : '0',

420 ((
±r
[-1] >> 1) & 1) ? '1' : '0',

421 ((
±r
[-1] >> 0) & 1) ? '1' : '0');

423 
	`DEBUG
("oriht: %c%c%c%c%c%c%c%c",

424 ((
±r
[0] >> 7) & 1) ? '1' : '0',

425 ((
±r
[0] >> 6) & 1) ? '1' : '0',

426 ((
±r
[0] >> 5) & 1) ? '1' : '0',

427 ((
±r
[0] >> 4) & 1) ? '1' : '0',

428 ((
±r
[0] >> 3) & 1) ? '1' : '0',

429 ((
±r
[0] >> 2) & 1) ? '1' : '0',

430 ((
±r
[0] >> 1) & 1) ? '1' : '0',

431 ((
±r
[0] >> 0) & 1) ? '1' : '0');

433 
	`DEBUG
("mriht: %c%c%c%c%c%c%c%c",

434 ((
right
 >> 7) & 1) ? '1' : '0',

435 ((
right
 >> 6) & 1) ? '1' : '0',

436 ((
right
 >> 5) & 1) ? '1' : '0',

437 ((
right
 >> 4) & 1) ? '1' : '0',

438 ((
right
 >> 3) & 1) ? '1' : '0',

439 ((
right
 >> 2) & 1) ? '1' : '0',

440 ((
right
 >> 1) & 1) ? '1' : '0',

441 ((
right
 >> 0) & 1) ? '1' : '0');

443 
±r
[-1] = (±r[-1] & (0xf‡<< 
bôs
)Ë| 
right
;

445 
	`DEBUG
("after: %c%c%c%c%c%c%c%c",

446 ((
±r
[-1] >> 7) & 1) ? '1' : '0',

447 ((
±r
[-1] >> 6) & 1) ? '1' : '0',

448 ((
±r
[-1] >> 5) & 1) ? '1' : '0',

449 ((
±r
[-1] >> 4) & 1) ? '1' : '0',

450 ((
±r
[-1] >> 3) & 1) ? '1' : '0',

451 ((
±r
[-1] >> 2) & 1) ? '1' : '0',

452 ((
±r
[-1] >> 1) & 1) ? '1' : '0',

453 ((
±r
[-1] >> 0) & 1) ? '1' : '0');

456 
	`buf„r_dump
();

458 ; 
±r
 < 
íd
;Ötr++) {

459 
right
 = 
±r
[1] >> (8 - 
bôs
);

460 *
±r
 = (*±∏<< 
bôs
Ë| 
right
;

462 *
±r
 <<
bôs
;

464 
	`DEBUG
("Unbô†[%d=>", ()
Dy«micBuf„r
.
unbôs
);

465 if(
Dy«micBuf„r
.
unbôs
 == 0) {

466 
Dy«micBuf„r
.
unbôs
 +
bôs
;

468 
Dy«micBuf„r
.
unbôs
 +
bôs
;

469 if(
Dy«micBuf„r
.
unbôs
 > 7) {

470 
Dy«micBuf„r
.
unbôs
 -= 8;

471 
Dy«micBuf„r
.
Àngth
--;

472 
Dy«micBuf„r
.
byãs_shi·ed
++;

475 
	`DEBUG
("Unbô†=>%d]", ()
Dy«micBuf„r
.
unbôs
);

477 
	`buf„r_dump
();

479 
	`DEBUG
("Shifted. Now (o=%ld, u=%ldÜ=%ld)",

480 ()
Dy«micBuf„r
.
off£t
,

481 ()
Dy«micBuf„r
.
unbôs
,

482 ()
Dy«micBuf„r
.
Àngth
);

485 
	}
}

490 
	$add_byãs_to_buf„r
(c⁄° *
d©a2add
, 
size_t
 
byãs
) {

492 if(
byãs
 == 0) ;

494 
	`DEBUG
("=>ádd_bytes(%ld) { o=%ldÜ=%ld u=%ld, s=%ld }",

495 ()
byãs
,

496 ()
Dy«micBuf„r
.
off£t
,

497 ()
Dy«micBuf„r
.
Àngth
,

498 ()
Dy«micBuf„r
.
unbôs
,

499 ()
Dy«micBuf„r
.
Æloˇãd
);

501 if(
Dy«micBuf„r
.
Æloˇãd


502 >(
Dy«micBuf„r
.
off£t
 + Dy«micBuf„r.
Àngth
 + 
byãs
)) {

503 
	`DEBUG
("\tNo bufferÑeallocation isÇecessary");

504 } if(
byãs
 <
Dy«micBuf„r
.
off£t
) {

505 
	`DEBUG
("\tC⁄ã¡†shi·ed by %ld", 
Dy«micBuf„r
.
off£t
);

508 
	`memmove
(
Dy«micBuf„r
.
d©a
,

509 
Dy«micBuf„r
.
d©a
 + Dy«micBuf„r.
off£t
,

510 
Dy«micBuf„r
.
Àngth
);

511 
Dy«micBuf„r
.
byãs_shi·ed
 +Dy«micBuf„r.
off£t
;

512 
Dy«micBuf„r
.
off£t
 = 0;

514 
size_t
 
√wsize
 = (
Dy«micBuf„r
.
Æloˇãd
 << 2Ë+ 
byãs
;

515 *
p
 = 
	`MALLOC
(
√wsize
);

516 if(!
p
) {

517 
	`≥º‹
("malloc()");

518 
	`exô
(
EX_OSERR
);

520 
	`mem˝y
(
p
,

521 
Dy«micBuf„r
.
d©a
 + Dy«micBuf„r.
off£t
,

522 
Dy«micBuf„r
.
Àngth
);

523 
	`FREEMEM
(
Dy«micBuf„r
.
d©a
);

524 
Dy«micBuf„r
.
d©a
 = (
uöt8_t
 *)
p
;

525 
Dy«micBuf„r
.
off£t
 = 0;

526 
Dy«micBuf„r
.
Æloˇãd
 = 
√wsize
;

527 
Dy«micBuf„r
.
ƒóŒocs
++;

528 
	`DEBUG
("\tBufferÑeallocatedÅo %ld (%dÅime)",

529 
√wsize
, 
Dy«micBuf„r
.
ƒóŒocs
);

532 
	`mem˝y
(
Dy«micBuf„r
.
d©a


533 + 
Dy«micBuf„r
.
off£t
 + Dy«micBuf„r.
Àngth
,

534 
d©a2add
, 
byãs
);

535 
Dy«micBuf„r
.
Àngth
 +
byãs
;

536 if(
Dy«micBuf„r
.
unbôs
) {

537 
bôs
 = 
Dy«micBuf„r
.
unbôs
;

538 
Dy«micBuf„r
.
unbôs
 = 0;

539 
	`buf„r_shi·_À·
(
Dy«micBuf„r
.
Àngth
 - 
byãs
, 
bôs
);

542 
	`DEBUG
("<=ádd_bytes(%ld) { o=%ldÜ=%ld u=%ld, s=%ld }",

543 ()
byãs
,

544 ()
Dy«micBuf„r
.
off£t
,

545 ()
Dy«micBuf„r
.
Àngth
,

546 ()
Dy«micBuf„r
.
unbôs
,

547 ()
Dy«micBuf„r
.
Æloˇãd
);

548 
	}
}

551 
	$d©a_decode_‰om_fûe
(
a¢_TYPE_des¸ùt‹_t
 *
pduTy≥
, 
FILE
 *
fûe
, c⁄° *
«me
, 
ssize_t
 
sugge°ed_bufsize
, 
⁄_fú°_pdu
) {

552 
uöt8_t
 *
fbuf
;

553 
ssize_t
 
fbuf_size
;

554 
a¢_codec_˘x_t
 
s_codec_˘x
;

555 
a¢_codec_˘x_t
 *
›t_codec_˘x
 = 0;

556 *
°ru˘uª
 = 0;

557 
a¢_dec_rvÆ_t
 
rvÆ
;

558 
size_t
 
ﬁd_off£t
;

559 
size_t
 
√w_off£t
;

560 
tﬁî©e_eof
;

561 
size_t
 
rd
;

563 if(!
fûe
) {

564 
	`Ârötf
(
°dîr
, "%s: %s\n", 
«me
, 
	`°ªº‹
(
î∫o
));

565 
î∫o
 = 
EINVAL
;

569 if(
›t_°ack
) {

570 
s_codec_˘x
.
max_°ack_size
 = 
›t_°ack
;

571 
›t_codec_˘x
 = &
s_codec_˘x
;

574 
	`DEBUG
("Pro˚ssög %s", 
«me
);

577 if(
fbuf_size
 !
sugge°ed_bufsize
) {

578 
fbuf
 = (
uöt8_t
 *)
	`REALLOC
(fbuf, 
sugge°ed_bufsize
);

579 if(!
fbuf
) {

580 
	`≥º‹
("realloc()");

581 
	`exô
(
EX_OSERR
);

583 
fbuf_size
 = 
sugge°ed_bufsize
;

586 if(
⁄_fú°_pdu
) {

587 
Dy«micBuf„r
.
off£t
 = 0;

588 
Dy«micBuf„r
.
Àngth
 = 0;

589 
Dy«micBuf„r
.
unbôs
 = 0;

590 
Dy«micBuf„r
.
Æloˇãd
 = 0;

591 
Dy«micBuf„r
.
byãs_shi·ed
 = 0;

592 
Dy«micBuf„r
.
ƒóŒocs
 = 0;

595 
ﬁd_off£t
 = 
Dy«micBuf„r
.
byãs_shi·ed
 + Dy«micBuf„r.
off£t
;

598 
rvÆ
.
code
 = 
RC_WMORE
;

599 
rvÆ
.
c⁄sumed
 = 0;

601 
tﬁî©e_eof
 = 1;

602 (
rd
 = 
	`‰ód
(
fbuf
, 1, 
fbuf_size
, 
fûe
))

603 || 
	`„of
(
fûe
) == 0

604 || (
tﬁî©e_eof
 && 
Dy«micBuf„r
.
Àngth
)

606 
ecbôs
 = 0;

607 
uöt8_t
 *
i_b±r
;

608 
size_t
 
i_size
;

613 if(
Dy«micBuf„r
.
Æloˇãd
) {

615 
	`add_byãs_to_buf„r
(
fbuf
, 
rd
);

616 
i_b±r
 = 
Dy«micBuf„r
.
d©a
 + Dy«micBuf„r.
off£t
;

617 
i_size
 = 
Dy«micBuf„r
.
Àngth
;

619 
i_b±r
 = 
fbuf
;

620 
i_size
 = 
rd
;

623 
	`DEBUG
("Decodög %ld byãs", ()
i_size
);

625 #ifdef 
JUNKTEST


626 
	`junk_byãs_wôh_¥obabûôy
(
i_b±r
, 
i_size
, 
›t_j¥ob
);

629 
if‹m
) {

630 
INP_BER
:

631 
rvÆ
 = 
	`bî_decode
(
›t_codec_˘x
, 
pduTy≥
,

632 (**)&
°ru˘uª
, 
i_b±r
, 
i_size
);

634 
INP_XER
:

635 
rvÆ
 = 
	`xî_decode
(
›t_codec_˘x
, 
pduTy≥
,

636 (**)&
°ru˘uª
, 
i_b±r
, 
i_size
);

638 
INP_PER
:

639 if(
›t_n›ad
)

640 
rvÆ
 = 
	`u≥r_decode
(
›t_codec_˘x
, 
pduTy≥
,

641 (**)&
°ru˘uª
, 
i_b±r
, 
i_size
, 0,

642 
Dy«micBuf„r
.
unbôs
);

644 
rvÆ
 = 
	`u≥r_decode_com∂ëe
(
›t_codec_˘x
, 
pduTy≥
,

645 (**)&
°ru˘uª
, 
i_b±r
, 
i_size
);

646 
rvÆ
.
code
) {

647 
RC_OK
:

649 
RC_FAIL
:

650 if(
›t_n›ad
) {

653 
ecbôs
 = 
rvÆ
.
c⁄sumed
 % 8;

655 
rvÆ
.
c⁄sumed
 /= 8;

658 
RC_WMORE
:

660 
	`ASN_STRUCT_FREE
(*
pduTy≥
, 
°ru˘uª
);

661 
°ru˘uª
 = 0;

662 
rvÆ
.
c⁄sumed
 = 0;

668 
	`DEBUG
("decode(%ld) consumed %ld+%db (%ld), code %d",

669 ()
Dy«micBuf„r
.
Àngth
,

670 ()
rvÆ
.
c⁄sumed
, 
ecbôs
, ()
i_size
,

671 
rvÆ
.
code
);

673 if(
Dy«micBuf„r
.
Æloˇãd
 == 0) {

677 if(
rvÆ
.
code
 !
RC_FAIL
 &&ÑvÆ.
c⁄sumed
 < 
rd
) {

678 
	`add_byãs_to_buf„r
(
fbuf
 + 
rvÆ
.
c⁄sumed
,

679 
rd
 - 
rvÆ
.
c⁄sumed
);

680 
	`buf„r_shi·_À·
(0, 
ecbôs
);

681 
Dy«micBuf„r
.
byãs_shi·ed
 = 
rvÆ
.
c⁄sumed
;

682 
rvÆ
.
c⁄sumed
 = 0;

683 
ecbôs
 = 0;

690 if(
Dy«micBuf„r
.
Æloˇãd
) {

691 
Dy«micBuf„r
.
off£t
 +
rvÆ
.
c⁄sumed
;

692 
Dy«micBuf„r
.
Àngth
 -
rvÆ
.
c⁄sumed
;

694 
Dy«micBuf„r
.
byãs_shi·ed
 +
rvÆ
.
c⁄sumed
;

697 
rvÆ
.
code
) {

698 
RC_OK
:

699 if(
ecbôs
Ë
	`buf„r_shi·_À·
(0,Écbits);

700 
	`DEBUG
("RC_OK, finishing up with %ld+%d",

701 ()
rvÆ
.
c⁄sumed
, 
ecbôs
);

702  
°ru˘uª
;

703 
RC_WMORE
:

704 
	`DEBUG
("RC_WMORE, continuingÑead=%ld, cons=%ld "

706 ()
rd
,

707 ()
rvÆ
.
c⁄sumed
,

708 ()
Dy«micBuf„r
.
off£t
,

709 ()
Dy«micBuf„r
.
Àngth
,

710 ()
Dy«micBuf„r
.
unbôs
,

711 ()
Dy«micBuf„r
.
Æloˇãd
);

712 if(!
rd
Ë
tﬁî©e_eof
--;

714 
RC_FAIL
:

720 
	`DEBUG
("Clean upÖartially decoded structure");

721 
	`ASN_STRUCT_FREE
(*
pduTy≥
, 
°ru˘uª
);

723 
√w_off£t
 = 
Dy«micBuf„r
.
byãs_shi·ed
 + Dy«micBuf„r.
off£t
;

729 if(
⁄_fú°_pdu


730 || 
Dy«micBuf„r
.
Àngth


731 || 
√w_off£t
 - 
ﬁd_off£t
 > ((
if‹m
 =
INP_XER
)?("\r\n")-1:0)

734 #ifdef 
JUNKTEST


739 if(
›t_j¥ob
 != 0.0) {

740 
junk_Áûuªs
++;

741 
î∫o
 = 0;

746 
	`DEBUG
("ofp %d,Ço=%ld, oo=%ld, dbl=%ld",

747 
⁄_fú°_pdu
, ()
√w_off£t
, ()
ﬁd_off£t
,

748 ()
Dy«micBuf„r
.
Àngth
);

749 
	`Ârötf
(
°dîr
, "%s: "

751 
«me
, ()
√w_off£t
,

752 (
rvÆ
.
code
 =
RC_WMORE
)

755 #i‚def 
ENOMSG


756 
	#ENOMSG
 
EINVAL


	)

758 #i‚def 
EBADMSG


759 
	#EBADMSG
 
EINVAL


	)

761 
î∫o
 = (
rvÆ
.
code
 =
RC_WMORE
Ë? 
ENOMSG
 : 
EBADMSG
;

764 
î∫o
 = 0;

768 
	}
}

771 
	$wrôe_out
(c⁄° *
buf„r
, 
size_t
 
size
, *
key
) {

772 
FILE
 *
Â
 = (FILE *)
key
;

773  (
	`fwrôe
(
buf„r
, 1, 
size
, 
Â
) == size) ? 0 : -1;

774 
	}
}

776 
	$¨gumít_is_°dö
(*
av
[], 
idx
) {

777 if(
	`°rcmp
(
av
[
idx
], "-")) {

781 if(
	`°rcmp
(
av
[-1], "--"))

786 
	}
}

788 
FILE
 *
	$¨gumít_to_fûe
(*
av
[], 
idx
) {

789  
	`¨gumít_is_°dö
(
av
, 
idx
)

790 ? 
°dö


791 : 
	`f›í
(
av
[
idx
], "r");

792 
	}
}

794 *
	$¨gumít_to_«me
(*
av
[], 
idx
) {

795  
	`¨gumít_is_°dö
(
av
, 
idx
)

797 : 
av
[
idx
];

798 
	}
}

800 #ifdef 
JUNKTEST


805 
	$junk_byãs_wôh_¥obabûôy
(
uöt8_t
 *
buf
, 
size_t
 
size
, 
¥ob
) {

806 
junkmode
;

807 
uöt8_t
 *
±r
;

808 
uöt8_t
 *
íd
;

809 if(
›t_j¥ob
 <= 0.0) ;

810 
±r
 = 
buf
, 
íd
 =Öå + 
size
;Ötr <Énd;Ötr++) {

811 
byã
 = *
±r
;

812 if(
junkmode
++ & 1) {

813 if(((()
	`øndom
(Ë/ 
RAND_MAX
Ë< 
¥ob
))

814 
byã
 = 
	`øndom
() & 0xff;

816 
	#BPROB
(
b
Ë(((()
	`øndom
(Ë/ 
RAND_MAX
Ë< 
¥ob
Ë? b : 0)

	)

817 
byã
 ^
	`BPROB
(0x80);

818 
byã
 ^
	`BPROB
(0x40);

819 
byã
 ^
	`BPROB
(0x20);

820 
byã
 ^
	`BPROB
(0x10);

821 
byã
 ^
	`BPROB
(0x08);

822 
byã
 ^
	`BPROB
(0x04);

823 
byã
 ^
	`BPROB
(0x02);

824 
byã
 ^
	`BPROB
(0x01);

826 if(
byã
 !*
±r
) {

827 
	`DEBUG
("Junk buf[%d] %02x -> %02x",

828 
±r
 - 
buf
, *±r, 
byã
);

829 *
±r
 = 
byã
;

832 
	}
}

	@F:\ss_asn1\module.asn1-1\der_encoder.c

5 
	~<a¢_öã∫Æ.h
>

6 
	~<î∫o.h
>

8 
ssize_t
 
dî_wrôe_TL
(
bî_év_èg_t
 
èg
, 
bî_év_Àn_t
 
Àn
,

9 
a¢_≠p_c⁄sume_byãs_f
 *
cb
, *
≠p_key
, 
c⁄°ru˘ed
);

14 
a¢_íc_rvÆ_t


15 
	$dî_ícode
(
a¢_TYPE_des¸ùt‹_t
 *
ty≥_des¸ùt‹
, *
°ru˘_±r
,

16 
a¢_≠p_c⁄sume_byãs_f
 *
c⁄sume_byãs
, *
≠p_key
) {

18 
	`ASN_DEBUG
("DERÉncoder invoked for %s",

19 
ty≥_des¸ùt‹
->
«me
);

24  
ty≥_des¸ùt‹
->
	`dî_ícodî
(type_descriptor,

25 
°ru˘_±r
,

27 
c⁄sume_byãs
, 
≠p_key
);

28 
	}
}

33 
	síc_to_buf_¨g
 {

34 *
	mbuf„r
;

35 
size_t
 
	mÀ·
;

36 } 
	tíc_to_buf_¨g
;

37 
	$ícode_to_buf„r_cb
(c⁄° *
buf„r
, 
size_t
 
size
, *
key
) {

38 
íc_to_buf_¨g
 *
¨g
 = (íc_to_buf_¨g *)
key
;

40 if(
¨g
->
À·
 < 
size
)

43 
	`mem˝y
(
¨g
->
buf„r
, buf„r, 
size
);

44 
¨g
->
buf„r
 = ((*Ôrg->buf„rË+ 
size
;

45 
¨g
->
À·
 -
size
;

48 
	}
}

53 
a¢_íc_rvÆ_t


54 
	$dî_ícode_to_buf„r
(
a¢_TYPE_des¸ùt‹_t
 *
ty≥_des¸ùt‹
, *
°ru˘_±r
,

55 *
buf„r
, 
size_t
 
buf„r_size
) {

56 
íc_to_buf_¨g
 
¨g
;

57 
a¢_íc_rvÆ_t
 
ec
;

59 
¨g
.
buf„r
 = buffer;

60 
¨g
.
À·
 = 
buf„r_size
;

62 
ec
 = 
ty≥_des¸ùt‹
->
	`dî_ícodî
(type_descriptor,

63 
°ru˘_±r
,

64 0, 0, 
ícode_to_buf„r_cb
, &
¨g
);

65 if(
ec
.
ícoded
 != -1) {

66 
	`as£π
(
ec
.
ícoded
 =(
ssize_t
)(
buf„r_size
 - 
¨g
.
À·
));

69  
ec
;

70 
	}
}

76 
ssize_t


77 
	$dî_wrôe_ègs
(
a¢_TYPE_des¸ùt‹_t
 *
sd
,

78 
size_t
 
°ru˘_Àngth
,

79 
èg_mode
, 
œ°_èg_f‹m
,

80 
bî_év_èg_t
 
èg
,

81 
a¢_≠p_c⁄sume_byãs_f
 *
cb
,

82 *
≠p_key
) {

83 
bî_év_èg_t
 *
ègs
;

84 
ègs_cou¡
;

85 
size_t
 
ovîÆl_Àngth
;

86 
ssize_t
 *
Àns
;

87 
i
;

89 
	`ASN_DEBUG
("WritingÅags (%s,Åm=%d,Åc=%d,Åag=%s, mtc=%d)",

90 
sd
->
«me
, 
èg_mode
, sd->
ègs_cou¡
,

91 
	`bî_év_èg_°rög
(
èg
),

92 
èg_mode


93 ?(
sd
->
ègs_cou¡
+1

94 -((
èg_mode
 =-1Ë&& 
sd
->
ègs_cou¡
))

95 :
sd
->
ègs_cou¡


98 if(
èg_mode
) {

104 
°ag_off£t
;

105 
ègs
 = (
bî_év_èg_t
 *)
	`Æloˇ
((
sd
->
ègs_cou¡
 + 1) * (ber_tlv_tag_t));

106 if(!
ègs
) {

107 
î∫o
 = 
ENOMEM
;

110 
ègs_cou¡
 = 
sd
->tags_count

112 - ((
èg_mode
 =-1Ë&& 
sd
->
ègs_cou¡
);

114 
ègs
[0] = 
èg
;

115 
°ag_off£t
 = -1 + ((
èg_mode
 =-1Ë&& 
sd
->
ègs_cou¡
);

116 
i
 = 1; i < 
ègs_cou¡
; i++)

117 
ègs
[
i
] = 
sd
->ègs[ò+ 
°ag_off£t
];

119 
ègs
 = 
sd
->tags;

120 
ègs_cou¡
 = 
sd
->tags_count;

124 if(
ègs_cou¡
 == 0)

127 
Àns
 = (
ssize_t
 *)
	`Æloˇ
(
ègs_cou¡
 * (lens[0]));

128 if(!
Àns
) {

129 
î∫o
 = 
ENOMEM
;

137 
ovîÆl_Àngth
 = 
°ru˘_Àngth
;

138 
i
 = 
ègs_cou¡
 - 1; i >= 0; --i) {

139 
Àns
[
i
] = 
	`dî_wrôe_TL
(
ègs
[i], 
ovîÆl_Àngth
, 0, 0, 0);

140 if(
Àns
[
i
] == -1)  -1;

141 
ovîÆl_Àngth
 +
Àns
[
i
];

142 
Àns
[
i
] = 
ovîÆl_Àngth
 -Üens[i];

145 if(!
cb
Ë 
ovîÆl_Àngth
 - 
°ru˘_Àngth
;

147 
	`ASN_DEBUG
("%s %s TL sequence (%dÉlements)",

148 
cb
?"Encodög":"E°im©ög", 
sd
->
«me
, 
ègs_cou¡
);

153 
i
 = 0; i < 
ègs_cou¡
; i++) {

154 
ssize_t
 
Àn
;

155 
_c⁄°r
;

158 
_c⁄°r
 = (
œ°_èg_f‹m
 || 
i
 < (
ègs_cou¡
 - 1));

160 
Àn
 = 
	`dî_wrôe_TL
(
ègs
[
i
], 
Àns
[i], 
cb
, 
≠p_key
, 
_c⁄°r
);

161 if(
Àn
 == -1)  -1;

164  
ovîÆl_Àngth
 - 
°ru˘_Àngth
;

165 
	}
}

167 
ssize_t


168 
	$dî_wrôe_TL
(
bî_év_èg_t
 
èg
, 
bî_év_Àn_t
 
Àn
,

169 
a¢_≠p_c⁄sume_byãs_f
 *
cb
, *
≠p_key
,

170 
c⁄°ru˘ed
) {

171 
uöt8_t
 
buf
[32];

172 
size_t
 
size
 = 0;

173 
buf_size
 = 
cb
?(
buf
):0;

174 
ssize_t
 
tmp
;

177 
tmp
 = 
	`bî_év_èg_£rülize
(
èg
, 
buf
, 
buf_size
);

178 if(
tmp
 =-1 ||Åm∞> (
ssize_t
)(
buf
))  -1;

179 
size
 +
tmp
;

182 
tmp
 = 
	`dî_év_Àngth_£rülize
(
Àn
, 
buf
+
size
, 
buf_size
?buf_size-size:0);

183 if(
tmp
 == -1)  -1;

184 
size
 +
tmp
;

186 if(
size
 > (
buf
))

192 if(
cb
) {

193 if(
c⁄°ru˘ed
Ë*
buf
 |= 0x20;

194 if(
	`cb
(
buf
, 
size
, 
≠p_key
) < 0)

198  
size
;

199 
	}
}

	@F:\ss_asn1\module.asn1-1\der_encoder.h

5 #i‚def 
_DER_ENCODER_H_


6 
	#_DER_ENCODER_H_


	)

8 
	~<a¢_≠∂iˇti⁄.h
>

10 #ifde‡
__˝lu•lus


14 
a¢_TYPE_des¸ùt‹_s
;

20 
a¢_íc_rvÆ_t
 
dî_ícode
(
a¢_TYPE_des¸ùt‹_s
 *
ty≥_des¸ùt‹
,

21 *
°ru˘_±r
,

22 
a¢_≠p_c⁄sume_byãs_f
 *
c⁄sume_byãs_cb
,

23 *
≠p_key


27 
a¢_íc_rvÆ_t
 
dî_ícode_to_buf„r
(

28 
a¢_TYPE_des¸ùt‹_s
 *
ty≥_des¸ùt‹
,

29 *
°ru˘_±r
,

30 *
buf„r
,

31 
size_t
 
buf„r_size


37 
a¢_íc_rvÆ_t
 (
	tdî_ty≥_ícodî_f
)(

38 
	ta¢_TYPE_des¸ùt‹_s
 *
	tty≥_des¸ùt‹
,

39 *
	t°ru˘_±r
,

40 
	tèg_mode
,

41 
	tbî_év_èg_t
 
	tèg
,

42 
	ta¢_≠p_c⁄sume_byãs_f
 *
	tc⁄sume_byãs_cb
,

43 *
	t≠p_key


54 
ssize_t
 
dî_wrôe_ègs
(

55 
a¢_TYPE_des¸ùt‹_s
 *
ty≥_des¸ùt‹
,

56 
size_t
 
°ru˘_Àngth
,

57 
èg_mode
,

58 
œ°_èg_f‹m
,

59 
bî_év_èg_t
 
èg
,

60 
a¢_≠p_c⁄sume_byãs_f
 *
c⁄sume_byãs_cb
,

61 *
≠p_key


64 #ifde‡
__˝lu•lus


	@F:\ss_asn1\module.asn1-1\module.asn1

1 --
Ex∑nded
 
ASN1
 
	gModuÀ
 'MAP-SupplementaryServiceOperations'

2 --
SIEMENS
 
	gASN
.1 
Compûî
 
	gR6
.31 (
	gProdu˘i⁄_6
.31)

3 -- 
	gD©e
: 2010-06-07 
Time
: 12:26:04

5 
MAP
-
SuµÀmíèrySîvi˚O≥øti⁄s
{ 0 
idítifõd
-
‹g™iz©i⁄
 (4Ë
ësi
 (0Ë
mobûeDomaö
 (0Ë
gsm
-
Nëw‹k
 (1Ë
moduÀs
 (3Ë
m≠
-SuµÀmíèrySîvi˚O≥øti⁄†(8Ë
vîsi⁄10
 (10) }

7 
DEFINITIONS


11 
BEGIN


13 
EXPORTS


14 
ªgi°îSS
,

15 
	gîa£SS
,

16 
	ga˘iv©eSS
,

17 
	gdó˘iv©eSS
,

18 
	göãºog©eSS
,

19 
	g¥o˚ssUn°ru˘uªdSS
-
	gReque°
,

20 
	gun°ru˘uªdSS
-
	gReque°
,

21 
	gun°ru˘uªdSS
-
	gNŸify
,

22 
	gªgi°îPassw‹d
,

23 
	ggëPassw‹d
,

24 
	gss
-
	gInvoˇti⁄NŸifiˇti⁄
,

25 
	gªgi°îCC
-
	gE¡ry
,

26 
	gîa£CC
-
	gE¡ry
;

29 
ªgi°îSS
 
	gOPERATION
 ::= {

30 
ARGUMENT
 
SEQUENCE
 {

31 
ss
-
Code
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

32 
basicSîvi˚
 
CHOICE
 {

33 
bóªrSîvi˚
 [2] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

34 
ãÀ£rvi˚
 [3] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) )} 
OPTIONAL
,

35 
f‹w¨dedToNumbî
 [4] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 .. 20 ) ) 
OPTIONAL
,

36 
f‹w¨dedToSubaddªss
 [6] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 .. 21 ) ) 
OPTIONAL
,

37 
noRïlyC⁄dôi⁄Time
 [5] 
IMPLICIT
 
INTEGER
 ( 5 .. 30 ) 
OPTIONAL
,

39 
deÁu…Pri‹ôy
 [7] 
IMPLICIT
 
INTEGER
 ( 0 .. 15 ) 
OPTIONAL
,

40 
nbrU£r
 [8] 
IMPLICIT
 
INTEGER
 ( 1 .. 7 ) 
OPTIONAL
,

41 
l⁄gFTN
-
Suµ‹ãd
 [9] 
IMPLICIT
 
NULL
 
OPTIONAL
}

42 
RESULT
 
CHOICE
 {

43 
f‹w¨dögInfo
 [0] 
IMPLICIT
 
SEQUENCE
 {

44 
ss
-
Code
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

45 
f‹w¨dögFótuªLi°
 
SEQUENCE
 ( 
SIZE
–1 .. 13 ) ) 
OF


46 
SEQUENCE
 {

47 
basicSîvi˚
 
CHOICE
 {

48 
bóªrSîvi˚
 [2] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

49 
ãÀ£rvi˚
 [3] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) )} 
OPTIONAL
,

50 
ss
-
Sètus
 [4] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

51 
f‹w¨dedToNumbî
 [5] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 .. 20 ) ) ( SIZE–1 .. 9 ) ) 
OPTIONAL
,

52 
f‹w¨dedToSubaddªss
 [8] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 .. 21 ) ) 
OPTIONAL
,

53 
f‹w¨dögO±i⁄s
 [6] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

54 
noRïlyC⁄dôi⁄Time
 [7] 
IMPLICIT
 
INTEGER
 ( 5 .. 30 ) 
OPTIONAL
,

56 
l⁄gF‹w¨dedToNumbî
 [9] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 .. 20 ) ) ( SIZE–1 .. 15 ) ) 
OPTIONAL
},

58 
ˇŒB¨rögInfo
 [1] 
IMPLICIT
 
SEQUENCE
 {

59 
ss
-
Code
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

60 
ˇŒB¨rögFótuªLi°
 
SEQUENCE
 ( 
SIZE
–1 .. 13 ) ) 
OF


61 
SEQUENCE
 {

62 
basicSîvi˚
 
CHOICE
 {

63 
bóªrSîvi˚
 [2] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

64 
ãÀ£rvi˚
 [3] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) )} 
OPTIONAL
,

65 
ss
-
Sètus
 [4] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

68 
ss
-
D©a
 [3] 
IMPLICIT
 
SEQUENCE
 {

69 
ss
-
Code
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

70 
ss
-
Sètus
 [4] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

71 
ss
-
Subs¸ùti⁄O±i⁄
 
CHOICE
 {

72 
˛iRe°ri˘i⁄O±i⁄
 [2] 
IMPLICIT
 
ENUMERATED
 {

73 
≥rm™ít
 ( 0 ),

74 
ãmp‹¨yDeÁu…Re°ri˘ed
 ( 1 ),

75 
ãmp‹¨yDeÁu…AŒowed
 ( 2 ) },

76 
ovîrideC©eg‹y
 [1] 
IMPLICIT
 
ENUMERATED
 {

77 
ovîrideE«bÀd
 ( 0 ),

78 
ovîrideDißbÀd
 ( 1 ) }} 
OPTIONAL
,

79 
basicSîvi˚GroupLi°
 
SEQUENCE
 ( 
SIZE
–1 .. 13 ) ) 
OF


80 
CHOICE
 {

81 
bóªrSîvi˚
 [2] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

82 
ãÀ£rvi˚
 [3] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) )} 
OPTIONAL
,

84 
deÁu…Pri‹ôy
 
INTEGER
 ( 0 .. 15 ) 
OPTIONAL
,

85 
nbrU£r
 [5] 
IMPLICIT
 
INTEGER
 ( 1 .. 7 ) 
OPTIONAL
}}

86 
ERRORS
 {

87 
sy°emFaûuª
 |

88 
d©aMissög
 |

89 
u√x≥˘edD©aVÆue
 |

90 
bóªrSîvi˚NŸProvisi⁄ed
 |

91 
ãÀ£rvi˚NŸProvisi⁄ed
 |

92 
ˇŒB¨ªd
 |

93 
ûÀgÆSS
-
O≥øti⁄
 |

94 
ss
-
Eº‹Sètus
 |

95 
ss
-
Incom∑tibûôy
 }

96 
CODE
 
loˇl
 : 10

99 
îa£SS
 
OPERATION
 ::= {

100 
ARGUMENT
 
SEQUENCE
 {

101 
ss
-
Code
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

102 
basicSîvi˚
 
CHOICE
 {

103 
bóªrSîvi˚
 [2] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

104 
ãÀ£rvi˚
 [3] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) )} 
OPTIONAL
,

106 
l⁄gFTN
-
Suµ‹ãd
 [4] 
IMPLICIT
 
NULL
 
OPTIONAL
}

107 
RESULT
 
CHOICE
 {

108 
f‹w¨dögInfo
 [0] 
IMPLICIT
 
SEQUENCE
 {

109 
ss
-
Code
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

110 
f‹w¨dögFótuªLi°
 
SEQUENCE
 ( 
SIZE
–1 .. 13 ) ) 
OF


111 
SEQUENCE
 {

112 
basicSîvi˚
 
CHOICE
 {

113 
bóªrSîvi˚
 [2] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

114 
ãÀ£rvi˚
 [3] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) )} 
OPTIONAL
,

115 
ss
-
Sètus
 [4] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

116 
f‹w¨dedToNumbî
 [5] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 .. 20 ) ) ( SIZE–1 .. 9 ) ) 
OPTIONAL
,

117 
f‹w¨dedToSubaddªss
 [8] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 .. 21 ) ) 
OPTIONAL
,

118 
f‹w¨dögO±i⁄s
 [6] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

119 
noRïlyC⁄dôi⁄Time
 [7] 
IMPLICIT
 
INTEGER
 ( 5 .. 30 ) 
OPTIONAL
,

121 
l⁄gF‹w¨dedToNumbî
 [9] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 .. 20 ) ) ( SIZE–1 .. 15 ) ) 
OPTIONAL
},

123 
ˇŒB¨rögInfo
 [1] 
IMPLICIT
 
SEQUENCE
 {

124 
ss
-
Code
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

125 
ˇŒB¨rögFótuªLi°
 
SEQUENCE
 ( 
SIZE
–1 .. 13 ) ) 
OF


126 
SEQUENCE
 {

127 
basicSîvi˚
 
CHOICE
 {

128 
bóªrSîvi˚
 [2] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

129 
ãÀ£rvi˚
 [3] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) )} 
OPTIONAL
,

130 
ss
-
Sètus
 [4] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

133 
ss
-
D©a
 [3] 
IMPLICIT
 
SEQUENCE
 {

134 
ss
-
Code
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

135 
ss
-
Sètus
 [4] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

136 
ss
-
Subs¸ùti⁄O±i⁄
 
CHOICE
 {

137 
˛iRe°ri˘i⁄O±i⁄
 [2] 
IMPLICIT
 
ENUMERATED
 {

138 
≥rm™ít
 ( 0 ),

139 
ãmp‹¨yDeÁu…Re°ri˘ed
 ( 1 ),

140 
ãmp‹¨yDeÁu…AŒowed
 ( 2 ) },

141 
ovîrideC©eg‹y
 [1] 
IMPLICIT
 
ENUMERATED
 {

142 
ovîrideE«bÀd
 ( 0 ),

143 
ovîrideDißbÀd
 ( 1 ) }} 
OPTIONAL
,

144 
basicSîvi˚GroupLi°
 
SEQUENCE
 ( 
SIZE
–1 .. 13 ) ) 
OF


145 
CHOICE
 {

146 
bóªrSîvi˚
 [2] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

147 
ãÀ£rvi˚
 [3] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) )} 
OPTIONAL
,

149 
deÁu…Pri‹ôy
 
INTEGER
 ( 0 .. 15 ) 
OPTIONAL
,

150 
nbrU£r
 [5] 
IMPLICIT
 
INTEGER
 ( 1 .. 7 ) 
OPTIONAL
}}

151 
ERRORS
 {

152 
sy°emFaûuª
 |

153 
d©aMissög
 |

154 
u√x≥˘edD©aVÆue
 |

155 
bóªrSîvi˚NŸProvisi⁄ed
 |

156 
ãÀ£rvi˚NŸProvisi⁄ed
 |

157 
ˇŒB¨ªd
 |

158 
ûÀgÆSS
-
O≥øti⁄
 |

159 
ss
-
Eº‹Sètus
 }

160 
CODE
 
loˇl
 : 11

163 
a˘iv©eSS
 
OPERATION
 ::= {

164 
ARGUMENT
 
SEQUENCE
 {

165 
ss
-
Code
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

166 
basicSîvi˚
 
CHOICE
 {

167 
bóªrSîvi˚
 [2] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

168 
ãÀ£rvi˚
 [3] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) )} 
OPTIONAL
,

170 
l⁄gFTN
-
Suµ‹ãd
 [4] 
IMPLICIT
 
NULL
 
OPTIONAL
}

171 
RESULT
 
CHOICE
 {

172 
f‹w¨dögInfo
 [0] 
IMPLICIT
 
SEQUENCE
 {

173 
ss
-
Code
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

174 
f‹w¨dögFótuªLi°
 
SEQUENCE
 ( 
SIZE
–1 .. 13 ) ) 
OF


175 
SEQUENCE
 {

176 
basicSîvi˚
 
CHOICE
 {

177 
bóªrSîvi˚
 [2] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

178 
ãÀ£rvi˚
 [3] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) )} 
OPTIONAL
,

179 
ss
-
Sètus
 [4] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

180 
f‹w¨dedToNumbî
 [5] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 .. 20 ) ) ( SIZE–1 .. 9 ) ) 
OPTIONAL
,

181 
f‹w¨dedToSubaddªss
 [8] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 .. 21 ) ) 
OPTIONAL
,

182 
f‹w¨dögO±i⁄s
 [6] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

183 
noRïlyC⁄dôi⁄Time
 [7] 
IMPLICIT
 
INTEGER
 ( 5 .. 30 ) 
OPTIONAL
,

185 
l⁄gF‹w¨dedToNumbî
 [9] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 .. 20 ) ) ( SIZE–1 .. 15 ) ) 
OPTIONAL
},

187 
ˇŒB¨rögInfo
 [1] 
IMPLICIT
 
SEQUENCE
 {

188 
ss
-
Code
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

189 
ˇŒB¨rögFótuªLi°
 
SEQUENCE
 ( 
SIZE
–1 .. 13 ) ) 
OF


190 
SEQUENCE
 {

191 
basicSîvi˚
 
CHOICE
 {

192 
bóªrSîvi˚
 [2] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

193 
ãÀ£rvi˚
 [3] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) )} 
OPTIONAL
,

194 
ss
-
Sètus
 [4] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

197 
ss
-
D©a
 [3] 
IMPLICIT
 
SEQUENCE
 {

198 
ss
-
Code
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

199 
ss
-
Sètus
 [4] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

200 
ss
-
Subs¸ùti⁄O±i⁄
 
CHOICE
 {

201 
˛iRe°ri˘i⁄O±i⁄
 [2] 
IMPLICIT
 
ENUMERATED
 {

202 
≥rm™ít
 ( 0 ),

203 
ãmp‹¨yDeÁu…Re°ri˘ed
 ( 1 ),

204 
ãmp‹¨yDeÁu…AŒowed
 ( 2 ) },

205 
ovîrideC©eg‹y
 [1] 
IMPLICIT
 
ENUMERATED
 {

206 
ovîrideE«bÀd
 ( 0 ),

207 
ovîrideDißbÀd
 ( 1 ) }} 
OPTIONAL
,

208 
basicSîvi˚GroupLi°
 
SEQUENCE
 ( 
SIZE
–1 .. 13 ) ) 
OF


209 
CHOICE
 {

210 
bóªrSîvi˚
 [2] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

211 
ãÀ£rvi˚
 [3] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) )} 
OPTIONAL
,

213 
deÁu…Pri‹ôy
 
INTEGER
 ( 0 .. 15 ) 
OPTIONAL
,

214 
nbrU£r
 [5] 
IMPLICIT
 
INTEGER
 ( 1 .. 7 ) 
OPTIONAL
}}

215 
ERRORS
 {

216 
sy°emFaûuª
 |

217 
d©aMissög
 |

218 
u√x≥˘edD©aVÆue
 |

219 
bóªrSîvi˚NŸProvisi⁄ed
 |

220 
ãÀ£rvi˚NŸProvisi⁄ed
 |

221 
ˇŒB¨ªd
 |

222 
ûÀgÆSS
-
O≥øti⁄
 |

223 
ss
-
Eº‹Sètus
 |

224 
ss
-
Subs¸ùti⁄Viﬁ©i⁄
 |

225 
ss
-
Incom∑tibûôy
 |

226 
√g©ivePW
-
Check
 |

227 
numbîOfPW
-
Aâem±sViﬁ©i⁄
 }

228 
CODE
 
loˇl
 : 12

231 
dó˘iv©eSS
 
OPERATION
 ::= {

232 
ARGUMENT
 
SEQUENCE
 {

233 
ss
-
Code
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

234 
basicSîvi˚
 
CHOICE
 {

235 
bóªrSîvi˚
 [2] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

236 
ãÀ£rvi˚
 [3] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) )} 
OPTIONAL
,

238 
l⁄gFTN
-
Suµ‹ãd
 [4] 
IMPLICIT
 
NULL
 
OPTIONAL
}

239 
RESULT
 
CHOICE
 {

240 
f‹w¨dögInfo
 [0] 
IMPLICIT
 
SEQUENCE
 {

241 
ss
-
Code
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

242 
f‹w¨dögFótuªLi°
 
SEQUENCE
 ( 
SIZE
–1 .. 13 ) ) 
OF


243 
SEQUENCE
 {

244 
basicSîvi˚
 
CHOICE
 {

245 
bóªrSîvi˚
 [2] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

246 
ãÀ£rvi˚
 [3] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) )} 
OPTIONAL
,

247 
ss
-
Sètus
 [4] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

248 
f‹w¨dedToNumbî
 [5] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 .. 20 ) ) ( SIZE–1 .. 9 ) ) 
OPTIONAL
,

249 
f‹w¨dedToSubaddªss
 [8] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 .. 21 ) ) 
OPTIONAL
,

250 
f‹w¨dögO±i⁄s
 [6] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

251 
noRïlyC⁄dôi⁄Time
 [7] 
IMPLICIT
 
INTEGER
 ( 5 .. 30 ) 
OPTIONAL
,

253 
l⁄gF‹w¨dedToNumbî
 [9] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 .. 20 ) ) ( SIZE–1 .. 15 ) ) 
OPTIONAL
},

255 
ˇŒB¨rögInfo
 [1] 
IMPLICIT
 
SEQUENCE
 {

256 
ss
-
Code
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

257 
ˇŒB¨rögFótuªLi°
 
SEQUENCE
 ( 
SIZE
–1 .. 13 ) ) 
OF


258 
SEQUENCE
 {

259 
basicSîvi˚
 
CHOICE
 {

260 
bóªrSîvi˚
 [2] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

261 
ãÀ£rvi˚
 [3] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) )} 
OPTIONAL
,

262 
ss
-
Sètus
 [4] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

265 
ss
-
D©a
 [3] 
IMPLICIT
 
SEQUENCE
 {

266 
ss
-
Code
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

267 
ss
-
Sètus
 [4] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

268 
ss
-
Subs¸ùti⁄O±i⁄
 
CHOICE
 {

269 
˛iRe°ri˘i⁄O±i⁄
 [2] 
IMPLICIT
 
ENUMERATED
 {

270 
≥rm™ít
 ( 0 ),

271 
ãmp‹¨yDeÁu…Re°ri˘ed
 ( 1 ),

272 
ãmp‹¨yDeÁu…AŒowed
 ( 2 ) },

273 
ovîrideC©eg‹y
 [1] 
IMPLICIT
 
ENUMERATED
 {

274 
ovîrideE«bÀd
 ( 0 ),

275 
ovîrideDißbÀd
 ( 1 ) }} 
OPTIONAL
,

276 
basicSîvi˚GroupLi°
 
SEQUENCE
 ( 
SIZE
–1 .. 13 ) ) 
OF


277 
CHOICE
 {

278 
bóªrSîvi˚
 [2] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

279 
ãÀ£rvi˚
 [3] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) )} 
OPTIONAL
,

281 
deÁu…Pri‹ôy
 
INTEGER
 ( 0 .. 15 ) 
OPTIONAL
,

282 
nbrU£r
 [5] 
IMPLICIT
 
INTEGER
 ( 1 .. 7 ) 
OPTIONAL
}}

283 
ERRORS
 {

284 
sy°emFaûuª
 |

285 
d©aMissög
 |

286 
u√x≥˘edD©aVÆue
 |

287 
bóªrSîvi˚NŸProvisi⁄ed
 |

288 
ãÀ£rvi˚NŸProvisi⁄ed
 |

289 
ˇŒB¨ªd
 |

290 
ûÀgÆSS
-
O≥øti⁄
 |

291 
ss
-
Eº‹Sètus
 |

292 
ss
-
Subs¸ùti⁄Viﬁ©i⁄
 |

293 
√g©ivePW
-
Check
 |

294 
numbîOfPW
-
Aâem±sViﬁ©i⁄
 }

295 
CODE
 
loˇl
 : 13

298 
öãºog©eSS
 
OPERATION
 ::= {

299 
ARGUMENT
 
SEQUENCE
 {

300 
ss
-
Code
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

301 
basicSîvi˚
 
CHOICE
 {

302 
bóªrSîvi˚
 [2] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

303 
ãÀ£rvi˚
 [3] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) )} 
OPTIONAL
,

305 
l⁄gFTN
-
Suµ‹ãd
 [4] 
IMPLICIT
 
NULL
 
OPTIONAL
}

306 
RESULT
 
CHOICE
 {

307 
ss
-
Sètus
 [0] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

308 
basicSîvi˚GroupLi°
 [2] 
IMPLICIT
 
SEQUENCE
 ( 
SIZE
–1 .. 13 ) ) 
OF


309 
CHOICE
 {

310 
bóªrSîvi˚
 [2] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

311 
ãÀ£rvi˚
 [3] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) )},

312 
f‹w¨dögFótuªLi°
 [3] 
IMPLICIT
 
SEQUENCE
 ( 
SIZE
–1 .. 13 ) ) 
OF


313 
SEQUENCE
 {

314 
basicSîvi˚
 
CHOICE
 {

315 
bóªrSîvi˚
 [2] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

316 
ãÀ£rvi˚
 [3] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) )} 
OPTIONAL
,

317 
ss
-
Sètus
 [4] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

318 
f‹w¨dedToNumbî
 [5] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 .. 20 ) ) ( SIZE–1 .. 9 ) ) 
OPTIONAL
,

319 
f‹w¨dedToSubaddªss
 [8] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 .. 21 ) ) 
OPTIONAL
,

320 
f‹w¨dögO±i⁄s
 [6] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

321 
noRïlyC⁄dôi⁄Time
 [7] 
IMPLICIT
 
INTEGER
 ( 5 .. 30 ) 
OPTIONAL
,

323 
l⁄gF‹w¨dedToNumbî
 [9] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 .. 20 ) ) ( SIZE–1 .. 15 ) ) 
OPTIONAL
},

324 
gíîicSîvi˚Info
 [4] 
IMPLICIT
 
SEQUENCE
 {

325 
ss
-
Sètus
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

326 
˛iRe°ri˘i⁄O±i⁄
 
ENUMERATED
 {

327 
≥rm™ít
 ( 0 ),

328 
ãmp‹¨yDeÁu…Re°ri˘ed
 ( 1 ),

329 
ãmp‹¨yDeÁu…AŒowed
 ( 2 ) } 
OPTIONAL
,

331 
maximumE¡ôÀdPri‹ôy
 [0] 
IMPLICIT
 
INTEGER
 ( 0 .. 15 ) 
OPTIONAL
,

332 
deÁu…Pri‹ôy
 [1] 
IMPLICIT
 
INTEGER
 ( 0 .. 15 ) 
OPTIONAL
,

333 
ccbs
-
FótuªLi°
 [2] 
IMPLICIT
 
SEQUENCE
 ( 
SIZE
–1 .. 5 ) ) 
OF


334 
SEQUENCE
 {

335 
ccbs
-
Index
 [0] 
IMPLICIT
 
INTEGER
 ( 1 .. 5 ) 
OPTIONAL
,

336 
b
-
subs¸ibîNumbî
 [1] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 .. 20 ) ) ( SIZE–1 .. 9 ) ) 
OPTIONAL
,

337 
b
-
subs¸ibîSubaddªss
 [2] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 .. 21 ) ) 
OPTIONAL
,

338 
basicSîvi˚Group
 [3] 
CHOICE
 {

339 
bóªrSîvi˚
 [2] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

340 
ãÀ£rvi˚
 [3] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) )} 
OPTIONAL
,

341 ... } 
OPTIONAL
,

342 
nbrSB
 [3] 
IMPLICIT
 
INTEGER
 ( 2 .. 7 ) 
OPTIONAL
,

343 
nbrU£r
 [4] 
IMPLICIT
 
INTEGER
 ( 1 .. 7 ) 
OPTIONAL
,

344 
nbrSN
 [5] 
IMPLICIT
 
INTEGER
 ( 1 .. 7 ) 
OPTIONAL
}}

345 
ERRORS
 {

346 
sy°emFaûuª
 |

347 
d©aMissög
 |

348 
u√x≥˘edD©aVÆue
 |

349 
bóªrSîvi˚NŸProvisi⁄ed
 |

350 
ãÀ£rvi˚NŸProvisi⁄ed
 |

351 
ˇŒB¨ªd
 |

352 
ûÀgÆSS
-
O≥øti⁄
 |

353 
ss
-
NŸAvaûabÀ
 }

354 
CODE
 
loˇl
 : 14

357 
¥o˚ssUn°ru˘uªdSS
-
Reque°
 
OPERATION
 ::= {

358 
ARGUMENT
 
SEQUENCE
 {

359 
ussd
-
D©aCodögScheme
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

360 
ussd
-
Såög
 
OCTET
 
STRING
 ( 
SIZE
( 1 .. 160 ) ),

362 
ÆîtögP©ã∫
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

363 
msisdn
 [0] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 .. 20 ) ) ( SIZE–1 .. 9 ) ) 
OPTIONAL
}

364 
RESULT
 
SEQUENCE
 {

365 
ussd
-
D©aCodögScheme
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

366 
ussd
-
Såög
 
OCTET
 
STRING
 ( 
SIZE
( 1 .. 160 ) ),

368 
ERRORS
 {

369 
sy°emFaûuª
 |

370 
d©aMissög
 |

371 
u√x≥˘edD©aVÆue
 |

372 
unknownAÕhabë
 |

373 
ˇŒB¨ªd
 }

374 
CODE
 
loˇl
 : 59

377 
un°ru˘uªdSS
-
Reque°
 
OPERATION
 ::= {

378 
ARGUMENT
 
SEQUENCE
 {

379 
ussd
-
D©aCodögScheme
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

380 
ussd
-
Såög
 
OCTET
 
STRING
 ( 
SIZE
( 1 .. 160 ) ),

382 
ÆîtögP©ã∫
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

383 
msisdn
 [0] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 .. 20 ) ) ( SIZE–1 .. 9 ) ) 
OPTIONAL
}

384 
RESULT
 
SEQUENCE
 {

385 
ussd
-
D©aCodögScheme
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

386 
ussd
-
Såög
 
OCTET
 
STRING
 ( 
SIZE
( 1 .. 160 ) ),

388 
ERRORS
 {

389 
sy°emFaûuª
 |

390 
d©aMissög
 |

391 
u√x≥˘edD©aVÆue
 |

392 
ab£¡Subs¸ibî
 |

393 
ûÀgÆSubs¸ibî
 |

394 
ûÀgÆEquùmít
 |

395 
unknownAÕhabë
 |

396 
ussd
-
Busy
 }

397 
CODE
 
loˇl
 : 60

400 
un°ru˘uªdSS
-
NŸify
 
OPERATION
 ::= {

401 
ARGUMENT
 
SEQUENCE
 {

402 
ussd
-
D©aCodögScheme
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

403 
ussd
-
Såög
 
OCTET
 
STRING
 ( 
SIZE
( 1 .. 160 ) ),

405 
ÆîtögP©ã∫
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

406 
msisdn
 [0] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 .. 20 ) ) ( SIZE–1 .. 9 ) ) 
OPTIONAL
}

407 
RETURN
 
RESULT
 
TRUE


408 
ERRORS
 {

409 
sy°emFaûuª
 |

410 
d©aMissög
 |

411 
u√x≥˘edD©aVÆue
 |

412 
ab£¡Subs¸ibî
 |

413 
ûÀgÆSubs¸ibî
 |

414 
ûÀgÆEquùmít
 |

415 
unknownAÕhabë
 |

416 
ussd
-
Busy
 }

417 
CODE
 
loˇl
 : 61

420 
ªgi°îPassw‹d
 
OPERATION
 ::= {

421 
ARGUMENT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) )

422 
RESULT
 
NumîicSåög
 ( 
FROM
 ("0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9" )Ë(
SIZE
( 4 ) )

423 
ERRORS
 {

424 
sy°emFaûuª
 |

425 
d©aMissög
 |

426 
u√x≥˘edD©aVÆue
 |

427 
ˇŒB¨ªd
 |

428 
ss
-
Subs¸ùti⁄Viﬁ©i⁄
 |

429 
pw
-
Regi°øti⁄Faûuª
 |

430 
√g©ivePW
-
Check
 |

431 
numbîOfPW
-
Aâem±sViﬁ©i⁄
 }

432 
CODE
 
loˇl
 : 17

435 
gëPassw‹d
 
OPERATION
 ::= {

436 
ARGUMENT
 
ENUMERATED
 {

437 
íãrPW
 ( 0 ),

438 
íãrNewPW
 ( 1 ),

439 
íãrNewPW
-
Agaö
 ( 2 ) }

440 
RESULT
 
NumîicSåög
 ( 
FROM
 ("0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9" )Ë(
SIZE
( 4 ) )

441 
CODE
 
loˇl
 : 18

444 
ss
-
Invoˇti⁄NŸifiˇti⁄
 
OPERATION
 ::= {

445 
ARGUMENT
 
SEQUENCE
 {

446 
imsi
 [0] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 3 .. 8 ) ),

447 
msisdn
 [1] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 .. 20 ) ) ( SIZE( 1 .. 9 ) ),

448 
ss
-
Evít
 [2] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

449 
ss
-
EvítS≥cifiˇti⁄
 [3] 
IMPLICIT
 
SEQUENCE
 ( 
SIZE
–1 .. 2 ) ) 
OF


450 
OCTET
 
STRING
 ( 
SIZE
–1 .. 20 ) ) 
OPTIONAL
,

451 
exãnsi⁄C⁄èöî
 [4] 
IMPLICIT
 
SEQUENCE
 {

452 
¥iv©eExãnsi⁄Li°
 [0] 
IMPLICIT
 
SEQUENCE
 ( 
SIZE
–1 .. 10 ) ) 
OF


453 
SEQUENCE
 {

454 
extId
 
MAP
-
EXTENSION
 .&
exãnsi⁄Id
 ( {

457 
extTy≥
 
MAP
-
EXTENSION
 .&
Exãnsi⁄Ty≥
 ( {

459 ...} { @
extId
 } ) 
OPTIONAL
} OPTIONAL,

460 
pcs
-
Exãnsi⁄s
 [1] 
IMPLICIT
 
SEQUENCE
 {

461 ... } 
OPTIONAL
,

462 ... } 
OPTIONAL
,

464 
b
-
subs¸ibîNumbî
 [5] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 .. 20 ) ) ( SIZE–1 .. 9 ) ) 
OPTIONAL
,

465 
ccbs
-
Reque°Sèã
 [6] 
IMPLICIT
 
ENUMERATED
 {

466 
ªque°
 ( 0 ),

467 
ªˇŒ
 ( 1 ),

468 
a˘ive
 ( 2 ),

469 
com∂ëed
 ( 3 ),

470 
su•íded
 ( 4 ),

471 
‰ozí
 ( 5 ),

472 
dñëed
 ( 6 ) } 
OPTIONAL
}

473 
RESULT
 
SEQUENCE
 {

474 
exãnsi⁄C⁄èöî
 
SEQUENCE
 {

475 
¥iv©eExãnsi⁄Li°
 [0] 
IMPLICIT
 
SEQUENCE
 ( 
SIZE
–1 .. 10 ) ) 
OF


476 
SEQUENCE
 {

477 
extId
 
MAP
-
EXTENSION
 .&
exãnsi⁄Id
 ( {

480 
extTy≥
 
MAP
-
EXTENSION
 .&
Exãnsi⁄Ty≥
 ( {

482 ...} { @
extId
 } ) 
OPTIONAL
} OPTIONAL,

483 
pcs
-
Exãnsi⁄s
 [1] 
IMPLICIT
 
SEQUENCE
 {

484 ... } 
OPTIONAL
,

485 ... } 
OPTIONAL
,

487 
ERRORS
 {

488 
d©aMissög
 |

489 
u√x≥˘edD©aVÆue
 |

490 
unknownSubs¸ibî
 }

491 
CODE
 
loˇl
 : 72

494 
ªgi°îCC
-
E¡ry
 
OPERATION
 ::= {

495 
ARGUMENT
 
SEQUENCE
 {

496 
ss
-
Code
 [0] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

497 
ccbs
-
D©a
 [1] 
IMPLICIT
 
SEQUENCE
 {

498 
ccbs
-
Fótuª
 [0] 
IMPLICIT
 
SEQUENCE
 {

499 
ccbs
-
Index
 [0] 
IMPLICIT
 
INTEGER
 ( 1 .. 5 ) 
OPTIONAL
,

500 
b
-
subs¸ibîNumbî
 [1] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 .. 20 ) ) ( SIZE–1 .. 9 ) ) 
OPTIONAL
,

501 
b
-
subs¸ibîSubaddªss
 [2] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 .. 21 ) ) 
OPTIONAL
,

502 
basicSîvi˚Group
 [3] 
CHOICE
 {

503 
bóªrSîvi˚
 [2] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

504 
ãÀ£rvi˚
 [3] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) )} 
OPTIONAL
,

506 
å™¶©edB
-
Numbî
 [1] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 .. 20 ) ) ( SIZE( 1 .. 9 ) ),

507 
£rvi˚Indiˇt‹
 [2] 
IMPLICIT
 
BIT
 
STRING
 {

508 
˛ú
-
övoked
 (0 ),

509 
ˇmñ
-
övoked
 (1 )} ( 
SIZE
–2 .. 32 ) ) 
OPTIONAL
,

510 
ˇŒInfo
 [3] 
IMPLICIT
 
SEQUENCE
 {

511 
¥ŸocﬁId
 
ENUMERATED
 {

512 
gsm
-0408 ( 1 ),

513 
gsm
-0806 ( 2 ),

514 
gsm
-
BSSMAP
 ( 3 ),

515 
ës
-300102-1 ( 4 ) },

516 
sig«lInfo
 
OCTET
 
STRING
 ( 
SIZE
( 1 .. 200 ) ),

517 
exãnsi⁄C⁄èöî
 
SEQUENCE
 {

518 
¥iv©eExãnsi⁄Li°
 [0] 
IMPLICIT
 
SEQUENCE
 ( 
SIZE
–1 .. 10 ) ) 
OF


519 
SEQUENCE
 {

520 
extId
 
MAP
-
EXTENSION
 .&
exãnsi⁄Id
 ( {

523 
extTy≥
 
MAP
-
EXTENSION
 .&
Exãnsi⁄Ty≥
 ( {

525 ...} { @
extId
 } ) 
OPTIONAL
} OPTIONAL,

526 
pcs
-
Exãnsi⁄s
 [1] 
IMPLICIT
 
SEQUENCE
 {

527 ... } 
OPTIONAL
,

528 ... } 
OPTIONAL
,

530 
√tw‹kSig«lInfo
 [4] 
IMPLICIT
 
SEQUENCE
 {

531 
¥ŸocﬁId
 
ENUMERATED
 {

532 
gsm
-0408 ( 1 ),

533 
gsm
-0806 ( 2 ),

534 
gsm
-
BSSMAP
 ( 3 ),

535 
ës
-300102-1 ( 4 ) },

536 
sig«lInfo
 
OCTET
 
STRING
 ( 
SIZE
( 1 .. 200 ) ),

537 
exãnsi⁄C⁄èöî
 
SEQUENCE
 {

538 
¥iv©eExãnsi⁄Li°
 [0] 
IMPLICIT
 
SEQUENCE
 ( 
SIZE
–1 .. 10 ) ) 
OF


539 
SEQUENCE
 {

540 
extId
 
MAP
-
EXTENSION
 .&
exãnsi⁄Id
 ( {

543 
extTy≥
 
MAP
-
EXTENSION
 .&
Exãnsi⁄Ty≥
 ( {

545 ...} { @
extId
 } ) 
OPTIONAL
} OPTIONAL,

546 
pcs
-
Exãnsi⁄s
 [1] 
IMPLICIT
 
SEQUENCE
 {

547 ... } 
OPTIONAL
,

548 ... } 
OPTIONAL
,

550 ... } 
OPTIONAL
,

552 
RESULT
 
SEQUENCE
 {

553 
ccbs
-
Fótuª
 [0] 
IMPLICIT
 
SEQUENCE
 {

554 
ccbs
-
Index
 [0] 
IMPLICIT
 
INTEGER
 ( 1 .. 5 ) 
OPTIONAL
,

555 
b
-
subs¸ibîNumbî
 [1] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 .. 20 ) ) ( SIZE–1 .. 9 ) ) 
OPTIONAL
,

556 
b
-
subs¸ibîSubaddªss
 [2] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 .. 21 ) ) 
OPTIONAL
,

557 
basicSîvi˚Group
 [3] 
CHOICE
 {

558 
bóªrSîvi˚
 [2] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

559 
ãÀ£rvi˚
 [3] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) )} 
OPTIONAL
,

560 ... } 
OPTIONAL
,

562 
ERRORS
 {

563 
sy°emFaûuª
 |

564 
d©aMissög
 |

565 
u√x≥˘edD©aVÆue
 |

566 
ˇŒB¨ªd
 |

567 
ûÀgÆSS
-
O≥øti⁄
 |

568 
ss
-
Eº‹Sètus
 |

569 
ss
-
Incom∑tibûôy
 |

570 
sh‹tTîmDíül
 |

571 
l⁄gTîmDíül
 |

572 
ÁcûôyNŸSuµ‹ãd
 }

573 
CODE
 
loˇl
 : 76

576 
îa£CC
-
E¡ry
 
OPERATION
 ::= {

577 
ARGUMENT
 
SEQUENCE
 {

578 
ss
-
Code
 [0] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

579 
ccbs
-
Index
 [1] 
IMPLICIT
 
INTEGER
 ( 1 .. 5 ) 
OPTIONAL
,

581 
RESULT
 
SEQUENCE
 {

582 
ss
-
Code
 [0] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
( 1 ) ),

583 
ss
-
Sètus
 [1] 
IMPLICIT
 
OCTET
 
STRING
 ( 
SIZE
–1 ) ) 
OPTIONAL
,

585 
ERRORS
 {

586 
sy°emFaûuª
 |

587 
d©aMissög
 |

588 
u√x≥˘edD©aVÆue
 |

589 
ˇŒB¨ªd
 |

590 
ûÀgÆSS
-
O≥øti⁄
 |

591 
ss
-
Eº‹Sètus
 }

592 
CODE
 
loˇl
 : 77

595 
END


	@F:\ss_asn1\module.asn1-1\per_decoder.c

1 
	~<a¢_≠∂iˇti⁄.h
>

2 
	~<a¢_öã∫Æ.h
>

3 
	~<≥r_decodî.h
>

10 
a¢_dec_rvÆ_t


11 
	$u≥r_decode_com∂ëe
(
a¢_codec_˘x_t
 *
›t_codec_˘x
, 
a¢_TYPE_des¸ùt‹_t
 *
td
, **
•å
, c⁄° *
buf„r
, 
size_t
 
size
) {

12 
a¢_dec_rvÆ_t
 
rvÆ
;

14 
rvÆ
 = 
	`u≥r_decode
(
›t_codec_˘x
, 
td
, 
•å
, 
buf„r
, 
size
, 0, 0);

15 if(
rvÆ
.
c⁄sumed
) {

20 
rvÆ
.
c⁄sumed
 += 7;

21 
rvÆ
.
c⁄sumed
 >>= 3;

22 } if(
rvÆ
.
code
 =
RC_OK
) {

23 if(
size
) {

24 if(((
uöt8_t
 *)
buf„r
)[0] == 0) {

25 
rvÆ
.
c⁄sumed
 = 1;

27 
	`ASN_DEBUG
("Expecting single zeroed byte");

28 
rvÆ
.
code
 = 
RC_FAIL
;

32 
rvÆ
.
code
 = 
RC_WMORE
;

36  
rvÆ
;

37 
	}
}

39 
a¢_dec_rvÆ_t


40 
	$u≥r_decode
(
a¢_codec_˘x_t
 *
›t_codec_˘x
, 
a¢_TYPE_des¸ùt‹_t
 *
td
, **
•å
, c⁄° *
buf„r
, 
size_t
 
size
, 
skù_bôs
, 
unu£d_bôs
) {

41 
a¢_codec_˘x_t
 
s_codec_˘x
;

42 
a¢_dec_rvÆ_t
 
rvÆ
;

43 
a¢_≥r_d©a_t
 
pd
;

45 if(
skù_bôs
 < 0 || skip_bits > 7

46 || 
unu£d_bôs
 < 0 || unused_bits > 7

47 || (
unu£d_bôs
 > 0 && !
size
))

48 
_ASN_DECODE_FAILED
;

54 if(
›t_codec_˘x
) {

55 if(
›t_codec_˘x
->
max_°ack_size
) {

56 
s_codec_˘x
 = *
›t_codec_˘x
;

57 
›t_codec_˘x
 = &
s_codec_˘x
;

61 
	`mem£t
(&
s_codec_˘x
, 0, (s_codec_ctx));

62 
s_codec_˘x
.
max_°ack_size
 = 
_ASN_DEFAULT_STACK_MAX
;

63 
›t_codec_˘x
 = &
s_codec_˘x
;

67 
	`mem£t
(&
pd
, 0, (pd));

68 
pd
.
buf„r
 = (c⁄° 
uöt8_t
 *)buffer;

69 
pd
.
nboff
 = 
skù_bôs
;

70 
pd
.
nbôs
 = 8 * 
size
 - 
unu£d_bôs
;

71 if(
pd
.
nboff
 >Öd.
nbôs
)

72 
_ASN_DECODE_FAILED
;

77 if(!
td
->
u≥r_decodî
)

78 
_ASN_DECODE_FAILED
;

79 
rvÆ
 = 
td
->
	`u≥r_decodî
(
›t_codec_˘x
,Åd, 0, 
•å
, &
pd
);

80 if(
rvÆ
.
code
 =
RC_OK
) {

82 
rvÆ
.
c⁄sumed
 = ((
pd
.
buf„r
 - (c⁄° 
uöt8_t
 *)buffer) << 3)

83 + 
pd
.
nboff
 - 
skù_bôs
;

84 
	`ASN_DEBUG
("PER decoding consumed %d, counted %d",

85 
rvÆ
.
c⁄sumed
, 
pd
.
moved
);

86 
	`as£π
(
rvÆ
.
c⁄sumed
 =
pd
.
moved
);

89 
rvÆ
.
c⁄sumed
 = 0;

91  
rvÆ
;

92 
	}
}

	@F:\ss_asn1\module.asn1-1\per_decoder.h

5 #i‚def 
_PER_DECODER_H_


6 
	#_PER_DECODER_H_


	)

8 
	~<a¢_≠∂iˇti⁄.h
>

9 
	~<≥r_suµ‹t.h
>

11 #ifde‡
__˝lu•lus


15 
a¢_TYPE_des¸ùt‹_s
;

21 
a¢_dec_rvÆ_t
 
u≥r_decode_com∂ëe
(
a¢_codec_˘x_s
 *
›t_codec_˘x
,

22 
a¢_TYPE_des¸ùt‹_s
 *
ty≥_des¸ùt‹
,

23 **
°ru˘_±r
,

24 c⁄° *
buf„r
,

25 
size_t
 
size


32 
a¢_dec_rvÆ_t
 
u≥r_decode
(
a¢_codec_˘x_s
 *
›t_codec_˘x
,

33 
a¢_TYPE_des¸ùt‹_s
 *
ty≥_des¸ùt‹
,

34 **
°ru˘_±r
,

35 c⁄° *
buf„r
,

36 
size_t
 
size
,

37 
skù_bôs
,

38 
unu£d_bôs


45 
a¢_dec_rvÆ_t
 (
	t≥r_ty≥_decodî_f
)(
	ta¢_codec_˘x_t
 *
	t›t_codec_˘x
,

46 
	ta¢_TYPE_des¸ùt‹_s
 *
	tty≥_des¸ùt‹
,

47 
	ta¢_≥r_c⁄°øöts_t
 *
	tc⁄°øöts
,

48 **
	t°ru˘_±r
,

49 
	ta¢_≥r_d©a_t
 *
	t≥r_d©a


52 #ifde‡
__˝lu•lus


	@F:\ss_asn1\module.asn1-1\per_encoder.c

1 
	~<a¢_≠∂iˇti⁄.h
>

2 
	~<a¢_öã∫Æ.h
>

3 
	~<≥r_ícodî.h
>

5 
a¢_íc_rvÆ_t
 
u≥r_ícode_öã∫Æ
(
a¢_TYPE_des¸ùt‹_t
 *
td
, 
a¢_≥r_c⁄°øöts_t
 *, *
•å
, 
a¢_≠p_c⁄sume_byãs_f
 *
cb
, *
≠p_key
);

7 
a¢_íc_rvÆ_t


8 
	$u≥r_ícode
(
a¢_TYPE_des¸ùt‹_t
 *
td
, *
•å
, 
a¢_≠p_c⁄sume_byãs_f
 *
cb
, *
≠p_key
) {

9  
	`u≥r_ícode_öã∫Æ
(
td
, 0, 
•å
, 
cb
, 
≠p_key
);

10 
	}
}

15 
	síc_to_buf_¨g
 {

16 *
	mbuf„r
;

17 
size_t
 
	mÀ·
;

18 } 
	tíc_to_buf_¨g
;

19 
	$ícode_to_buf„r_cb
(c⁄° *
buf„r
, 
size_t
 
size
, *
key
) {

20 
íc_to_buf_¨g
 *
¨g
 = (íc_to_buf_¨g *)
key
;

22 if(
¨g
->
À·
 < 
size
)

25 
	`mem˝y
(
¨g
->
buf„r
, buf„r, 
size
);

26 
¨g
->
buf„r
 = ((*Ôrg->buf„rË+ 
size
;

27 
¨g
->
À·
 -
size
;

30 
	}
}

32 
a¢_íc_rvÆ_t


33 
	$u≥r_ícode_to_buf„r
(
a¢_TYPE_des¸ùt‹_t
 *
td
, *
•å
, *
buf„r
, 
size_t
 
buf„r_size
) {

34 
íc_to_buf_¨g
 
key
;

36 
key
.
buf„r
 = buffer;

37 
key
.
À·
 = 
buf„r_size
;

39 if(
td
Ë
	`ASN_DEBUG
("Encodög \"%s\" usög UNALIGNED PER",Åd->
«me
);

41  
	`u≥r_ícode_öã∫Æ
(
td
, 0, 
•å
, 
ícode_to_buf„r_cb
, &
key
);

42 
	}
}

44 
	síc_dyn_¨g
 {

45 *
	mbuf„r
;

46 
size_t
 
	mÀngth
;

47 
size_t
 
	mÆloˇãd
;

48 } 
	tíc_dyn_¨g
;

50 
	$ícode_dyn_cb
(c⁄° *
buf„r
, 
size_t
 
size
, *
key
) {

51 
íc_dyn_¨g
 *
¨g
 = 
key
;

52 if(
¨g
->
Àngth
 + 
size
 >¨g->
Æloˇãd
) {

53 *
p
;

54 
¨g
->
Æloˇãd
 =árg->Æloˇãd ? (¨g->Æloˇãd << 2Ë: 
size
;

55 
p
 = 
	`REALLOC
(
¨g
->
buf„r
,árg->
Æloˇãd
);

56 if(!
p
) {

57 
	`FREEMEM
(
¨g
->
buf„r
);

58 
	`mem£t
(
¨g
, 0, (*arg));

61 
¨g
->
buf„r
 = 
p
;

63 
	`mem˝y
(((*)
¨g
->
buf„r
Ë+árg->
Àngth
, buf„r, 
size
);

64 
¨g
->
Àngth
 +
size
;

66 
	}
}

67 
ssize_t


68 
	$u≥r_ícode_to_√w_buf„r
(
a¢_TYPE_des¸ùt‹_t
 *
td
, 
a¢_≥r_c⁄°øöts_t
 *
c⁄°øöts
, *
•å
, **
buf„r_r
) {

69 
a¢_íc_rvÆ_t
 
î
;

70 
íc_dyn_¨g
 
key
;

72 
	`mem£t
(&
key
, 0, (key));

74 
î
 = 
	`u≥r_ícode_öã∫Æ
(
td
, 
c⁄°øöts
, 
•å
, 
ícode_dyn_cb
, &
key
);

75 
î
.
ícoded
) {

77 
	`FREEMEM
(
key
.
buf„r
);

80 
	`FREEMEM
(
key
.
buf„r
);

81 
key
.
buf„r
 = 
	`MALLOC
(1);

82 if(
key
.
buf„r
) {

83 *(*)
key
.
buf„r
 = '\0';

84 *
buf„r_r
 = 
key
.
buf„r
;

90 *
buf„r_r
 = 
key
.
buf„r
;

91 
	`ASN_DEBUG
("Com∂ëêícoded i¿%d bôs", 
î
.
ícoded
);

92  ((
î
.
ícoded
 + 7) >> 3);

94 
	}
}

102 
	$_u≥r_ícode_Êush_ouç
(
a¢_≥r_ouç_t
 *
po
) {

103 
uöt8_t
 *
buf
;

105 if(
po
->
nboff
 =0 &&Öo->
buf„r
 =po->
tmp•a˚
)

108 
buf
 = 
po
->
buf„r
 + (po->
nboff
 >> 3);

110 if(
po
->
nboff
 & 0x07) {

111 
buf
[0] &0xf‡<< (8 - (
po
->
nboff
 & 0x07));

112 
buf
++;

115  
po
->
	`ouçî
’o->
tmp•a˚
, 
buf
 -Öo->tmp•a˚,Öo->
›_key
);

116 
	}
}

118 
a¢_íc_rvÆ_t


119 
	$u≥r_ícode_öã∫Æ
(
a¢_TYPE_des¸ùt‹_t
 *
td
, 
a¢_≥r_c⁄°øöts_t
 *
c⁄°øöts
, *
•å
, 
a¢_≠p_c⁄sume_byãs_f
 *
cb
, *
≠p_key
) {

120 
a¢_≥r_ouç_t
 
po
;

121 
a¢_íc_rvÆ_t
 
î
;

126 if(!
td
 || !td->
u≥r_ícodî
)

127 
_ASN_ENCODE_FAILED
;

129 
po
.
buf„r
 =Öo.
tmp•a˚
;

130 
po
.
nboff
 = 0;

131 
po
.
nbôs
 = 8 * ’o.
tmp•a˚
);

132 
po
.
ouçî
 = 
cb
;

133 
po
.
›_key
 = 
≠p_key
;

134 
po
.
Êushed_byãs
 = 0;

136 
î
 = 
td
->
	`u≥r_ícodî
—d, 
c⁄°øöts
, 
•å
, &
po
);

137 if(
î
.
ícoded
 != -1) {

138 
size_t
 
bôs_to_Êush
;

140 
bôs_to_Êush
 = ((
po
.
buf„r
 -Öo.
tmp•a˚
Ë<< 3Ë+Öo.
nboff
;

143 
î
.
ícoded
 = (
po
.
Êushed_byãs
 << 3Ë+ 
bôs_to_Êush
;

145 if(
	`_u≥r_ícode_Êush_ouç
(&
po
))

146 
_ASN_ENCODE_FAILED
;

149  
î
;

150 
	}
}

	@F:\ss_asn1\module.asn1-1\per_encoder.h

5 #i‚def 
_PER_ENCODER_H_


6 
	#_PER_ENCODER_H_


	)

8 
	~<a¢_≠∂iˇti⁄.h
>

9 
	~<≥r_suµ‹t.h
>

11 #ifde‡
__˝lu•lus


15 
a¢_TYPE_des¸ùt‹_s
;

23 
a¢_íc_rvÆ_t
 
u≥r_ícode
(
a¢_TYPE_des¸ùt‹_s
 *
ty≥_des¸ùt‹
,

24 *
°ru˘_±r
,

25 
a¢_≠p_c⁄sume_byãs_f
 *
c⁄sume_byãs_cb
,

26 *
≠p_key


34 
a¢_íc_rvÆ_t
 
u≥r_ícode_to_buf„r
(

35 
a¢_TYPE_des¸ùt‹_s
 *
ty≥_des¸ùt‹
,

36 *
°ru˘_±r
,

37 *
buf„r
,

38 
size_t
 
buf„r_size


48 
ssize_t
 
u≥r_ícode_to_√w_buf„r
(

49 
a¢_TYPE_des¸ùt‹_s
 *
ty≥_des¸ùt‹
,

50 
a¢_≥r_c⁄°øöts_t
 *
c⁄°øöts
,

51 *
°ru˘_±r
,

52 **
buf„r_r


58 
a¢_íc_rvÆ_t
 (
	t≥r_ty≥_ícodî_f
)(

59 
	ta¢_TYPE_des¸ùt‹_s
 *
	tty≥_des¸ùt‹
,

60 
	ta¢_≥r_c⁄°øöts_t
 *
	tc⁄°øöts
,

61 *
	t°ru˘_±r
,

62 
	ta¢_≥r_ouç_t
 *
	t≥r_ouçut


65 #ifde‡
__˝lu•lus


	@F:\ss_asn1\module.asn1-1\per_opentype.c

5 
	~<a¢_öã∫Æ.h
>

6 
	~<≥r_suµ‹t.h
>

7 
	~<c⁄°r_TYPE.h
>

8 
	~<≥r_›íty≥.h
>

10 
	su≥r_ugŸ_key
 {

11 
a¢_≥r_d©a_t
 
	mﬁdpd
;

12 
size_t
 
	mun˛aimed
;

13 
size_t
 
	mŸ_moved
;

14 
	mª≥©
;

15 } 
	tu≥r_ugŸ_key
;

17 
u≥r_ugŸ_ªfûl
(
a¢_≥r_d©a_t
 *
pd
);

18 
≥r_skù_bôs
(
a¢_≥r_d©a_t
 *
pd
, 
skù_nbôs
);

19 
a¢_dec_rvÆ_t
 
u≥r_sŸ_suck
(
a¢_codec_˘x_t
 *, 
a¢_TYPE_des¸ùt‹_t
 *
td
, 
a¢_≥r_c⁄°øöts_t
 *
c⁄°øöts
, **
•å
, 
a¢_≥r_d©a_t
 *
pd
);

21 
	ga¢_debug_ödít
;

28 
	$u≥r_›í_ty≥_put
(
a¢_TYPE_des¸ùt‹_t
 *
td
, 
a¢_≥r_c⁄°øöts_t
 *
c⁄°øöts
, *
•å
, 
a¢_≥r_ouç_t
 *
po
) {

29 *
buf
;

30 *
b±r
;

31 
ssize_t
 
size
;

32 
size_t
 
toGo
;

34 
	`ASN_DEBUG
("O≥¿ty≥Öuà%†...", 
td
->
«me
);

36 
size
 = 
	`u≥r_ícode_to_√w_buf„r
(
td
, 
c⁄°øöts
, 
•å
, &
buf
);

37 if(
size
 <= 0)  -1;

39 
b±r
 = 
buf
, 
toGo
 = 
size
;ÅoGo;) {

40 
ssize_t
 
maySave
 = 
	`u≥r_put_Àngth
(
po
, 
toGo
);

41 if(
maySave
 < 0) ;

42 if(
	`≥r_put_m™y_bôs
(
po
, 
b±r
, 
maySave
 * 8)) ;

43 
b±r
 = (*)b±∏+ 
maySave
;

44 
toGo
 -
maySave
;

47 
	`FREEMEM
(
buf
);

48 if(
toGo
)  -1;

50 
	`ASN_DEBUG
("OpenÅypeÖut %s ofÜength %d + overhead (1byte?)",

51 
td
->
«me
, 
size
);

54 
	}
}

56 
a¢_dec_rvÆ_t


57 
	$u≥r_›í_ty≥_gë_sim∂e
(
a¢_codec_˘x_t
 *
˘x
, 
a¢_TYPE_des¸ùt‹_t
 *
td
,

58 
a¢_≥r_c⁄°øöts_t
 *
c⁄°øöts
, **
•å
, 
a¢_≥r_d©a_t
 *
pd
) {

59 
a¢_dec_rvÆ_t
 
rv
;

60 
ssize_t
 
chunk_byãs
;

61 
ª≥©
;

62 
uöt8_t
 *
buf
 = 0;

63 
size_t
 
bufLí
 = 0;

64 
size_t
 
bufSize
 = 0;

65 
a¢_≥r_d©a_t
 
•d
;

66 
size_t
 
∑ddög
;

68 
	`_ASN_STACK_OVERFLOW_CHECK
(
˘x
);

70 
	`ASN_DEBUG
("Gëtög o≥¿ty≥ %s...", 
td
->
«me
);

73 
chunk_byãs
 = 
	`u≥r_gë_Àngth
(
pd
, -1, &
ª≥©
);

74 if(
chunk_byãs
 < 0) {

75 
	`FREEMEM
(
buf
);

76 
_ASN_DECODE_STARVED
;

78 if(
bufLí
 + 
chunk_byãs
 > 
bufSize
) {

79 *
±r
;

80 
bufSize
 = 
chunk_byãs
 + (bufSize << 2);

81 
±r
 = 
	`REALLOC
(
buf
, 
bufSize
);

82 if(!
±r
) {

83 
	`FREEMEM
(
buf
);

84 
_ASN_DECODE_FAILED
;

86 
buf
 = 
±r
;

88 if(
	`≥r_gë_m™y_bôs
(
pd
, 
buf
 + 
bufLí
, 0, 
chunk_byãs
 << 3)) {

89 
	`FREEMEM
(
buf
);

90 
_ASN_DECODE_STARVED
;

92 
bufLí
 +
chunk_byãs
;

93 } 
ª≥©
);

95 
	`ASN_DEBUG
("Gëtög o≥¿ty≥ %†ícoded i¿%d byãs", 
td
->
«me
,

96 
bufLí
);

98 
	`mem£t
(&
•d
, 0, (spd));

99 
•d
.
buf„r
 = 
buf
;

100 
•d
.
nbôs
 = 
bufLí
 << 3;

102 
a¢_debug_ödít
 += 4;

103 
rv
 = 
td
->
	`u≥r_decodî
(
˘x
,Åd, 
c⁄°øöts
, 
•å
, &
•d
);

104 
a¢_debug_ödít
 -= 4;

106 if(
rv
.
code
 =
RC_OK
) {

108 
∑ddög
 = 
•d
.
nbôs
 - spd.
nboff
;

109 if(
∑ddög
 < 8 && 
	`≥r_gë_„w_bôs
(&
•d
,Öadding) == 0) {

111 
	`FREEMEM
(
buf
);

112  
rv
;

114 
	`FREEMEM
(
buf
);

115 if(
∑ddög
 >= 8) {

116 
	`ASN_DEBUG
("Toÿœrgê∑ddög %d i¿›íÅy≥", 
∑ddög
);

117 
_ASN_DECODE_FAILED
;

119 
	`ASN_DEBUG
("Non-zeroÖadding");

120 
_ASN_DECODE_FAILED
;

123 
	`FREEMEM
(
buf
);

125 
rv
.
code
 = 
RC_FAIL
;

128  
rv
;

129 
	}
}

131 
a¢_dec_rvÆ_t
 
GCC_NOTUSED


132 
	$u≥r_›í_ty≥_gë_com∂ex
(
a¢_codec_˘x_t
 *
˘x
, 
a¢_TYPE_des¸ùt‹_t
 *
td
,

133 
a¢_≥r_c⁄°øöts_t
 *
c⁄°øöts
, **
•å
, 
a¢_≥r_d©a_t
 *
pd
) {

134 
u≥r_ugŸ_key
 
¨g
;

135 
a¢_dec_rvÆ_t
 
rv
;

136 
ssize_t
 
∑ddög
;

138 
	`_ASN_STACK_OVERFLOW_CHECK
(
˘x
);

140 
	`ASN_DEBUG
("Gëtög o≥¿ty≥ %†‰om %s", 
td
->
«me
,

141 
	`≥r_d©a_°rög
(
pd
));

142 
¨g
.
ﬁdpd
 = *
pd
;

143 
¨g
.
un˛aimed
 = 0;

144 
¨g
.
Ÿ_moved
 = 0;

145 
¨g
.
ª≥©
 = 1;

146 
pd
->
ªfûl
 = 
u≥r_ugŸ_ªfûl
;

147 
pd
->
ªfûl_key
 = &
¨g
;

148 
pd
->
nbôs
 =Öd->
nboff
;

149 
pd
->
moved
 = 0;

151 
a¢_debug_ödít
 += 4;

152 
rv
 = 
td
->
	`u≥r_decodî
(
˘x
,Åd, 
c⁄°øöts
, 
•å
, 
pd
);

153 
a¢_debug_ödít
 -= 4;

155 
	#UPDRESTOREPD
 do { \

157 
pd
->
nbôs
 = 
¨g
.
ﬁdpd
.nbô†- (pd->
moved
 -árg.
Ÿ_moved
); \

158 
pd
->
moved
 = 
¨g
.
ﬁdpd
.moved + (pd->moved -árg.
Ÿ_moved
); \

159 
pd
->
ªfûl
 = 
¨g
.
ﬁdpd
.refill; \

160 
pd
->
ªfûl_key
 = 
¨g
.
ﬁdpd
.refill_key; \

161 } 0)

	)

163 if(
rv
.
code
 !
RC_OK
) {

164 
UPDRESTOREPD
;

165  
rv
;

168 
	`ASN_DEBUG
("OpenType %sÖd%s old%s unclaimed=%d,Ñepeat=%d"

169 , 
td
->
«me
,

170 
	`≥r_d©a_°rög
(
pd
),

171 
	`≥r_d©a_°rög
(&
¨g
.
ﬁdpd
),

172 
¨g
.
un˛aimed
,árg.
ª≥©
);

174 
∑ddög
 = 
pd
->
moved
 % 8;

175 if(
∑ddög
) {

176 
öt32_t
 
pvÆue
;

177 if(
∑ddög
 > 7) {

178 
	`ASN_DEBUG
("TooÜargeÖadding %d in openÅype",

179 
∑ddög
);

180 
rv
.
code
 = 
RC_FAIL
;

181 
UPDRESTOREPD
;

182  
rv
;

184 
∑ddög
 = 8 -Öadding;

185 
	`ASN_DEBUG
("GëtögÖaddög o‡%d bôs", 
∑ddög
);

186 
pvÆue
 = 
	`≥r_gë_„w_bôs
(
pd
, 
∑ddög
);

187 
pvÆue
) {

189 
	`ASN_DEBUG
("Padding skip failed");

190 
UPDRESTOREPD
;

191 
_ASN_DECODE_STARVED
;

194 
	`ASN_DEBUG
("Non-blankÖadding (%d bits 0x%02x)",

195 
∑ddög
, ()
pvÆue
);

196 
UPDRESTOREPD
;

197 
_ASN_DECODE_FAILED
;

200 if(
pd
->
nboff
 !pd->
nbôs
) {

201 
	`ASN_DEBUG
("O≥¿ty≥ %†ovîhódÖd%†ﬁd%s", 
td
->
«me
,

202 
	`≥r_d©a_°rög
(
pd
),Öî_d©a_°rög(&
¨g
.
ﬁdpd
));

204 
UPDRESTOREPD
;

205 
_ASN_DECODE_FAILED
;

207 
¨g
.
un˛aimed
 +
pd
->
nbôs
 -Öd->
nboff
;

212 
UPDRESTOREPD
;

215 if(
¨g
.
un˛aimed
Ë
	`ASN_DEBUG
("Getting unclaimed %d",árg.unclaimed);

216 if(
¨g
.
un˛aimed
) {

217 
	`≥r_skù_bôs
(
pd
, 
¨g
.
un˛aimed
)) {

219 
	`ASN_DEBUG
("Cœim o‡%d faûed", 
¨g
.
un˛aimed
);

220 
_ASN_DECODE_STARVED
;

222 
	`ASN_DEBUG
("GŸ cœim o‡%d", 
¨g
.
un˛aimed
);

226 
	`ASN_DEBUG
("Non-blank unconsumedÖadding");

227 
_ASN_DECODE_FAILED
;

229 
¨g
.
un˛aimed
 = 0;

232 if(
¨g
.
ª≥©
) {

233 
	`ASN_DEBUG
("Not consumedÅhe wholeÅhing");

234 
rv
.
code
 = 
RC_FAIL
;

235  
rv
;

238  
rv
;

239 
	}
}

242 
a¢_dec_rvÆ_t


243 
	$u≥r_›í_ty≥_gë
(
a¢_codec_˘x_t
 *
˘x
, 
a¢_TYPE_des¸ùt‹_t
 *
td
,

244 
a¢_≥r_c⁄°øöts_t
 *
c⁄°øöts
, **
•å
, 
a¢_≥r_d©a_t
 *
pd
) {

246  
	`u≥r_›í_ty≥_gë_sim∂e
(
˘x
, 
td
, 
c⁄°øöts
,

247 
•å
, 
pd
);

249 
	}
}

252 
	$u≥r_›í_ty≥_skù
(
a¢_codec_˘x_t
 *
˘x
, 
a¢_≥r_d©a_t
 *
pd
) {

253 
a¢_TYPE_des¸ùt‹_t
 
s_td
;

254 
a¢_dec_rvÆ_t
 
rv
;

256 
s_td
.
«me
 = "<unknownÉxtension>";

257 
s_td
.
u≥r_decodî
 = 
u≥r_sŸ_suck
;

259 
rv
 = 
	`u≥r_›í_ty≥_gë
(
˘x
, &
s_td
, 0, 0, 
pd
);

260 if(
rv
.
code
 !
RC_OK
)

264 
	}
}

270 
a¢_dec_rvÆ_t


271 
	$u≥r_sŸ_suck
(
a¢_codec_˘x_t
 *
˘x
, 
a¢_TYPE_des¸ùt‹_t
 *
td
,

272 
a¢_≥r_c⁄°øöts_t
 *
c⁄°øöts
, **
•å
, 
a¢_≥r_d©a_t
 *
pd
) {

273 
a¢_dec_rvÆ_t
 
rv
;

275 ()
˘x
;

276 ()
td
;

277 ()
c⁄°øöts
;

278 ()
•å
;

280 
	`≥r_gë_„w_bôs
(
pd
, 24) >= 0);

282 
rv
.
code
 = 
RC_OK
;

283 
rv
.
c⁄sumed
 = 
pd
->
moved
;

285  
rv
;

286 
	}
}

289 
	$u≥r_ugŸ_ªfûl
(
a¢_≥r_d©a_t
 *
pd
) {

290 
u≥r_ugŸ_key
 *
¨g
 = 
pd
->
ªfûl_key
;

291 
ssize_t
 
√xt_chunk_byãs
, 
√xt_chunk_bôs
;

292 
ssize_t
 
avaû
;

294 
a¢_≥r_d©a_t
 *
ﬁdpd
 = &
¨g
->oldpd;

296 
	`ASN_DEBUG
("REFILLINGÖd->moved=%d, oldpd->moved=%d",

297 
pd
->
moved
, 
ﬁdpd
->moved);

300 
ﬁdpd
->
buf„r
 = 
pd
->buffer;

301 
ﬁdpd
->
nboff
 = 
pd
->nboff;

302 
ﬁdpd
->
nbôs
 -
pd
->
moved
 - 
¨g
->
Ÿ_moved
;

303 
ﬁdpd
->
moved
 +
pd
->moved - 
¨g
->
Ÿ_moved
;

304 
¨g
->
Ÿ_moved
 = 
pd
->
moved
;

306 if(
¨g
->
un˛aimed
) {

308 if(
	`≥r_gë_„w_bôs
(
ﬁdpd
, 1))

310 if(
ﬁdpd
->
nboff
 == 0) {

311 
	`as£π
(0);

314 
pd
->
buf„r
 = 
ﬁdpd
->buffer;

315 
pd
->
nboff
 = 
ﬁdpd
->nboff - 1;

316 
pd
->
nbôs
 = 
ﬁdpd
->nbits;

317 
	`ASN_DEBUG
("UNCLAIMED <-Ñëu∫ from (pd->moved=%d)", 
pd
->
moved
);

321 if(!
¨g
->
ª≥©
) {

322 
	`ASN_DEBUG
("Want more butÑefill doesn't have it");

326 
√xt_chunk_byãs
 = 
	`u≥r_gë_Àngth
(
ﬁdpd
, -1, &
¨g
->
ª≥©
);

327 
	`ASN_DEBUG
("OpenÅype LENGTH %d bytesát off %d,Ñepeat %d",

328 
√xt_chunk_byãs
, 
ﬁdpd
->
moved
, 
¨g
->
ª≥©
);

329 if(
√xt_chunk_byãs
 < 0)  -1;

330 if(
√xt_chunk_byãs
 == 0) {

331 
pd
->
ªfûl
 = 0;

332 
	`as£π
(!
¨g
->
ª≥©
);

334 
√xt_chunk_bôs
 = 
√xt_chunk_byãs
 << 3;

335 
avaû
 = 
ﬁdpd
->
nbôs
 - oldpd->
nboff
;

336 if(
avaû
 >
√xt_chunk_bôs
) {

337 
pd
->
nbôs
 = 
ﬁdpd
->
nboff
 + 
√xt_chunk_bôs
;

338 
¨g
->
un˛aimed
 = 0;

339 
	`ASN_DEBUG
("!+Parent frame %d bits,álloting %d [%d..%d] (%d)",

340 
√xt_chunk_bôs
, 
ﬁdpd
->
moved
,

341 
ﬁdpd
->
nboff
, oldpd->
nbôs
,

342 
ﬁdpd
->
nbôs
 - oldpd->
nboff
);

344 
pd
->
nbôs
 = 
ﬁdpd
->nbits;

345 
¨g
->
un˛aimed
 = 
√xt_chunk_bôs
 - 
avaû
;

346 
	`ASN_DEBUG
("!-P¨íà‰amê%d,Ñequúê%d, wû»˛aim %d", 
avaû
, 
√xt_chunk_bôs
, 
¨g
->
un˛aimed
);

348 
pd
->
buf„r
 = 
ﬁdpd
->buffer;

349 
pd
->
nboff
 = 
ﬁdpd
->nboff;

350 
	`ASN_DEBUG
("RefilledÖd%s old%s",

351 
	`≥r_d©a_°rög
(
pd
),Öî_d©a_°rög(
ﬁdpd
));

353 
	}
}

356 
	$≥r_skù_bôs
(
a¢_≥r_d©a_t
 *
pd
, 
skù_nbôs
) {

357 
hasN⁄ZîoBôs
 = 0;

358 
skù_nbôs
 > 0) {

359 
skù
;

360 if(
skù_nbôs
 < 
skù
)

361 
skù
 = 
skù_nbôs
;

363 
skù
 = 24;

364 
skù_nbôs
 -
skù
;

366 
	`≥r_gë_„w_bôs
(
pd
, 
skù
)) {

369 : 
hasN⁄ZîoBôs
 = 1; ;

372  
hasN⁄ZîoBôs
;

373 
	}
}

	@F:\ss_asn1\module.asn1-1\per_opentype.h

5 #i‚def 
_PER_OPENTYPE_H_


6 
	#_PER_OPENTYPE_H_


	)

8 #ifde‡
__˝lu•lus


12 
a¢_dec_rvÆ_t
 
u≥r_›í_ty≥_gë
(
a¢_codec_˘x_t
 *
›t_codec_˘x
, 
a¢_TYPE_des¸ùt‹_t
 *
td
, 
a¢_≥r_c⁄°øöts_t
 *
c⁄°øöts
, **
•å
, 
a¢_≥r_d©a_t
 *
pd
);

14 
u≥r_›í_ty≥_skù
(
a¢_codec_˘x_t
 *
›t_codec_˘x
, 
a¢_≥r_d©a_t
 *
pd
);

16 
u≥r_›í_ty≥_put
(
a¢_TYPE_des¸ùt‹_t
 *
td
, 
a¢_≥r_c⁄°øöts_t
 *
c⁄°øöts
, *
•å
, 
a¢_≥r_ouç_t
 *
po
);

18 #ifde‡
__˝lu•lus


	@F:\ss_asn1\module.asn1-1\per_support.c

6 
	~<a¢_sy°em.h
>

7 
	~<a¢_öã∫Æ.h
>

8 
	~<≥r_suµ‹t.h
>

11 
	$≥r_d©a_°rög
(
a¢_≥r_d©a_t
 *
pd
) {

12 
buf
[2][32];

13 
n
;

14 
n
 = (n+1) % 2;

15 
	`¢¥ötf
(
buf
[
n
], (buf),

17 
pd
->
moved
,

18 ((()
pd
->
buf„r
) & 0xf),

19 
pd
->
nboff
,Öd->
nbôs
,

20 
pd
->
nbôs
 -Öd->
nboff
);

21  
buf
[
n
];

22 
	}
}

25 
	$≥r_gë_undo
(
a¢_≥r_d©a_t
 *
pd
, 
nbôs
) {

26 if((
ssize_t
)
pd
->
nboff
 < 
nbôs
) {

27 
	`as£π
((
ssize_t
)
pd
->
nboff
 < 
nbôs
);

29 
pd
->
nboff
 -
nbôs
;

30 
pd
->
moved
 -
nbôs
;

32 
	}
}

37 
öt32_t


38 
	$≥r_gë_„w_bôs
(
a¢_≥r_d©a_t
 *
pd
, 
nbôs
) {

39 
size_t
 
off
;

40 
ssize_t
 
∆e·
;

41 
uöt32_t
 
accum
;

42 c⁄° 
uöt8_t
 *
buf
;

44 if(
nbôs
 < 0)

47 
∆e·
 = 
pd
->
nbôs
 -Öd->
nboff
;

48 if(
nbôs
 > 
∆e·
) {

49 
öt32_t
 
èûv
, 
vhód
;

50 if(!
pd
->
ªfûl
 || 
nbôs
 > 31)  -1;

52 
	`ASN_DEBUG
("ObèöÅhêª° %d bô†(w™à%d)", 
∆e·
, 
nbôs
);

53 
èûv
 = 
	`≥r_gë_„w_bôs
(
pd
, 
∆e·
);

54 if(
èûv
 < 0)  -1;

56 if(
pd
->
	`ªfûl
(pd))

58 
nbôs
 -
∆e·
;

59 
vhód
 = 
	`≥r_gë_„w_bôs
(
pd
, 
nbôs
);

61 
èûv
 = (èûv << 
nbôs
Ë| 
vhód
;

62  
èûv
;

68 if(
pd
->
nboff
 >= 8) {

69 
pd
->
buf„r
 +’d->
nboff
 >> 3);

70 
pd
->
nbôs
 -’d->
nboff
 & ~0x07);

71 
pd
->
nboff
 &= 0x07;

73 
pd
->
moved
 +
nbôs
;

74 
pd
->
nboff
 +
nbôs
;

75 
off
 = 
pd
->
nboff
;

76 
buf
 = 
pd
->
buf„r
;

81 if(
off
 <= 8)

82 
accum
 = 
nbôs
 ? (
buf
[0]Ë>> (8 - 
off
) : 0;

83 if(
off
 <= 16)

84 
accum
 = ((
buf
[0] << 8Ë+ buf[1]Ë>> (16 - 
off
);

85 if(
off
 <= 24)

86 
accum
 = ((
buf
[0] << 16Ë+ (buf[1] << 8Ë+ buf[2]Ë>> (24 - 
off
);

87 if(
off
 <= 31)

88 
accum
 = ((
buf
[0] << 24) + (buf[1] << 16)

89 + (
buf
[2] << 8Ë+ (buf[3])Ë>> (32 - 
off
);

90 if(
nbôs
 <= 31) {

91 
a¢_≥r_d©a_t
 
çd
 = *
pd
;

93 
	`≥r_gë_undo
(&
çd
, 
nbôs
);

97 
accum
 = 
	`≥r_gë_„w_bôs
(&
çd
, 
nbôs
 - 24) << 24;

98 
accum
 |
	`≥r_gë_„w_bôs
(&
çd
, 24);

100 
	`≥r_gë_undo
(
pd
, 
nbôs
);

104 
accum
 &(((
uöt32_t
)1 << 
nbôs
) - 1);

106 
	`ASN_DEBUG
(" [PER got %2d<=%2d bits => span %d %+d[%d..%d]:%02x (%d) => 0x%x]",

107 
nbôs
, 
∆e·
,

108 
pd
->
moved
,

109 ((()
pd
->
buf„r
) & 0xf),

110 
pd
->
nboff
,Öd->
nbôs
,

111 
pd
->
buf„r
[0],

112 
pd
->
nbôs
 -Öd->
nboff
,

113 ()
accum
);

115  
accum
;

116 
	}
}

122 
	$≥r_gë_m™y_bôs
(
a¢_≥r_d©a_t
 *
pd
, 
uöt8_t
 *
d°
, 
Æright
, 
nbôs
) {

123 
öt32_t
 
vÆue
;

125 if(
Æright
 && (
nbôs
 & 7)) {

127 
vÆue
 = 
	`≥r_gë_„w_bôs
(
pd
, 
nbôs
 & 0x07);

128 if(
vÆue
 < 0)  -1;

129 *
d°
++ = 
vÆue
;

130 
nbôs
 &= ~7;

133 
nbôs
) {

134 if(
nbôs
 >= 24) {

135 
vÆue
 = 
	`≥r_gë_„w_bôs
(
pd
, 24);

136 if(
vÆue
 < 0)  -1;

137 *(
d°
++Ë
vÆue
 >> 16;

138 *(
d°
++Ë
vÆue
 >> 8;

139 *(
d°
++Ë
vÆue
;

140 
nbôs
 -= 24;

142 
vÆue
 = 
	`≥r_gë_„w_bôs
(
pd
, 
nbôs
);

143 if(
vÆue
 < 0)  -1;

144 if(
nbôs
 & 7) {

145 
vÆue
 <<8 - (
nbôs
 & 7),

146 
nbôs
 += 8 - (nbits & 7);

147 if(
nbôs
 > 24)

148 *
d°
++ = 
vÆue
 >> 24;

150 if(
nbôs
 > 16)

151 *
d°
++ = 
vÆue
 >> 16;

152 if(
nbôs
 > 8)

153 *
d°
++ = 
vÆue
 >> 8;

154 *
d°
++ = 
vÆue
;

160 
	}
}

165 
ssize_t


166 
	$u≥r_gë_Àngth
(
a¢_≥r_d©a_t
 *
pd
, 
ebôs
, *
ª≥©
) {

167 
ssize_t
 
vÆue
;

169 *
ª≥©
 = 0;

171 if(
ebôs
 >0Ë 
	`≥r_gë_„w_bôs
(
pd
,Ébits);

173 
vÆue
 = 
	`≥r_gë_„w_bôs
(
pd
, 8);

174 if(
vÆue
 < 0)  -1;

175 if((
vÆue
 & 128) == 0)

176  (
vÆue
 & 0x7F);

177 if((
vÆue
 & 64) == 0) {

178 
vÆue
 = ((vÆuê& 63Ë<< 8Ë| 
	`≥r_gë_„w_bôs
(
pd
, 8);

179 if(
vÆue
 < 0)  -1;

180  
vÆue
;

182 
vÆue
 &= 63;

183 if(
vÆue
 < 1 || value > 4)

185 *
ª≥©
 = 1;

186  (16384 * 
vÆue
);

187 
	}
}

194 
ssize_t


195 
	$u≥r_gë_n¶ígth
(
a¢_≥r_d©a_t
 *
pd
) {

196 
ssize_t
 
Àngth
;

198 
	`ASN_DEBUG
("GettingÇormally smallÜength");

200 if(
	`≥r_gë_„w_bôs
(
pd
, 1) == 0) {

201 
Àngth
 = 
	`≥r_gë_„w_bôs
(
pd
, 6) + 1;

202 if(
Àngth
 <= 0)  -1;

203 
	`ASN_DEBUG
("l=%d", 
Àngth
);

204  
Àngth
;

206 
ª≥©
;

207 
Àngth
 = 
	`u≥r_gë_Àngth
(
pd
, -1, &
ª≥©
);

208 if(
Àngth
 >0 && !
ª≥©
) Üength;

211 
	}
}

217 
ssize_t


218 
	$u≥r_gë_n¢nwn
(
a¢_≥r_d©a_t
 *
pd
) {

219 
ssize_t
 
vÆue
;

221 
vÆue
 = 
	`≥r_gë_„w_bôs
(
pd
, 7);

222 if(
vÆue
 & 64) {

223 
vÆue
 &= 63;

224 
vÆue
 <<= 2;

225 
vÆue
 |
	`≥r_gë_„w_bôs
(
pd
, 2);

226 if(
vÆue
 & 128)

228 if(
vÆue
 == 0)

230 if(
vÆue
 >= 3)

232 
vÆue
 = 
	`≥r_gë_„w_bôs
(
pd
, 8 * value);

233  
vÆue
;

236  
vÆue
;

237 
	}
}

244 
	$u≥r_put_n¢nwn
(
a¢_≥r_ouç_t
 *
po
, 
n
) {

245 
byãs
;

247 if(
n
 <= 63) {

248 if(
n
 < 0)  -1;

249  
	`≥r_put_„w_bôs
(
po
, 
n
, 7);

251 if(
n
 < 256)

252 
byãs
 = 1;

253 if(
n
 < 65536)

254 
byãs
 = 2;

255 if(
n
 < 256 * 65536)

256 
byãs
 = 3;

259 if(
	`≥r_put_„w_bôs
(
po
, 
byãs
, 8))

262  
	`≥r_put_„w_bôs
(
po
, 
n
, 8 * 
byãs
);

263 
	}
}

270 
	$≥r_put_„w_bôs
(
a¢_≥r_ouç_t
 *
po
, 
uöt32_t
 
bôs
, 
obôs
) {

271 
size_t
 
off
;

272 
size_t
 
omsk
;

273 
uöt8_t
 *
buf
;

275 if(
obôs
 <= 0 || obits >= 32)  obits ? -1 : 0;

277 
	`ASN_DEBUG
("[PERÖut %d bits %xÅo %p+%d bits]",

278 
obôs
, ()
bôs
, 
po
->
buf„r
,Öo->
nboff
);

283 if(
po
->
nboff
 >= 8) {

284 
po
->
buf„r
 +’o->
nboff
 >> 3);

285 
po
->
nbôs
 -’o->
nboff
 & ~0x07);

286 
po
->
nboff
 &= 0x07;

292 if(
po
->
nboff
 + 
obôs
 >Öo->
nbôs
) {

293 
com∂ëe_byãs
 = (
po
->
buf„r
 -Öo->
tmp•a˚
);

294 
	`ASN_DEBUG
("[PER output %d complete + %d]",

295 
com∂ëe_byãs
, 
po
->
Êushed_byãs
);

296 if(
po
->
	`ouçî
’o->
tmp•a˚
, 
com∂ëe_byãs
,Öo->
›_key
) < 0)

298 if(
po
->
nboff
)

299 
po
->
tmp•a˚
[0] =Öo->
buf„r
[0];

300 
po
->
buf„r
 =Öo->
tmp•a˚
;

301 
po
->
nbôs
 = 8 * ’o->
tmp•a˚
);

302 
po
->
Êushed_byãs
 +
com∂ëe_byãs
;

308 
buf
 = 
po
->
buf„r
;

309 
omsk
 = ~((1 << (8 - 
po
->
nboff
)) - 1);

310 
off
 = (
po
->
nboff
 +
obôs
);

313 
bôs
 &(((
uöt32_t
)1 << 
obôs
) - 1);

315 
	`ASN_DEBUG
("[PER ouà%d %u/%x (t=%d,o=%dË%x&%x=%x]", 
obôs
,

316 ()
bôs
, ()bits,

317 
po
->
nboff
 - 
obôs
, 
off
, 
buf
[0], 
omsk
&0xff, buf[0] & omsk);

319 if(
off
 <= 8)

320 
bôs
 <<(8 - 
off
),

321 
buf
[0] = (buf[0] & 
omsk
Ë| 
bôs
;

322 if(
off
 <= 16)

323 
bôs
 <<(16 - 
off
),

324 
buf
[0] = (buf[0] & 
omsk
Ë| (
bôs
 >> 8),

325 
buf
[1] = 
bôs
;

326 if(
off
 <= 24)

327 
bôs
 <<(24 - 
off
),

328 
buf
[0] = (buf[0] & 
omsk
Ë| (
bôs
 >> 16),

329 
buf
[1] = 
bôs
 >> 8,

330 
buf
[2] = 
bôs
;

331 if(
off
 <= 31)

332 
bôs
 <<(32 - 
off
),

333 
buf
[0] = (buf[0] & 
omsk
Ë| (
bôs
 >> 24),

334 
buf
[1] = 
bôs
 >> 16,

335 
buf
[2] = 
bôs
 >> 8,

336 
buf
[3] = 
bôs
;

338 
	`ASN_DEBUG
("->[PER ouà•lô %d]", 
obôs
);

339 
	`≥r_put_„w_bôs
(
po
, 
bôs
 >> 8, 24);

340 
	`≥r_put_„w_bôs
(
po
, 
bôs
, 
obôs
 - 24);

341 
	`ASN_DEBUG
("<-[PER ouà•lô %d]", 
obôs
);

344 
	`ASN_DEBUG
("[PER out %u/%x => %02x buf+%d]",

345 ()
bôs
, ()bôs, 
buf
[0], 
po
->
buf„r
 -Öo->
tmp•a˚
);

348 
	}
}

355 
	$≥r_put_m™y_bôs
(
a¢_≥r_ouç_t
 *
po
, c⁄° 
uöt8_t
 *
§c
, 
nbôs
) {

357 
nbôs
) {

358 
uöt32_t
 
vÆue
;

360 if(
nbôs
 >= 24) {

361 
vÆue
 = (
§c
[0] << 16) | (src[1] << 8) | src[2];

362 
§c
 += 3;

363 
nbôs
 -= 24;

364 if(
	`≥r_put_„w_bôs
(
po
, 
vÆue
, 24))

367 
vÆue
 = 
§c
[0];

368 if(
nbôs
 > 8)

369 
vÆue
 = (vÆuê<< 8Ë| 
§c
[1];

370 if(
nbôs
 > 16)

371 
vÆue
 = (vÆuê<< 8Ë| 
§c
[2];

372 if(
nbôs
 & 0x07)

373 
vÆue
 >>(8 - (
nbôs
 & 0x07));

374 if(
	`≥r_put_„w_bôs
(
po
, 
vÆue
, 
nbôs
))

381 
	}
}

386 
ssize_t


387 
	$u≥r_put_Àngth
(
a¢_≥r_ouç_t
 *
po
, 
size_t
 
Àngth
) {

389 if(
Àngth
 <= 127)

390  
	`≥r_put_„w_bôs
(
po
, 
Àngth
, 8)

391 ? -1 : (
ssize_t
)
Àngth
;

392 if(
Àngth
 < 16384)

393  
	`≥r_put_„w_bôs
(
po
, 
Àngth
|0x8000, 16)

394 ? -1 : (
ssize_t
)
Àngth
;

396 
Àngth
 >>= 14;

397 if(
Àngth
 > 4)Üength = 4;

399  
	`≥r_put_„w_bôs
(
po
, 0xC0 | 
Àngth
, 8)

400 ? -1 : (
ssize_t
)(
Àngth
 << 14);

401 
	}
}

410 
	$u≥r_put_n¶ígth
(
a¢_≥r_ouç_t
 *
po
, 
size_t
 
Àngth
) {

412 if(
Àngth
 <= 64) {

414 if(
Àngth
 == 0)  -1;

415  
	`≥r_put_„w_bôs
(
po
, 
Àngth
-1, 7) ? -1 : 0;

417 if(
	`u≥r_put_Àngth
(
po
, 
Àngth
Ë!(
ssize_t
)length) {

424 
	}
}

	@F:\ss_asn1\module.asn1-1\per_support.h

6 #i‚def 
_PER_SUPPORT_H_


7 
	#_PER_SUPPORT_H_


	)

9 
	~<a¢_sy°em.h
>

11 #ifde‡
__˝lu•lus


18 
	sa¢_≥r_c⁄°øöt_s
 {

19 
	ea¢_≥r_c⁄°øöt_Êags
 {

20 
APC_UNCONSTRAINED
 = 0x0,

21 
APC_SEMI_CONSTRAINED
 = 0x1,

22 
APC_CONSTRAINED
 = 0x2,

23 
APC_EXTENSIBLE
 = 0x4

24 } 
Êags
;

25 
ønge_bôs
;

26 
ef„˘ive_bôs
;

27 
lowî_bound
;

28 
uµî_bound
;

29 } 
	ta¢_≥r_c⁄°øöt_t
;

30 
	sa¢_≥r_c⁄°øöts_s
 {

31 
a¢_≥r_c⁄°øöt_t
 
vÆue
;

32 
a¢_≥r_c⁄°øöt_t
 
size
;

33 (*
vÆue2code
)(
vÆue
);

34 (*
code2vÆue
)(
code
);

35 } 
	ta¢_≥r_c⁄°øöts_t
;

40 
	sa¢_≥r_d©a_s
 {

41 c⁄° 
uöt8_t
 *
buf„r
;

42 
size_t
 
nboff
;

43 
size_t
 
nbôs
;

44 
size_t
 
moved
;

45 (*
ªfûl
)(
a¢_≥r_d©a_s
 *);

46 *
ªfûl_key
;

47 } 
	ta¢_≥r_d©a_t
;

54 
öt32_t
 
≥r_gë_„w_bôs
(
a¢_≥r_d©a_t
 *
≥r_d©a
, 
gë_nbôs
);

57 
≥r_gë_undo
(
a¢_≥r_d©a_t
 *
≥r_d©a
, 
gë_nbôs
);

64 
≥r_gë_m™y_bôs
(
a¢_≥r_d©a_t
 *
pd
, 
uöt8_t
 *
d°
, 
right_Æign
,

65 
gë_nbôs
);

70 
ssize_t
 
u≥r_gë_Àngth
(
a¢_≥r_d©a_t
 *
pd
,

71 
ef„˘ive_bound_bôs
,

72 *
ª≥©
);

77 
ssize_t
 
u≥r_gë_n¶ígth
(
a¢_≥r_d©a_t
 *
pd
);

82 
ssize_t
 
u≥r_gë_n¢nwn
(
a¢_≥r_d©a_t
 *
pd
);

85 *
≥r_d©a_°rög
(
a¢_≥r_d©a_t
 *
pd
);

90 
	sa¢_≥r_ouç_s
 {

91 
uöt8_t
 *
buf„r
;

92 
size_t
 
nboff
;

93 
size_t
 
nbôs
;

94 
uöt8_t
 
tmp•a˚
[32];

95 (*
ouçî
)(c⁄° *
d©a
, 
size_t
 
size
, *
›_key
);

96 *
›_key
;

97 
size_t
 
Êushed_byãs
;

98 } 
	ta¢_≥r_ouç_t
;

101 
≥r_put_„w_bôs
(
a¢_≥r_ouç_t
 *
≥r_d©a
, 
uöt32_t
 
bôs
, 
obôs
);

104 
≥r_put_m™y_bôs
(
a¢_≥r_ouç_t
 *
po
, c⁄° 
uöt8_t
 *
§c
, 
put_nbôs
);

111 
ssize_t
 
u≥r_put_Àngth
(
a¢_≥r_ouç_t
 *
po
, 
size_t
 
whﬁe_Àngth
);

117 
u≥r_put_n¶ígth
(
a¢_≥r_ouç_t
 *
po
, 
size_t
 
Àngth
);

122 
u≥r_put_n¢nwn
(
a¢_≥r_ouç_t
 *
po
, 
n
);

124 #ifde‡
__˝lu•lus


	@F:\ss_asn1\module.asn1-1\xer_decoder.c

5 
	~<a¢_≠∂iˇti⁄.h
>

6 
	~<a¢_öã∫Æ.h
>

7 
	~<xî_suµ‹t.h
>

13 
a¢_dec_rvÆ_t


14 
	$xî_decode
(
a¢_codec_˘x_t
 *
›t_codec_˘x
, 
a¢_TYPE_des¸ùt‹_t
 *
td
,

15 **
°ru˘_±r
, c⁄° *
buf„r
, 
size_t
 
size
) {

16 
a¢_codec_˘x_t
 
s_codec_˘x
;

22 if(
›t_codec_˘x
) {

23 if(
›t_codec_˘x
->
max_°ack_size
) {

24 
s_codec_˘x
 = *
›t_codec_˘x
;

25 
›t_codec_˘x
 = &
s_codec_˘x
;

29 
	`mem£t
(&
s_codec_˘x
, 0, (s_codec_ctx));

30 
s_codec_˘x
.
max_°ack_size
 = 
_ASN_DEFAULT_STACK_MAX
;

31 
›t_codec_˘x
 = &
s_codec_˘x
;

37  
td
->
	`xî_decodî
(
›t_codec_˘x
,Åd, 
°ru˘_±r
, 0, 
buf„r
, 
size
);

38 
	}
}

42 
	sxî__cb_¨g
 {

43 
pxml_chunk_ty≥_e
 
	mchunk_ty≥
;

44 
size_t
 
	mchunk_size
;

45 c⁄° *
	mchunk_buf
;

46 
	mˇŒback_nŸ_övoked
;

50 
	$xî__tokí_cb
(
pxml_chunk_ty≥_e
 
ty≥
, c⁄° *
_chunk_d©a
, 
size_t
 
_chunk_size
, *
key
) {

51 
xî__cb_¨g
 *
¨g
 = (xî__cb_¨g *)
key
;

52 
¨g
->
chunk_ty≥
 = 
ty≥
;

53 
¨g
->
chunk_size
 = 
_chunk_size
;

54 
¨g
->
chunk_buf
 = 
_chunk_d©a
;

55 
¨g
->
ˇŒback_nŸ_övoked
 = 0;

57 
	}
}

62 
ssize_t


63 
	$xî_√xt_tokí
(*
°©eC⁄ãxt
, c⁄° *
buf„r
, 
size_t
 
size
, 
pxî_chunk_ty≥_e
 *
ch_ty≥
) {

64 
xî__cb_¨g
 
¨g
;

65 
√w_°©eC⁄ãxt
 = *
°©eC⁄ãxt
;

66 
ssize_t
 
ªt
;

68 
¨g
.
ˇŒback_nŸ_övoked
 = 1;

69 
ªt
 = 
	`pxml_∑r£
(&
√w_°©eC⁄ãxt
, 
buf„r
, 
size
, 
xî__tokí_cb
, &
¨g
);

70 if(
ªt
 < 0)  -1;

71 if(
¨g
.
ˇŒback_nŸ_övoked
) {

72 
	`as£π
(
ªt
 == 0);

75 
	`as£π
(
¨g
.
chunk_size
);

76 
	`as£π
(
¨g
.
chunk_buf
 =
buf„r
);

82 
¨g
.
chunk_ty≥
) {

83 
PXML_TEXT
:

84 *
ch_ty≥
 = 
PXER_TEXT
;

86 
PXML_TAG
:  0;

87 
PXML_TAG_END
:

88 *
ch_ty≥
 = 
PXER_TAG
;

90 
PXML_COMMENT
:

91 
PXML_COMMENT_END
:

92 *
ch_ty≥
 = 
PXER_COMMENT
;

96 *
°©eC⁄ãxt
 = 
√w_°©eC⁄ãxt
;

97  
¨g
.
chunk_size
;

98 
	}
}

100 
	#CSLASH
 0x2‡

	)

101 
	#LANGLE
 0x3¯

	)

102 
	#RANGLE
 0x3ê

	)

104 
xî_check_èg_e


105 
	$xî_check_èg
(c⁄° *
buf_±r
, 
size
, c⁄° *
√ed_èg
) {

106 c⁄° *
buf
 = (c⁄° *)
buf_±r
;

107 c⁄° *
íd
;

108 
xî_check_èg_e
 
˘
 = 
XCT_OPENING
;

110 if(
size
 < 2 || 
buf
[0] !
LANGLE
 || buf[size-1] !
RANGLE
) {

111 if(
size
 >= 2)

112 
	`ASN_DEBUG
("Brokí XMLÅag: \"%c...%c\"", 
buf
[0], buf[
size
 - 1]);

113  
XCT_BROKEN
;

119 if(
buf
[1] =
CSLASH
) {

120 
buf
 += 2;

121 
size
 -= 3;

122 
˘
 = 
XCT_CLOSING
;

123 if(
size
 > 0 && 
buf
[size-1] =
CSLASH
)

124  
XCT_BROKEN
;

126 
buf
++;

127 
size
 -= 2;

128 if(
size
 > 0 && 
buf
[size-1] =
CSLASH
) {

129 
˘
 = 
XCT_BOTH
;

130 
size
--;

135 if(!
√ed_èg
 || !*need_tag)

136  (
xî_check_èg_e
)(
XCT__UNK__MASK
 | 
˘
);

141 
íd
 = 
buf
 + 
size
; bu‡<Énd; buf++, 
√ed_èg
++) {

142 
b
 = *
buf
, 
n
 = *
√ed_èg
;

143 if(
b
 !
n
) {

144 if(
n
 == 0) {

145 
b
) {

149  
˘
;

152  (
xî_check_èg_e
)(
XCT__UNK__MASK
 | 
˘
);

154 if(
b
 == 0)

155  
XCT_BROKEN
;

157 if(*
√ed_èg
)

158  (
xî_check_èg_e
)(
XCT__UNK__MASK
 | 
˘
);

160  
˘
;

161 
	}
}

164 #unde‡
ADVANCE


165 
	#ADVANCE
(
num_byãs
) do { \

166 
size_t
 
num
 = (
num_byãs
); \

167 
buf_±r
 = ((c⁄° *)buf_±rË+ 
num
; \

168 
size
 -
num
; \

169 
c⁄sumed_my£lf
 +
num
; \

170 } 0)

	)

172 #unde‡
RETURN


173 
	#RETURN
(
_code
) do { \

174 
rvÆ
.
code
 = 
_code
; \

175 
rvÆ
.
c⁄sumed
 = 
c⁄sumed_my£lf
; \

176 if(
rvÆ
.
code
 !
RC_OK
) \

177 
	`ASN_DEBUG
("Faûed wôh %d", 
rvÆ
.
code
); \

178  
rvÆ
; \

179 } 0)

	)

181 
	#XER_GOT_BODY
(
chunk_buf
, 
chunk_size
, 
size
) do { \

182 
ssize_t
 
c⁄vîãd_size
 = 
body_ª˚ivî
 \

183 (
°ru˘_key
, 
chunk_buf
, 
chunk_size
, \

184 (
size_t
)
chunk_size
 < 
size
); \

185 if(
c⁄vîãd_size
 =-1Ë
	`RETURN
(
RC_FAIL
); \

186 if(
c⁄vîãd_size
 == 0 \

187 && 
size
 =(
size_t
)
chunk_size
) \

188 
	`RETURN
(
RC_WMORE
); \

189 
chunk_size
 = 
c⁄vîãd_size
; \

190 } 0)

	)

191 
	#XER_GOT_EMPTY
() do { \

192 if(
	`body_ª˚ivî
(
°ru˘_key
, 0, 0, 
size
 > 0) == -1) \

193 
	`RETURN
(
RC_FAIL
); \

194 } 0)

	)

199 
a¢_dec_rvÆ_t


200 
xî_decode_gíîÆ
(
a¢_codec_˘x_t
 *
›t_codec_˘x
,

201 
a¢_°ru˘_˘x_t
 *
˘x
,

202 *
°ru˘_key
,

203 c⁄° *
xml_èg
,

204 c⁄° *
buf_±r
, 
size_t
 
size
,

205 (*
›t_u√x≥˘ed_èg_decodî
)

206 (*
°ru˘_key
, c⁄° *
chunk_buf
, 
size_t
 
chunk_size
),

207 
	$ssize_t
 (*
body_ª˚ivî
)

208 (*
°ru˘_key
, c⁄° *
chunk_buf
, 
size_t
 
chunk_size
,

209 
have_m‹e
)

212 
a¢_dec_rvÆ_t
 
rvÆ
;

213 
ssize_t
 
c⁄sumed_my£lf
 = 0;

215 ()
›t_codec_˘x
;

222 if(
˘x
->
pha£
 > 1Ë
	`RETURN
(
RC_FAIL
);

224 
pxî_chunk_ty≥_e
 
ch_ty≥
;

225 
ssize_t
 
ch_size
;

226 
xî_check_èg_e
 
tcv
;

231 
ch_size
 = 
	`xî_√xt_tokí
(&
˘x
->
c⁄ãxt
, 
buf_±r
, 
size
,

232 &
ch_ty≥
);

233 
ch_size
) {

234 -1: 
	`RETURN
(
RC_FAIL
);

236 
	`RETURN
(
RC_WMORE
);

238 
ch_ty≥
) {

239 
PXER_COMMENT
:

240 
	`ADVANCE
(
ch_size
);

242 
PXER_TEXT
:

243 if(
˘x
->
pha£
 == 0) {

251 
	`XER_GOT_BODY
(
buf_±r
, 
ch_size
, 
size
);

253 
	`ADVANCE
(
ch_size
);

255 
PXER_TAG
:

260 
	`as£π
(
ch_ty≥
 =
PXER_TAG
 && 
size
);

262 
tcv
 = 
	`xî_check_èg
(
buf_±r
, 
ch_size
, 
xml_èg
);

270 
tcv
) {

271 
XCT_BOTH
:

272 if(
˘x
->
pha£
) ;

274 
	`XER_GOT_EMPTY
();

275 
	`ADVANCE
(
ch_size
);

276 
˘x
->
pha£
 = 2;

277 
	`RETURN
(
RC_OK
);

278 
XCT_OPENING
:

279 if(
˘x
->
pha£
) ;

280 
	`ADVANCE
(
ch_size
);

281 
˘x
->
pha£
 = 1;

283 
XCT_CLOSING
:

284 if(!
˘x
->
pha£
) ;

285 
	`ADVANCE
(
ch_size
);

286 
˘x
->
pha£
 = 2;

287 
	`RETURN
(
RC_OK
);

288 
XCT_UNKNOWN_BO
:

292 if(
›t_u√x≥˘ed_èg_decodî


293 && 
	`›t_u√x≥˘ed_èg_decodî
(
°ru˘_key
,

294 
buf_±r
, 
ch_size
) >= 0) {

296 
	`ADVANCE
(
ch_size
);

297 if(!
˘x
->
pha£
) {

300 
˘x
->
pha£
 = 2;

301 
	`RETURN
(
RC_OK
);

310 
	`ASN_DEBUG
("U√x≥˘ed XMLÅag (ex≥˘ed \"%s\")", 
xml_èg
);

314 
	`RETURN
(
RC_FAIL
);

315 
	}
}

319 
	$xî_is_whôe•a˚
(c⁄° *
chunk_buf
, 
size_t
 
chunk_size
) {

320 c⁄° *
p
 = (c⁄° *)
chunk_buf
;

321 c⁄° *
≥nd
 = 
p
 + 
chunk_size
;

323 ; 
p
 < 
≥nd
;Ö++) {

324 *
p
) {

338 
	}
}

344 
	$xî_skù_unknown
(
xî_check_èg_e
 
tcv
, 
bî_év_Àn_t
 *
dïth
) {

345 
	`as£π
(*
dïth
 > 0);

346 
tcv
) {

347 
XCT_BOTH
:

348 
XCT_UNKNOWN_BO
:

351 
XCT_OPENING
:

352 
XCT_UNKNOWN_OP
:

353 ++(*
dïth
);

355 
XCT_CLOSING
:

356 
XCT_UNKNOWN_CL
:

357 if(--(*
dïth
) == 0)

358  (
tcv
 =
XCT_CLOSING
) ? 2 : 1;

363 
	}
}

	@F:\ss_asn1\module.asn1-1\xer_decoder.h

5 #i‚def 
_XER_DECODER_H_


6 
	#_XER_DECODER_H_


	)

8 
	~<a¢_≠∂iˇti⁄.h
>

10 #ifde‡
__˝lu•lus


14 
a¢_TYPE_des¸ùt‹_s
;

19 
a¢_dec_rvÆ_t
 
xî_decode
(
a¢_codec_˘x_s
 *
›t_codec_˘x
,

20 
a¢_TYPE_des¸ùt‹_s
 *
ty≥_des¸ùt‹
,

21 **
°ru˘_±r
,

22 c⁄° *
buf„r
,

23 
size_t
 
size


29 
a¢_dec_rvÆ_t
 (
	txî_ty≥_decodî_f
)(
	ta¢_codec_˘x_t
 *
	t›t_codec_˘x
,

30 
	ta¢_TYPE_des¸ùt‹_s
 *
	tty≥_des¸ùt‹
,

31 **
	t°ru˘_±r
,

32 c⁄° *
	t›t_m«me
,

33 c⁄° *
	tbuf_±r
, 
	tsize_t
 
	tsize


46 
a¢_dec_rvÆ_t
 
xî_decode_gíîÆ
(
a¢_codec_˘x_t
 *
›t_codec_˘x
,

47 
a¢_°ru˘_˘x_t
 *
˘x
,

48 *
°ru˘_key
,

49 c⁄° *
xml_èg
,

50 c⁄° *
buf_±r
, 
size_t
 
size
,

51 (*
›t_u√x≥˘ed_èg_decodî
)

52 (*
°ru˘_key
, c⁄° *
chunk_buf
, 
size_t
 
chunk_size
),

53 
ssize_t
 (*
body_ª˚ivî
)

54 (*
°ru˘_key
, c⁄° *
chunk_buf
, 
size_t
 
chunk_size
,

55 
have_m‹e
)

65 
	epxî_chunk_ty≥
 {

66 
PXER_TAG
,

67 
PXER_TEXT
,

68 
PXER_COMMENT


69 } 
	tpxî_chunk_ty≥_e
;

70 
ssize_t
 
xî_√xt_tokí
(*
°©eC⁄ãxt
,

71 c⁄° *
buf„r
, 
size_t
 
size
, 
pxî_chunk_ty≥_e
 *
_ch_ty≥
);

76 
	exî_check_èg
 {

77 
XCT_BROKEN
 = 0,

78 
XCT_OPENING
 = 1,

79 
XCT_CLOSING
 = 2,

80 
XCT_BOTH
 = 3,

81 
XCT__UNK__MASK
 = 4,

82 
XCT_UNKNOWN_OP
 = 5,

83 
XCT_UNKNOWN_CL
 = 6,

84 
XCT_UNKNOWN_BO
 = 7

85 } 
	txî_check_èg_e
;

86 
xî_check_èg_e
 
xî_check_èg
(c⁄° *
buf_±r
, 
size
,

87 c⁄° *
√ed_èg
);

95 
xî_is_whôe•a˚
(c⁄° *
chunk_buf
, 
size_t
 
chunk_size
);

100 
xî_skù_unknown
(
xî_check_èg_e
 
tcv
, 
bî_év_Àn_t
 *
dïth
);

102 #ifde‡
__˝lu•lus


	@F:\ss_asn1\module.asn1-1\xer_encoder.c

5 
	~<a¢_öã∫Æ.h
>

6 
	~<°dio.h
>

7 
	~<î∫o.h
>

12 
a¢_íc_rvÆ_t


13 
	$xî_ícode
(
a¢_TYPE_des¸ùt‹_t
 *
td
, *
•å
,

14 
xî_ícodî_Êags_e
 
xî_Êags
,

15 
a¢_≠p_c⁄sume_byãs_f
 *
cb
, *
≠p_key
) {

16 
a¢_íc_rvÆ_t
 
î
, 
tm≥r
;

17 c⁄° *
m«me
;

18 
size_t
 
mÀn
;

19 
xˇn
 = (
xî_Êags
 & 
XER_F_CANONICAL
) ? 1 : 2;

21 if(!
td
 || !
•å
Ë
cb_Áûed
;

23 
m«me
 = 
td
->
xml_èg
;

24 
mÀn
 = 
	`°æí
(
m«me
);

26 
	`_ASN_CALLBACK3
("<", 1, 
m«me
, 
mÀn
, ">", 1);

28 
tm≥r
 = 
td
->
	`xî_ícodî
—d, 
•å
, 1, 
xî_Êags
, 
cb
, 
≠p_key
);

29 if(
tm≥r
.
ícoded
 == -1) Åmper;

31 
	`_ASN_CALLBACK3
("</", 2, 
m«me
, 
mÀn
, ">\n", 
xˇn
);

33 
î
.
ícoded
 = 4 + 
xˇn
 + (2 * 
mÀn
Ë+ 
tm≥r
.encoded;

35 
	`_ASN_ENCODED_OK
(
î
);

36 
cb_Áûed
:

37 
_ASN_ENCODE_FAILED
;

38 
	}
}

45 
	$xî__¥öt2Â
(c⁄° *
buf„r
, 
size_t
 
size
, *
≠p_key
) {

46 
FILE
 *
°ªam
 = (FILE *)
≠p_key
;

48 if(
	`fwrôe
(
buf„r
, 1, 
size
, 
°ªam
) != size)

52 
	}
}

55 
	$xî_Âröt
(
FILE
 *
°ªam
, 
a¢_TYPE_des¸ùt‹_t
 *
td
, *
•å
) {

56 
a¢_íc_rvÆ_t
 
î
;

58 if(!
°ªam
Ë°ªam = 
°dout
;

59 if(!
td
 || !
•å
)

62 
î
 = 
	`xî_ícode
(
td
, 
•å
, 
XER_F_BASIC
, 
xî__¥öt2Â
, 
°ªam
);

63 if(
î
.
ícoded
 == -1)

66  
	`fÊush
(
°ªam
);

67 
	}
}

	@F:\ss_asn1\module.asn1-1\xer_encoder.h

5 #i‚def 
_XER_ENCODER_H_


6 
	#_XER_ENCODER_H_


	)

8 
	~<a¢_≠∂iˇti⁄.h
>

10 #ifde‡
__˝lu•lus


14 
a¢_TYPE_des¸ùt‹_s
;

17 
	exî_ícodî_Êags_e
 {

19 
XER_F_BASIC
 = 0x01,

20 
XER_F_CANONICAL
 = 0x02

26 
a¢_íc_rvÆ_t
 
xî_ícode
(
a¢_TYPE_des¸ùt‹_s
 *
ty≥_des¸ùt‹
,

27 *
°ru˘_±r
,

28 
xî_ícodî_Êags_e
 
xî_Êags
,

29 
a¢_≠p_c⁄sume_byãs_f
 *
c⁄sume_byãs_cb
,

30 *
≠p_key


41 
xî_Âröt
(
FILE
 *
°ªam
, 
a¢_TYPE_des¸ùt‹_s
 *
td
, *
•å
);

46 
a¢_íc_rvÆ_t
 (
	txî_ty≥_ícodî_f
)(

47 
	ta¢_TYPE_des¸ùt‹_s
 *
	tty≥_des¸ùt‹
,

48 *
	t°ru˘_±r
,

49 
	tûevñ
,

50 
	txî_ícodî_Êags_e
 
	txî_Êags
,

51 
	ta¢_≠p_c⁄sume_byãs_f
 *
	tc⁄sume_byãs_cb
,

52 *
	t≠p_key


55 #ifde‡
__˝lu•lus


	@F:\ss_asn1\module.asn1-1\xer_support.c

7 
	~<a¢_sy°em.h
>

8 
	~<xî_suµ‹t.h
>

12 
	mST_TEXT
,

13 
	mST_TAG_START
,

14 
	mST_TAG_BODY
,

15 
	mST_TAG_QUOTE_WAIT
,

16 
	mST_TAG_QUOTED_STRING
,

17 
	mST_TAG_UNQUOTED_STRING
,

18 
	mST_COMMENT_WAIT_DASH1
,

19 
	mST_COMMENT_WAIT_DASH2
,

20 
	mST_COMMENT
,

21 
	mST_COMMENT_CLO_DASH2
,

22 
	mST_COMMENT_CLO_RT


23 } 
	tp°©e_e
;

25 
pxml_chunk_ty≥_e
 
	gföÆ_chunk_ty≥
[] = {

26 
PXML_TEXT
,

27 
PXML_TAG_END
,

28 
PXML_COMMENT_END
,

29 
PXML_TAG_END
,

30 
PXML_COMMENT_END
,

35 
	g_ch¨˛ass
[256] = {

45 
	#WHITESPACE
(
c
Ë(
_ch¨˛ass
[()(c)] =1)

	)

46 
	#ALNUM
(
c
Ë(
_ch¨˛ass
[()(c)] >2)

	)

47 
	#ALPHA
(
c
Ë(
_ch¨˛ass
[()(c)] =3)

	)

50 
	#EXCLAM
 0x21

	)

51 
	#CQUOTE
 0x22

	)

52 
	#CDASH
 0x2d

	)

53 
	#CSLASH
 0x2‡

	)

54 
	#LANGLE
 0x3¯

	)

55 
	#CEQUAL
 0x3d

	)

56 
	#RANGLE
 0x3ê

	)

57 
	#CQUEST
 0x3‡

	)

60 
	#TOKEN_CB_CALL
(
ty≥
, 
_ns
, 
_cuºít_too
, 
_föÆ
) do { \

61 
_ªt
; \

62 
p°©e_e
 
ns
 = 
_ns
; \

63 
ssize_t
 
_sz
 = (
p
 - 
chunk_°¨t
Ë+ 
_cuºít_too
; \

64 i‡(!
_sz
) { \

66 
°©e
 = 
_ns
; \

69 
_ªt
 = 
	`cb
(
ty≥
, 
chunk_°¨t
, 
_sz
, 
key
); \

70 if(
_ªt
 < 
_sz
) { \

71 if(
_cuºít_too
 && 
_ªt
 == -1) \

72 
°©e
 = 
ns
; \

73 
föish
; \

75 
chunk_°¨t
 = 
p
 + 
_cuºít_too
; \

76 
°©e
 = 
ns
; \

77 } 0)

	)

79 
	#TOKEN_CB
(
_ty≥
, 
_ns
, 
_cuºít_too
) \

80 
	`TOKEN_CB_CALL
(
_ty≥
, 
_ns
, 
_cuºít_too
, 0)

	)

82 
	#TOKEN_CB_FINAL
(
_ty≥
, 
_ns
, 
_cuºít_too
) \

83 
	`TOKEN_CB_CALL
(
föÆ_chunk_ty≥
[
_ty≥
], 
_ns
, 
_cuºít_too
, 1)

	)

88 
ssize_t
 
	$pxml_∑r£
(*
°©eC⁄ãxt
, c⁄° *
xmlbuf
, 
size_t
 
size
, 
pxml_ˇŒback_f
 *
cb
, *
key
) {

89 
p°©e_e
 
°©e
 = (p°©e_e)*
°©eC⁄ãxt
;

90 c⁄° *
chunk_°¨t
 = (c⁄° *)
xmlbuf
;

91 c⁄° *
p
 = 
chunk_°¨t
;

92 c⁄° *
íd
 = 
p
 + 
size
;

94 ; 
p
 < 
íd
;Ö++) {

95 
C
 = *(c⁄° *)
p
;

96 
°©e
) {

97 
ST_TEXT
:

102 i‡(
C
 =
LANGLE
)

104 
	`TOKEN_CB
(
PXML_TEXT
, 
ST_TAG_START
, 0);

106 
ST_TAG_START
:

107 i‡(
	`ALPHA
(
C
Ë|| (C =
CSLASH
))

108 
°©e
 = 
ST_TAG_BODY
;

109 i‡(
C
 =
EXCLAM
)

110 
°©e
 = 
ST_COMMENT_WAIT_DASH1
;

116 
	`TOKEN_CB
(
PXML_TEXT
, 
ST_TEXT
, 1);

118 
ST_TAG_BODY
:

119 
C
) {

120 
RANGLE
:

122 
	`TOKEN_CB_FINAL
(
PXML_TAG
, 
ST_TEXT
, 1);

124 
LANGLE
:

129 
	`TOKEN_CB_FINAL
(
PXML_TAG
, 
ST_TAG_START
, 0);

131 
CEQUAL
:

132 
°©e
 = 
ST_TAG_QUOTE_WAIT
;

136 
ST_TAG_QUOTE_WAIT
:

140 
C
) {

141 
CQUOTE
:

142 
°©e
 = 
ST_TAG_QUOTED_STRING
;

144 
RANGLE
:

146 
	`TOKEN_CB_FINAL
(
PXML_TAG
, 
ST_TEXT
, 1);

149 if(!
	`WHITESPACE
(
C
))

151 
°©e
 = 
ST_TAG_UNQUOTED_STRING
;

154 
ST_TAG_QUOTED_STRING
:

158 if(
C
 =
CQUOTE
) {

160 
°©e
 = 
ST_TAG_BODY
;

163 
ST_TAG_UNQUOTED_STRING
:

164 if(
C
 =
RANGLE
) {

166 
	`TOKEN_CB_FINAL
(
PXML_TAG
, 
ST_TEXT
, 1);

167 } if(
	`WHITESPACE
(
C
)) {

169 
°©e
 = 
ST_TAG_BODY
;

172 
ST_COMMENT_WAIT_DASH1
:

173 if(
C
 =
CDASH
) {

174 
°©e
 = 
ST_COMMENT_WAIT_DASH2
;

177 
°©e
 = 
ST_TAG_BODY
;

180 
ST_COMMENT_WAIT_DASH2
:

181 if(
C
 =
CDASH
) {

183 
°©e
 = 
ST_COMMENT
;

186 
°©e
 = 
ST_TAG_BODY
;

189 
ST_COMMENT
:

190 if(
C
 =
CDASH
) {

191 
°©e
 = 
ST_COMMENT_CLO_DASH2
;

194 
ST_COMMENT_CLO_DASH2
:

195 if(
C
 =
CDASH
) {

196 
°©e
 = 
ST_COMMENT_CLO_RT
;

199 
°©e
 = 
ST_COMMENT
;

202 
ST_COMMENT_CLO_RT
:

203 if(
C
 =
RANGLE
) {

204 
	`TOKEN_CB_FINAL
(
PXML_COMMENT
, 
ST_TEXT
, 1);

205 } if(
C
 =
CDASH
) {

208 
°©e
 = 
ST_COMMENT
;

217 if(
p
 - 
chunk_°¨t
) {

218 
°©e
) {

219 
ST_COMMENT
:

220 
	`TOKEN_CB
(
PXML_COMMENT
, 
°©e
, 0);

222 
ST_TEXT
:

223 
	`TOKEN_CB
(
PXML_TEXT
, 
°©e
, 0);

229 
föish
:

230 *
°©eC⁄ãxt
 = ()
°©e
;

231  
chunk_°¨t
 - (c⁄° *)
xmlbuf
;

232 
	}
}

	@F:\ss_asn1\module.asn1-1\xer_support.h

6 #i‚def 
_XER_SUPPORT_H_


7 
	#_XER_SUPPORT_H_


	)

9 
	~<a¢_sy°em.h
>

11 #ifde‡
__˝lu•lus


19 
PXML_TEXT
,

20 
PXML_TAG
,

21 
PXML_COMMENT
,

26 
PXML_TAG_END
,

27 
PXML_COMMENT_END


28 } 
	tpxml_chunk_ty≥_e
;

38 (
pxml_ˇŒback_f
)(
	tpxml_chunk_ty≥_e
 
	t_ty≥
,

39 c⁄° *
	t_chunk_d©a
, 
	tsize_t
 
	t_chunk_size
, *
	t_key
);

48 
ssize_t
 
pxml_∑r£
(*
_°©eC⁄ãxt
, c⁄° *
_buf
, 
size_t
 
_size
,

49 
pxml_ˇŒback_f
 *
cb
, *
_key
);

51 #ifde‡
__˝lu•lus


	@F:\ss_asn1\project.vim

1 
Àt
 
	gg
:
MyProje˘FûeName
 = 'testÖroject'

2 
Àt
 
g
:
MP_Cur_Prj
='.\'

3 
Àt
 
g
:
MP_Cègs_E«bÀ
 = 1

4 
Àt
 
g
:
MP_Csc›e_E«bÀ
 = 1

5 
Àt
 
g
:
MP_Cègs_P©h
 = 'ctags'

6 
Àt
 
g
:
MP_Csc›e_P©h
 = 'cscope'

7 
Àt
 
g
:
MP_Cègs_O±
 = ' --languages=c --langmap=c:+.h --extra=+q'

8 
Àt
 
g
:
MP_Wrôe_AutoUpd©e
 = 1

9 
Àt
 
g
:
MP_Bu‰ód_AutoLﬂd
 = 1

10 
Àt
 
g
:
MP_Lﬂd_E«bÀ
 = 1

11 
Àt
 
g
:
MP_Sour˚_Fûe_Ext_Name
 = 'c,h,hp,def'

16 " " ÊòØÂê¶ÂêØÁî®
˘ags


18 " " ÊòØÂê¶ÂêØÁî®
csc›e


20 " " ÂÆö‰πâ
˘ags
ÁöÑË∑ØÂæÑ

22 " " ÂÆö‰πâ
csc›e
ÁöÑË∑ØÂæÑ

24 " "ËÆæÁΩÆ
gªp
ÁöÑË∑ØÂæÑ

25 " " 
Tùs
: Â¶ÇÊûúÊòØÂú®
wödows
‰∏ã‰ΩøÁî®
cygwö
ÁöÑ
gªp
ÁöÑËØùÔºåÊêúÁ¥¢ÁªìÊûú‰∏≠ÁªèÂ∏∏‰ºöÂá∫Áé∞Ë≠¶ÂëäÔºåÈúÄË¶ÅÂú®Á≥ªÁªü‰∏≠Ê∑ªÂä†‰∏Ä‰∏™ÂêçÂè´
CYGWIN
ÔºåÂÄº‰∏∫
nodosfûew¨nög
ÁöÑÁéØÂ¢ÉÂèòÈáè

27 " " ÂÆö‰πâ
˘ags
ÂèÇÊï∞,ÊØîÂ¶Ç
	gc
++È°πÁõÆÂèØ‰ª•Âú®
	g¥oje˘
.
	gvim
‰∏≠ÂÆö‰πâ"--c++-kinds=+px"

29 " " Âú®Êñá‰ª∂ÂÜôÂÖ•Êó∂ÊòØÂê¶Ëá™Âä®Êõ¥Êñ∞
	gègs


33 " " ÊòØÂê¶ÂÖÅËÆ∏Êõ¥Êñ∞
ègs
(ÈÄÇÂêà‰∏¥Êó∂ËÆæÁΩÆÁ¶ÅÁî®ÊàñÂêØÁî®)

35 " " ÊòØÂê¶ÂÖÅËÆ∏ËΩΩÂÖ•
ègs
(ÈÄÇÂêà‰∏¥Êó∂ËÆæÁΩÆÁ¶ÅÁî®ÊàñÂêØÁî®)

37 " " ÈúÄË¶ÅÂª∫Á´ã
	gègs
ÁöÑÊñá‰ª∂ÂêéÁºÄÂêç(ÂèØ‰ª•ÈíàÂØπ‰∏çÂêåÈ°πÁõÆÂú®ÂêÑËá™ÁöÑ
	g¥oje˘
.
	gvim
Êñá‰ª∂‰∏≠ÂÆö‰πâ)

	@asn_application.h

8 #i‚def 
_ASN_APPLICATION_H_


9 
	#_ASN_APPLICATION_H_


	)

11 
	~"a¢_sy°em.h
"

12 
	~"a¢_codecs.h
"

14 #ifde‡
__˝lu•lus


25 (
a¢_≠p_c⁄sume_byãs_f
)(c⁄° *
	tbuf„r
, 
	tsize_t
 
	tsize
,

26 *
	t≠∂iˇti⁄_•ecific_key
);

36 (
a¢_≠p_c⁄°øöt_Áûed_f
)(*
	t≠∂iˇti⁄_•ecific_key
,

37 
	ta¢_TYPE_des¸ùt‹_s
 *
	tty≥_des¸ùt‹_which_Áûed
,

38 c⁄° *
	t°ru˘uª_which_Áûed_±r
,

39 c⁄° *
	tîr‹_mesßge_f‹m©
, ...Ë
	tGCC_PRINTFLIKE
(4, 5);

41 #ifde‡
__˝lu•lus


45 
	~"c⁄°r_TYPE.h
"

	@asn_codecs.h

6 #i‚def 
_ASN_CODECS_H_


7 
	#_ASN_CODECS_H_


	)

9 #ifde‡
__˝lu•lus


13 
a¢_TYPE_des¸ùt‹_s
;

24 
	sa¢_codec_˘x_s
 {

36 
size_t
 
max_°ack_size
;

37 } 
	ta¢_codec_˘x_t
;

42 
	sa¢_íc_rvÆ_s
 {

48 
ssize_t
 
ícoded
;

55 
a¢_TYPE_des¸ùt‹_s
 *
Áûed_ty≥
;

58 *
°ru˘uª_±r
;

59 } 
	ta¢_íc_rvÆ_t
;

60 
	#_ASN_ENCODE_FAILED
 do { \

61 
a¢_íc_rvÆ_t
 
tmp_îr‹
; \

62 
tmp_îr‹
.
ícoded
 = -1; \

63 
tmp_îr‹
.
Áûed_ty≥
 = 
td
; \

64 
tmp_îr‹
.
°ru˘uª_±r
 = 
•å
; \

65 
	`ASN_DEBUG
("FaûedÅÿícodêñemíà%s", 
td
->
«me
); \

66  
tmp_îr‹
; \

67 } 0)

	)

68 
	#_ASN_ENCODED_OK
(
rvÆ
) do { \

69 
rvÆ
.
°ru˘uª_±r
 = 0; \

70 
rvÆ
.
Áûed_ty≥
 = 0; \

71  
rvÆ
; \

72 } 0)

	)

82 
	ea¢_dec_rvÆ_code_e
 {

83 
RC_OK
,

84 
RC_WMORE
,

85 
RC_FAIL


87 
	sa¢_dec_rvÆ_s
 {

88 
a¢_dec_rvÆ_code_e
 
code
;

89 
size_t
 
c⁄sumed
;

90 } 
	ta¢_dec_rvÆ_t
;

91 
	#_ASN_DECODE_FAILED
 do { \

92 
a¢_dec_rvÆ_t
 
tmp_îr‹
; \

93 
tmp_îr‹
.
code
 = 
RC_FAIL
; \

94 
tmp_îr‹
.
c⁄sumed
 = 0; \

95 
	`ASN_DEBUG
("FaûedÅÿdecodêñemíà%s", 
td
->
«me
); \

96  
tmp_îr‹
; \

97 } 0)

	)

98 
	#_ASN_DECODE_STARVED
 do { \

99 
a¢_dec_rvÆ_t
 
tmp_îr‹
; \

100 
tmp_îr‹
.
code
 = 
RC_WMORE
; \

101 
tmp_îr‹
.
c⁄sumed
 = 0; \

102  
tmp_îr‹
; \

103 } 0)

	)

105 #ifde‡
__˝lu•lus


	@asn_internal.h

9 #i‚def 
_ASN_INTERNAL_H_


10 
	#_ASN_INTERNAL_H_


	)

12 
	~"a¢_≠∂iˇti⁄.h
"

14 #i‚def 
__NO_ASSERT_H__


15 
	~<as£π.h
>

18 #ifdef 
__˝lu•lus


23 
	#ASN1C_ENVIRONMENT_VERSION
 922

	)

24 
gë_a¢1c_ívú⁄mít_vîsi⁄
();

26 
	#CALLOC
(
nmemb
, 
size
Ë
	`ˇŒoc
“memb, size)

	)

27 
	#MALLOC
(
size
Ë
	`mÆloc
(size)

	)

28 
	#REALLOC
(
ﬁd±r
, 
size
Ë
	`ªÆloc
(ﬁd±r, size)

	)

29 
	#FREEMEM
(
±r
Ë
	`‰ì
’å)

	)

35 #i‚def 
ASN_DEBUG


36 #if 
EMIT_ASN_DEBUG
 == 1

37 #ifdef 
__GNUC__


38 #ifdef 
ASN_THREAD_SAFE


39 
	#a¢_debug_ödít
 0

	)

41 
a¢_debug_ödít
;

43 
	#ASN_DEBUG
(
fmt
, 
¨gs
...) do { \

44 
adi
 = 
a¢_debug_ödít
; \

45 
adi
--Ë
	`Ârötf
(
°dîr
, " "); \

46 
	`Ârötf
(
°dîr
, 
fmt
, ##
¨gs
); \

47 
	`Ârötf
(
°dîr
, " (%s:%d)\n", \

48 
__FILE__
, 
__LINE__
); \

49 } 0)

	)

51 
ASN_DEBUG_f
(c⁄° *
fmt
, ...);

52 
	#ASN_DEBUG
 
ASN_DEBUG_f


	)

55 
ölöe
 
ASN_DEBUG
(c⁄° *
fmt
, ...) { ()fmt; }

62 
	#__ASN_E_cbc
(
buf
, 
size
Ë(
	`cb
((buf), (size), 
≠p_key
Ë< 0)

	)

63 
	#_ASN_E_CALLBACK
(
foo
) do { \

64 if(
foo
Ë
cb_Áûed
; \

65 } 0)

	)

66 
	#_ASN_CALLBACK
(
buf
, 
size
) \

67 
	`_ASN_E_CALLBACK
(
	`__ASN_E_cbc
(
buf
, 
size
))

	)

68 
	#_ASN_CALLBACK2
(
buf1
, 
size1
, 
buf2
, 
size2
) \

69 
	`_ASN_E_CALLBACK
(
	`__ASN_E_cbc
(
buf1
, 
size1
Ë|| __ASN_E_cbc(
buf2
, 
size2
))

	)

70 
	#_ASN_CALLBACK3
(
buf1
, 
size1
, 
buf2
, 
size2
, 
buf3
, 
size3
) \

71 
	`_ASN_E_CALLBACK
(
	`__ASN_E_cbc
(
buf1
, 
size1
) \

72 || 
	`__ASN_E_cbc
(
buf2
, 
size2
) \

73 || 
	`__ASN_E_cbc
(
buf3
, 
size3
))

	)

75 
	#_i_ASN_TEXT_INDENT
(
∆
, 
Àvñ
) do { \

76 
__Àvñ
 = (
Àvñ
); \

77 
__∆
 = ((
∆
) != 0); \

78 
__i
; \

79 if(
__∆
Ë
	`_ASN_CALLBACK
("\n", 1); \

80 if(
__Àvñ
 < 0) __level = 0; \

81 
__i
 = 0; __ò< 
__Àvñ
; __i++) \

82 
	`_ASN_CALLBACK
(" ", 4); \

83 
î
.
ícoded
 +
__∆
 + 4 * 
__Àvñ
; \

84 } 0)

	)

86 
	#_i_INDENT
(
∆
) do { \

87 
__i
; \

88 if((
∆
Ë&& 
	`cb
("\n", 1, 
≠p_key
) < 0)  -1; \

89 
__i
 = 0; __ò< 
ûevñ
; __i++) \

90 if(
	`cb
(" ", 4, 
≠p_key
) < 0)  -1; \

91 } 0)

	)

96 
	#_ASN_DEFAULT_STACK_MAX
 (30000)

	)

97 
ölöe
 

98 
_ASN_STACK_OVERFLOW_CHECK
(
a¢_codec_˘x_t
 *
˘x
) {

99 if(
˘x
 && ctx->
max_°ack_size
) {

102 
±rdiff_t
 
u£d°ack
 = ((*)
˘x
 - (*)&ctx);

103 if(
u£d°ack
 > 0) usedstack = -usedstack;

106 if(
u£d°ack
 < -(
±rdiff_t
)
˘x
->
max_°ack_size
) {

107 
ASN_DEBUG
("StackÜimit %ldÑeached",

108 ()
˘x
->
max_°ack_size
);

115 #ifdef 
__˝lu•lus


	@asn_system.h

9 #i‚def 
_ASN_SYSTEM_H_


10 
	#_ASN_SYSTEM_H_


	)

12 #ifdef 
HAVE_CONFIG_H


13 
	~"c⁄fig.h
"

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<°rög.h
>

19 
	~<sys/ty≥s.h
>

20 
	~<limôs.h
>

21 
	~<°d¨g.h
>

22 
	~<°ddef.h
>

24 #ifdef 
WIN32


26 
	~<mÆloc.h
>

27 
	#¢¥ötf
 
_¢¥ötf


	)

28 
	#v¢¥ötf
 
_v¢¥ötf


	)

31 
	#sys_¡ohl
(
l
) ((((l) << 24) & 0xff000000) \

32 | (((
l
) << 16) & 0xff0000) \

33 | (((
l
) << 8) & 0xff00) \

34 | ((
l
Ë& 0xff))

	)

36 #ifde‡
_MSC_VER


37 #i‚de‡
__˝lu•lus


38 
	#ölöe
 
__ölöe


	)

40 #i‚def 
ASSUMESTDTYPES


41 
	#ssize_t
 
SSIZE_T


	)

42 
	töt8_t
;

43 
	töt16_t
;

44 
	töt32_t
;

45 
	tuöt8_t
;

46 
	tuöt16_t
;

47 
	tuöt32_t
;

49 
	#WIN32_LEAN_AND_MEAN


	)

50 
	~<wödows.h
>

51 
	~<Êﬂt.h
>

52 
	#i¢™
 
_i¢™


	)

53 
	#föôe
 
_föôe


	)

54 
	#c›ysign
 
_c›ysign


	)

55 
	#ûogb
 
_logb


	)

57 
	~<°döt.h
>

62 #i‡
deföed
(
__vxw‹ks
)

63 
	~<ty≥s/vxTy≥s.h
>

66 
	~<öây≥s.h
>

73 #if (!
deföed
(
__FªeBSD__
Ë|| !deföed(
_SYS_INTTYPES_H_
))

74 #if 
deföed
(
sun
)

75 
	~<Æloˇ.h
>

76 
	~<õìÂ.h
>

77 #ñif 
deföed
(
__hpux
)

78 #ifdef 
__GNUC__


79 
	~<Æloˇ.h
>

81 
	#ölöe


	)

84 
	~<°döt.h
>

88 
	~<√töë/ö.h
>

89 
	#sys_¡ohl
(
foo
Ë
	`¡ohl
(foo)

	)

95 #if 
__GNUC__
 >= 3

96 #i‚def 
GCC_PRINTFLIKE


97 
	#GCC_PRINTFLIKE
(
fmt
,
v¨
Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
,fmt,v¨)))

	)

99 #i‚def 
GCC_NOTUSED


100 
	#GCC_NOTUSED
 
	`__©åibuã__
((
unu£d
))

	)

103 #i‚def 
GCC_PRINTFLIKE


104 
	#GCC_PRINTFLIKE
(
fmt
,
v¨
Ë

	)

106 #i‚def 
GCC_NOTUSED


107 
	#GCC_NOTUSED


	)

112 #i‡!
deföed
(
ASN_THREAD_SAFE
Ë&& (deföed(
THREAD_SAFE
Ë|| deföed(
_REENTRANT
))

113 
	#ASN_THREAD_SAFE


	)

116 #i‚def 
off£tof


117 
	#off£tof
(
s
, 
m
Ë((
±rdiff_t
)&(((†*)0)->mË- (±rdiff_t)((†*)0))

	)

120 #i‚def 
MIN


121 #i‡
deföed
(
__GNUC__
)

122 
	#MIN
(
a
,
b
Ë({ 
__ty≥of
á 
_a
 =á; __ty≥o‡b 
_b
 = b; \

123 ((
_a
)<(
_b
)?(_a):(_b)); })

	)

125 
	#MIN
(
a
,
b
Ë(◊)<(b)?◊):(b)Ë

	)

	@constr_TYPE.h

12 #i‚def 
_CONSTR_TYPE_H_


13 
	#_CONSTR_TYPE_H_


	)

15 
	~<bî_év_Àngth.h
>

16 
	~<bî_év_èg.h
>

18 #ifde‡
__˝lu•lus


22 
a¢_TYPE_des¸ùt‹_s
;

23 
a¢_TYPE_membî_s
;

30 
	sa¢_°ru˘_˘x_s
 {

31 
pha£
;

32 
°ï
;

33 
c⁄ãxt
;

34 *
±r
;

35 
bî_év_Àn_t
 
À·
;

36 } 
	ta¢_°ru˘_˘x_t
;

38 
	~<bî_decodî.h
>

39 
	~<dî_ícodî.h
>

40 
	~<xî_decodî.h
>

41 
	~<xî_ícodî.h
>

42 
	~<≥r_decodî.h
>

43 
	~<≥r_ícodî.h
>

44 
	~<c⁄°øöts.h
>

53 (
a¢_°ru˘_‰ì_f
)(

54 
	ta¢_TYPE_des¸ùt‹_s
 *
	tty≥_des¸ùt‹
,

55 *
	t°ru˘_±r
, 
	t‰ì_c⁄ã¡s_⁄ly
);

56 
	#ASN_STRUCT_FREE
(
a¢_DEF
, 
±r
Ë◊¢_DEF).
	`‰ì_°ru˘
(&◊¢_DEF),±r,0)

	)

57 
	#ASN_STRUCT_FREE_CONTENTS_ONLY
(
a¢_DEF
, 
±r
) \

58 (
a¢_DEF
).
	`‰ì_°ru˘
(&◊¢_DEF),
±r
,1)

	)

63 (
a¢_°ru˘_¥öt_f
)(

64 
	ta¢_TYPE_des¸ùt‹_s
 *
	tty≥_des¸ùt‹
,

65 c⁄° *
	t°ru˘_±r
,

66 
	tÀvñ
,

67 
	ta¢_≠p_c⁄sume_byãs_f
 *
	tˇŒback
, *
	t≠p_key
);

75 
bî_év_èg_t
 (
	ta¢_outmo°_èg_f
)(

76 
	ta¢_TYPE_des¸ùt‹_s
 *
	tty≥_des¸ùt‹
,

77 c⁄° *
	t°ru˘_±r
, 
	tèg_mode
, 
	tbî_év_èg_t
 
	tèg
);

79 
a¢_outmo°_èg_f
 
a¢_TYPE_outmo°_èg
;

85 
	sa¢_TYPE_des¸ùt‹_s
 {

86 *
«me
;

87 *
xml_èg
;

93 
a¢_°ru˘_‰ì_f
 *
‰ì_°ru˘
;

94 
a¢_°ru˘_¥öt_f
 *
¥öt_°ru˘
;

95 
a¢_c⁄°r_check_f
 *
check_c⁄°øöts
;

96 
bî_ty≥_decodî_f
 *
bî_decodî
;

97 
dî_ty≥_ícodî_f
 *
dî_ícodî
;

98 
xî_ty≥_decodî_f
 *
xî_decodî
;

99 
xî_ty≥_ícodî_f
 *
xî_ícodî
;

100 
≥r_ty≥_decodî_f
 *
u≥r_decodî
;

101 
≥r_ty≥_ícodî_f
 *
u≥r_ícodî
;

110 
a¢_outmo°_èg_f
 *
outmo°_èg
;

111 
bî_év_èg_t
 *
ègs
;

112 
ègs_cou¡
;

113 
bî_év_èg_t
 *
Æl_ègs
;

114 
Æl_ègs_cou¡
;

116 
a¢_≥r_c⁄°øöts_t
 *
≥r_c⁄°øöts
;

121 
a¢_TYPE_membî_s
 *
ñemíts
;

122 
ñemíts_cou¡
;

128 *
•ecifics
;

129 } 
	ta¢_TYPE_des¸ùt‹_t
;

135 
	ea¢_TYPE_Êags_e
 {

136 
ATF_NOFLAGS
,

137 
ATF_POINTER
 = 0x01,

138 
ATF_OPEN_TYPE
 = 0x02

140 
	sa¢_TYPE_membî_s
 {

141 
a¢_TYPE_Êags_e
 
Êags
;

142 
›ti⁄Æ
;

143 
memb_off£t
;

144 
bî_év_èg_t
 
èg
;

145 
èg_mode
;

146 
a¢_TYPE_des¸ùt‹_t
 *
ty≥
;

147 
a¢_c⁄°r_check_f
 *
memb_c⁄°øöts
;

148 
a¢_≥r_c⁄°øöts_t
 *
≥r_c⁄°øöts
;

149 (*
deÁu…_vÆue
)(
£tvÆ
, **
•å
);

150 *
«me
;

151 } 
	ta¢_TYPE_membî_t
;

156 
	sa¢_TYPE_èg2membî_s
 {

157 
bî_év_èg_t
 
ñ_èg
;

158 
ñ_no
;

159 
toff_fú°
;

160 
toff_œ°
;

161 } 
	ta¢_TYPE_èg2membî_t
;

172 
a¢_Âröt
(
FILE
 *
°ªam
,

173 
a¢_TYPE_des¸ùt‹_t
 *
td
,

174 c⁄° *
°ru˘_±r
);

176 #ifde‡
__˝lu•lus


	@constraints.h

5 #i‚def 
_ASN1_CONSTRAINTS_VALIDATOR_H_


6 
	#_ASN1_CONSTRAINTS_VALIDATOR_H_


	)

8 
	~<a¢_sy°em.h
>

10 #ifde‡
__˝lu•lus


14 
a¢_TYPE_des¸ùt‹_s
;

29 
a¢_check_c⁄°øöts
(
a¢_TYPE_des¸ùt‹_s
 *
ty≥_des¸ùt‹
,

30 c⁄° *
°ru˘_±r
,

31 *
îrbuf
,

32 
size_t
 *
îæí


40 (
a¢_c⁄°r_check_f
)(

41 
	ta¢_TYPE_des¸ùt‹_s
 *
	tty≥_des¸ùt‹
,

42 c⁄° *
	t°ru˘_±r
,

43 
	ta¢_≠p_c⁄°øöt_Áûed_f
 *
	t›ti⁄Æ_ˇŒback
,

44 *
	t›ti⁄Æ_≠p_key


51 
a¢_c⁄°r_check_f
 
a¢_gíîic_no_c⁄°øöt
;

52 
a¢_c⁄°r_check_f
 
a¢_gíîic_unknown_c⁄°øöt
;

57 
	#_ASN_CTFAIL
 if(
˘Áûcb
Ë
	)
ctfailcb

59 #ifde‡
__˝lu•lus


	@
1
.
0
51
1838
F:\ss_asn1\cscope.files
F:\ss_asn1\lookupfile_genTags_windows.bat
F:\ss_asn1\lookupfile_genTags_windows.sh
F:\ss_asn1\module.asn1-1\+Compiler.Log
F:\ss_asn1\module.asn1-1\BIT_STRING.c
F:\ss_asn1\module.asn1-1\BIT_STRING.h
F:\ss_asn1\module.asn1-1\Makefile
F:\ss_asn1\module.asn1-1\Makefile.am.sample
F:\ss_asn1\module.asn1-1\OCTET_STRING.c
F:\ss_asn1\module.asn1-1\OCTET_STRING.h
F:\ss_asn1\module.asn1-1\asn_application.h
F:\ss_asn1\module.asn1-1\asn_codecs.h
F:\ss_asn1\module.asn1-1\asn_codecs_prim.c
F:\ss_asn1\module.asn1-1\asn_codecs_prim.h
F:\ss_asn1\module.asn1-1\asn_internal.h
F:\ss_asn1\module.asn1-1\asn_system.h
F:\ss_asn1\module.asn1-1\ber_decoder.c
F:\ss_asn1\module.asn1-1\ber_decoder.h
F:\ss_asn1\module.asn1-1\ber_tlv_length.c
F:\ss_asn1\module.asn1-1\ber_tlv_length.h
F:\ss_asn1\module.asn1-1\ber_tlv_tag.c
F:\ss_asn1\module.asn1-1\ber_tlv_tag.h
F:\ss_asn1\module.asn1-1\constr_TYPE.c
F:\ss_asn1\module.asn1-1\constr_TYPE.h
F:\ss_asn1\module.asn1-1\constraints.c
F:\ss_asn1\module.asn1-1\constraints.h
F:\ss_asn1\module.asn1-1\converter-sample.c
F:\ss_asn1\module.asn1-1\der_encoder.c
F:\ss_asn1\module.asn1-1\der_encoder.h
F:\ss_asn1\module.asn1-1\module.asn1
F:\ss_asn1\module.asn1-1\per_decoder.c
F:\ss_asn1\module.asn1-1\per_decoder.h
F:\ss_asn1\module.asn1-1\per_encoder.c
F:\ss_asn1\module.asn1-1\per_encoder.h
F:\ss_asn1\module.asn1-1\per_opentype.c
F:\ss_asn1\module.asn1-1\per_opentype.h
F:\ss_asn1\module.asn1-1\per_support.c
F:\ss_asn1\module.asn1-1\per_support.h
F:\ss_asn1\module.asn1-1\xer_decoder.c
F:\ss_asn1\module.asn1-1\xer_decoder.h
F:\ss_asn1\module.asn1-1\xer_encoder.c
F:\ss_asn1\module.asn1-1\xer_encoder.h
F:\ss_asn1\module.asn1-1\xer_support.c
F:\ss_asn1\module.asn1-1\xer_support.h
F:\ss_asn1\project.vim
asn_application.h
asn_codecs.h
asn_internal.h
asn_system.h
constr_TYPE.h
constraints.h
