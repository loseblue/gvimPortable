cscope 15 D:\Projects\modem2.5g\branches\l4\navi\baseband\l4\at\engine\src"               0000218648
	@D:\Projects\modem2.5g\branches\l4\navi\baseband\l4\at\engine\src\at.c

13 
	~"©_d©a.h
"

14 
	~"cos.h
"

15 
	~"©_ß.h
"

16 
	~"sxs_cfg.h
"

19 
©_Ctx_t
 
	g©_C⁄ãxt
;

30 
	$©_Inô
 ()

32 
	`AT_ModuÀInô
();

34 
	`AT_InôUtiTabÀ
();

35 i‡(
	`SA_InôFsm
(Ë=
FALSE
)

37 
	`sxs_Ârötf
 (
_AT
, "initialize SA (FSM) failed!");

40 
	}
}

52 
	$©_Pro˚ssEvt
 ( )

55 
	}
}

66 
	$©_P¨£
 ( 
u32
 
EvtId
 , 
Msg_t
 * 
MsgPå
)

69 
EvtId
)

76 
	`©_Pro˚ssEvt
();

77 
	}
}

89 
	$©_P¨£Msg
 ( * 
Msg
 )

91 
Msg_t
 *
pMsg
 = (Msg_à*)
Msg
;

92 
	`sxs_Ârötf
 (
_AT
|
	`TNB_ARG
(1), "ATÑe˚ivêmsg %d\n", ((
Msg_t
*)
Msg
)->
H
.
Id
);

95 if(((
Msg_t
*)
Msg
)->
H
.
Id
 == 1)

97 
Msg_t
 *
PtMsg
;

99 
	`sxr_Fªe
(
Msg
);

100 
PtMsg
 = 
	`sxr_MÆloc
 ( (
L4_MsgH_t
Ë+ (
u32
));

101 
PtMsg
->
H
.
Id
 = 1;

103 
	`sxr_Síd
 (
PtMsg
, 
SPL_MBX
, 0);

106 
	`©_Di•©chMesßge
(
pMsg
);

108 
	`sxr_Fªe
(
pMsg
);

110 
	}
}

122 
	$©_P¨£Sig«l
 ( 
u32
 * 
Sig«l
 )

124 
Sig«l
[0])

130 
	}
}

143 c⁄° 
sxs_TaskP¨£_t
 
	g©_TaskP¨£
 =

145 
©_Inô
,

146 
©_P¨£Msg
,

147 
©_P¨£Sig«l
,

148 
AT_MBX


	@D:\Projects\modem2.5g\branches\l4\navi\baseband\l4\at\engine\src\at_cmdlist.c

14 
	~"©.h
"

15 
	~"©_ß.h
"

16 
	~"©_moduÀ.h
"

18 
	$AT_FªeCurCmd
(
AT_CMD
** 
µCmdLi°
, AT_CMD * 
pCmd
)

20 i‡(*
µCmdLi°
 =
NULL
)

25 i‡(
pCmd
 !
NULL
)

27 *
µCmdLi°
 = 
pCmd
->
pNext
;

28 
	`AT_FREE
(
pCmd
);

32 
	}
}

34 
	$AT_Re£tCmdLi°
(
AT_CMD
** 
µCmdLi°
)

36 
AT_CMD
 * 
p
 = 
NULL
;

37 
AT_CMD
 * 
q
 = 
NULL
;

39 i‡(*
µCmdLi°
 =
NULL
)

44 
p
 = *
µCmdLi°
;

46 
p
 !
NULL
)

48 
q
 = 
p
->
pNext
;

49 
	`AT_FªeCurCmd
(
µCmdLi°
, 
p
);

50 
p
 = 
NULL
;

51 
p
 = 
q
;

54 *
µCmdLi°
 = 
NULL
;

57 
	}
}

59 
boﬁ
 
	$AT_AddCmdToLi°
(
AT_CMD
 * 
pCmd
)

61 
AT_CMD
 * 
p
 = 
NULL
;

62 
AT_CMD
 * 
q
 = 
NULL
;

63 
AT_CMD
** 
µCmdLi°
 = 
	`AT_GëComm™dLi°
();

65 i‡(
pCmd
 =
NULL
)

66  
FALSE
;

68 
p
 = *
µCmdLi°
;

70 
pCmd
->
pNext
 = 
NULL
;

72 
pCmd
->
pCmdFunc
 = (
p‚_AtCmdH™dÀr
)
	`SA_GëCmdH™dÀr
’Cmd->
pName
, 0);

75 i‡(
p
 =
NULL
)

77 *
µCmdLi°
 = 
pCmd
;

81 
p
 !
NULL
)

83 
q
 = 
p
;

84 
p
 =Ö->
pNext
;

87 
q
->
pNext
 = 
pCmd
;

90  
TRUE
;

91 
	}
}

92 
boﬁ
 
	$AT_AddCmdToLi°Mux
(
AT_CMD
 * 
pCmd
,
uöt8
 
nDLCI
)

94 
AT_CMD
 * 
p
 = 
NULL
;

95 
AT_CMD
 * 
q
 = 
NULL
;

96 
AT_CMD
** 
µCmdLi°
 = 
	`AT_GëComm™dLi°Mux
(
nDLCI
);

98 i‡(
pCmd
 =
NULL
)

99  
FALSE
;

101 
p
 = *
µCmdLi°
;

103 
pCmd
->
pNext
 = 
NULL
;

105 
pCmd
->
pCmdFunc
 = (
p‚_AtCmdH™dÀr
)
	`SA_GëCmdH™dÀr
’Cmd->
pName
, 
nDLCI
);

108 i‡(
p
 =
NULL
)

110 *
µCmdLi°
 = 
pCmd
;

114 
p
 !
NULL
)

116 
q
 = 
p
;

117 
p
 =Ö->
pNext
;

120 
q
->
pNext
 = 
pCmd
;

123  
TRUE
;

124 
	}
}

126 
öt32
 
	$AT_GëCmdCou¡
(
AT_CMD
* 
pCmdLi°
)

128 
öt32
 
cou¡
 = 0;

129 
AT_CMD
 * 
p
 = 
NULL
;

130 
AT_CMD
 * 
q
 = 
NULL
;

132 i‡(
pCmdLi°
 =
NULL
)

134  
cou¡
;

137 
p
 = 
pCmdLi°
;

139 
p
 !
NULL
)

141 
q
 = 
p
->
pNext
;

142 
cou¡
++;

143 
p
 = 
q
;

146  
cou¡
;

147 
	}
}

149 
	$AT_FªeCurInd
(
AT_IND
**
µIndLi°
, AT_IND *
pInd
)

151 i‡(*
µIndLi°
 =
NULL
)

156 i‡(
pInd
 !
NULL
)

158 *
µIndLi°
 = 
pInd
->
pNext
;

159 
	`AT_FREE
(
pInd
);

163 
	}
}

165 
	$AT_Re£tIndLi°
(
AT_IND
** 
µIndLi°
)

167 
AT_IND
 * 
p
 = 
NULL
;

168 
AT_IND
 * 
q
 = 
NULL
;

170 i‡(*
µIndLi°
 =
NULL
)

175 
p
 = *
µIndLi°
;

177 
p
 !
NULL
)

179 
q
 = 
p
->
pNext
;

180 
	`AT_FªeCurInd
(
µIndLi°
, 
p
);

182 i‡(
p
 !
NULL
)

184 
	`AT_FREE
(
p
);

187 
p
 = 
q
;

190 *
µIndLi°
 = 
NULL
;

193 
	}
}

195 
	$AT_AddIndToLi°
(
AT_IND
** 
µIndLi°
, AT_IND* 
pInd
)

197 
AT_IND
 * 
p
 = 
NULL
;

198 
AT_IND
 * 
q
 = 
NULL
;

200 i‡(
pInd
 =
NULL
)

205 
p
 = *
µIndLi°
;

207 i‡(
p
 =
NULL
)

209 *
µIndLi°
 = 
pInd
;

213 
p
 !
NULL
)

215 
q
 = 
p
;

216 
p
 =Ö->
pNext
;

219 
q
->
pNext
 = 
pInd
;

223 
	}
}

225 
öt32
 
	$AT_GëIndCou¡
(
AT_IND
* 
pIndLi°
)

227 
öt32
 
cou¡
 = 0;

228 
AT_IND
 * 
p
 = 
NULL
;

229 
AT_IND
 * 
q
 = 
NULL
;

231 i‡(
pIndLi°
 =
NULL
)

233  
cou¡
;

236 
p
 = 
pIndLi°
;

238 
p
 !
NULL
)

240 
q
 = 
p
->
pNext
;

241 
cou¡
++;

242 
p
 = 
q
;

245  
cou¡
;

246 
	}
}

	@D:\Projects\modem2.5g\branches\l4\navi\baseband\l4\at\engine\src\at_command_table.c

16 
	~"©.h
"

17 
	~"©_ß.h
"

19 
	~"©_cmd_pbk.h
"

20 
	~"©_cmd_cc.h
"

21 
	~"©_cmd_sms.h
"

22 
	~"©_cmd_gc.h
"

23 
	~"©_cmd_sim.h
"

24 
	~"©_cmd_nw.h
"

25 
	~"©_cmd_g¥s.h
"

26 
	~"©_cmd_gc.h
"

27 
	~"©_cmd_•ecül.h
"

28 
	~"©_cmd_•ecül_emod.h
"

29 
	~"©_cmd_•ecül_audio.h
"

30 
	~"©_cmd_•ecül_cc.h
"

31 
	~"©_cmd_•ecül_sms.h
"

32 
	~"©_cmd_•ecül_b©ãry.h
"

33 
	~"©_cmd_•ecül_Êash.h
"

34 
	~"©_cmd_ss.h
"

35 
	~"©_cmd_id.h
"

36 
	~"©_cmd_ßt.h
"

37 
	~"©_cmd_t˝ù.h
"

45 
	#FSM_POWER_DOWN_CMD_ENABLE
 0x00000001

	)

46 
	#FSM_NORMAL_CMD_ENABLE
 0x00000002

	)

47 
	#FSM_CHGR_NORMAL_CMD_ENABLE
 0x00000004

	)

48 
	#FSM_CHGR_ONLY_CMD_ENABLE
 0x00000008

	)

49 
	#FSM_ALARM_NORMAL_CMD_ENABLE
 0x00000010

	)

50 
	#FSM_ALARM_ONLY_CMD_ENABLE
 0x00000020

	)

51 
	#FSM_SLEEP_CMD_ENABLE
 0x00000040

	)

52 
	#FSM_CFW_OFF_CMD_ENABLE
 0x00000080

	)

55 
	#FSM_FULL_STATUS_CMD_ENABLE
 ((
FSM_NORMAL_CMD_ENABLE
) \

56 |(
FSM_CHGR_NORMAL_CMD_ENABLE
)|(
FSM_CHGR_ONLY_CMD_ENABLE
) \

57 |(
FSM_ALARM_NORMAL_CMD_ENABLE
)|(
FSM_ALARM_ONLY_CMD_ENABLE
) \

58 |(
FSM_SLEEP_CMD_ENABLE
)|(
FSM_CFW_OFF_CMD_ENABLE
))

	)

60 
	#FSM_LIMITED1_STATUS_CMD_ENABLE
 ((
FSM_NORMAL_CMD_ENABLE
)|(
FSM_CHGR_ONLY_CMD_ENABLE
) \

61 |(
FSM_ALARM_ONLY_CMD_ENABLE
))

	)

63 
	#FSM_LIMITED2_STATUS_CMD_ENABLE
 ((
FSM_NORMAL_CMD_ENABLE
) \

64 |(
FSM_CHGR_NORMAL_CMD_ENABLE
)|(
FSM_CHGR_ONLY_CMD_ENABLE
) \

65 |(
FSM_ALARM_NORMAL_CMD_ENABLE
)|(
FSM_ALARM_ONLY_CMD_ENABLE
) \

66 |(
FSM_SLEEP_CMD_ENABLE
)|(
FSM_CFW_OFF_CMD_ENABLE
))

	)

68 
	#FSM_DISABLE_STATUS_CMD_ENABLE
 (0x00000000)

	)

72 
	#AT_PROC_MODE_CMD_ENABLE
 0x00000001

	)

73 
	#AT_PROC_MODE_OLCMD_ENABLE
 0x00000002

	)

74 
	#AT_PROC_MODE_CS_ENABLE
 0x00000004

	)

75 
	#AT_PROC_MODE_PS_ENABLE
 0x00000008

	)

78 
	#AT_AT_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_OLCMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

79 
	#AT_FA_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
}

	)

80 
	#AT_CR_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_OLCMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

83 
	#AT_REPEAT_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

86 
	#AT_ATD_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

87 
	#AT_ATH_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_OLCMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

89 
	#AT_ATA_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_OLCMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

90 
	#AT_CLCC_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

91 
	#AT_VTS_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

92 
	#AT_CHUP_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

93 
	#AT_VTD_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

94 
	#AT_CHLD_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

95 
	#AT_DLST_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

97 
	#AT_CMGS_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

98 
	#AT_CMGW_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

99 
	#AT_CPMS_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

100 
	#AT_CSCA_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

101 
	#AT_CSMS_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

102 
	#AT_CMGD_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

103 
	#AT_CMGF_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

104 
	#AT_SMGO_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

105 
	#AT_CMGL_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

106 
	#AT_CMGR_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

107 
	#AT_CSDH_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

108 
	#AT_CNMI_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

109 
	#AT_CSMP_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

110 
	#AT_CNMA_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

111 
	#AT_CMSS_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

113 
	#AT_CSAS_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

114 
	#AT_CRES_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

117 
	#AT_COPS_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

118 
	#AT_CSQ_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

119 
	#AT_COPN_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

120 
	#AT_CREG_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

121 
	#AT_CPOL_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

123 #ifde‡
AT_USER_DBS


124 
	#AT_POSI_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

125 
	#AT_CGSN_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

129 
	#AT_CCWA_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

130 
	#AT_CCFC_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

131 
	#AT_CLIP_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

132 
	#AT_CLIR_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

133 
	#AT_COLP_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

134 
	#AT_COLR_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

135 
	#AT_CUSD_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

136 
	#AT_CSSN_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

137 
	#AT_CACM_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

139 
	#AT_CAOC_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

140 
	#AT_CPUC_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

141 
	#AT_CSVM_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

142 
	#AT_CMUX_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

146 
	#AT_CPBS_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

147 
	#AT_CPBR_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

148 
	#AT_CPBF_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

149 
	#AT_CPBW_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

150 
	#AT_WPCS_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

151 
	#AT_CNUM_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

154 
	#AT_STGI_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

155 
	#AT_STR_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

156 
	#AT_STA_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

159 
	#AT_CGMM_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

160 
	#AT_GMM_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

161 
	#AT_CGMR_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

162 
	#AT_GMR_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

163 
	#AT_CGMI_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

164 
	#AT_GMI_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

165 #i‚de‡
AT_USER_DBS


166 
	#AT_CGSN_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

168 
	#AT_GSN_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

169 
	#AT_ATI_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

170 
	#AT_CIMI_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

173 
	#AT_CPIN_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

174 
	#AT_CPIN2_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

175 
	#AT_CPINC_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

176 
	#AT_CLCK_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

177 
	#AT_CPWD_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

178 
	#AT_CRSM_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

179 
	#AT_CAMM_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

182 
	#AT_SVRADDR_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

183 
	#AT_DATACLASS_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

184 
	#AT_CONNECT_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

187 
	#AT_CMER_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

188 
	#AT_CEER_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

189 
	#AT_CMEE_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

190 
	#AT_CFUN_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

191 
	#AT_CSCS_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

192 
	#AT_CCLK_PERM
 {
FSM_LIMITED1_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

193 
	#AT_ATE_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

194 
	#AT_ATV_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

195 
	#AT_ATQ_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

196 
	#AT_ATZ_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

197 
	#AT_CALA_PERM
 {
FSM_LIMITED1_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

198 
	#AT_CALD_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

199 
	#AT_ANDF_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

200 
	#AT_ATX_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

204 
	#AT_ANDW_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

205 
	#AT_S0_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

206 
	#AT_S5_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

207 
	#AT_S3_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

208 
	#AT_S4_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

209 
	#AT_CDTMF_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

210 
	#AT_IPR_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

211 
	#AT_ICF_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

212 
	#AT_IFC_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

214 
	#AT_MONI_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

215 
	#AT_MONIEND_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

216 
	#AT_MONP_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

217 
	#AT_MONPEND_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

218 
	#AT_SCID_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

219 
	#AT_SBBI_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

220 
	#AT_SBBR_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

221 
	#AT_NBBR_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

222 
	#AT_SBBW_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

223 
	#AT_NBBW_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

224 
	#AT_DPBK_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

225 
	#AT_DREG_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

226 
	#AT_DFFS_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

227 
	#AT_DSMS_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

228 
	#AT_PRDU_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

229 
	#AT_AUST_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

230 
	#AT_AUEND_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

231 
	#AT_SAIC_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

232 
	#AT_CBC_PERM
 {
FSM_LIMITED1_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

233 
	#AT_CBCM_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

234 
	#AT_SCTM_PERM
 {
FSM_LIMITED1_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

235 
	#AT_CPAS_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

236 
	#AT_CIND_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

237 
	#AT_CLVL_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

238 
	#AT_CMUT_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

239 
	#AT_VGR_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

240 
	#AT_VGT_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

241 
	#AT_CRMP_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

242 
	#AT_CAUDIO_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

243 
	#AT_SNFS_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

244 
	#AT_SLCD_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

245 
	#AT_STCD_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

249 
	#AT_CRSL_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

251 
	#AT_CPOF_PERM
 {
FSM_LIMITED1_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

255 
	#AT_CGDCONT_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
}

	)

256 
	#AT_CGQREQ_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
}

	)

257 
	#AT_CGQMIN_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
}

	)

258 
	#AT_CGATT_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
}

	)

259 
	#AT_CGACT_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
}

	)

260 
	#AT_CGPADDR_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
}

	)

261 
	#AT_CGDATA_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
}

	)

262 
	#AT_CGAUTO_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
}

	)

263 
	#AT_CGANS_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
}

	)

264 
	#AT_CGCLASS_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
}

	)

265 
	#AT_CGEREP_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
}

	)

266 
	#AT_CGREG_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
}

	)

267 
	#AT_CGSMS_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
}

	)

268 
	#AT_CRC_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
}

	)

269 
	#AT_TCPIP_PERM
 {
FSM_NORMAL_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
}

	)

273 
	#AT_ATO_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
}

	)

274 
	#AT_3PLUS_PERM
 {
FSM_LIMITED2_STATUS_CMD_ENABLE
,
AT_PROC_MODE_CMD_ENABLE
|
AT_PROC_MODE_OLCMD_ENABLE
|
AT_PROC_MODE_CS_ENABLE
}

	)

276 c⁄° 
SA_COMMAND_TABLE_T
 
	gg_Comm™dTabÀ
[] =

279 {(
uöt8
*)"AT" , 
SA_DeÁu…CmdH™dÀr_AT
, 
SA_CMDCLS_SYS
, 1, 
AT_AT_PERM
},

280 {(
uöt8
*)"FA" , 
SA_DeÁu…CmdH™dÀr_Eº‹
, 
SA_CMDCLS_SYS
, 1, 
AT_FA_PERM
},

281 {(
uöt8
*)"<CR>" , 
SA_DeÁu…CmdH™dÀr_CR
, 
SA_CMDCLS_SYS
, 1, 
AT_CR_PERM
},

282 {(
uöt8
*)"A/" , 
AT_EX_CmdFunc_RCMD
, 
SA_CMDCLS_SYS
, 1, 
AT_REPEAT_PERM
},

283 {(
uöt8
*)"+CMUX" , 
SA_DeÁu…CmdH™dÀr_CMUX
, 
SA_CMDCLS_SS
, 1, 
AT_CMUX_PERM
},

284 {(
uöt8
*)"+++" , 
AT_CC_CmdFunc_3PLUS
, 
SA_CMDCLS_SYS
, 1, 
AT_3PLUS_PERM
},

287 {(
uöt8
*)"D" , 
AT_CC_CmdFunc_D
, 
SA_CMDCLS_CC
, 1, 
AT_ATD_PERM
},

288 {(
uöt8
*)"O" , 
AT_CC_CmdFunc_O
, 
SA_CMDCLS_CC
, 1, 
AT_ATO_PERM
},

289 {(
uöt8
*)"H" , 
AT_CC_CmdFunc_H
, 
SA_CMDCLS_CC
, 1, 
AT_ATH_PERM
},

290 {(
uöt8
*)"A" , 
AT_CC_CmdFunc_A
, 
SA_CMDCLS_CC
, 1, 
AT_ATA_PERM
},

291 {(
uöt8
*)"+CLCC" , 
AT_CC_CmdFunc_CLCC
, 
SA_CMDCLS_CC
, 1, 
AT_CLCC_PERM
},

292 {(
uöt8
*)"+VTS" , 
AT_CC_CmdFunc_VTS
, 
SA_CMDCLS_CC
, 1, 
AT_VTS_PERM
},

293 {(
uöt8
*)"+CHUP" , 
AT_CC_CmdFunc_CHUP
, 
SA_CMDCLS_CC
, 1, 
AT_CHUP_PERM
},

297 {(
uöt8
*)"+VTD" , 
AT_CC_CmdFunc_VTD
, 
SA_CMDCLS_CC
, 1, 
AT_VTD_PERM
},

298 {(
uöt8
*)"+CHLD" , 
AT_CC_CmdFunc_CHLD
, 
SA_CMDCLS_CC
, 1, 
AT_CHLD_PERM
},

299 {(
uöt8
*)"+DLST" , 
AT_CC_CmdFunc_DLST
, 
SA_CMDCLS_CC
, 1, 
AT_DLST_PERM
},

300 #ifde‡
AT_USER_DBS


301 {(
uöt8
*)"+SENDSOUND" , 
AT_CC_CmdFunc_SENDSOUND
, 
SA_CMDCLS_CC
, 1, 
AT_VTD_PERM
},

305 {(
uöt8
*)"+CMGS" , 
AT_SMS_CmdFunc_CMGS
, 
SA_CMDCLS_SMS
, 1, 
AT_CMGS_PERM
},

306 {(
uöt8
*)"+CMGW" , 
AT_SMS_CmdFunc_CMGW
, 
SA_CMDCLS_SMS
, 1, 
AT_CMGW_PERM
},

307 {(
uöt8
*)"+CPMS" , 
AT_SMS_CmdFunc_CPMS
, 
SA_CMDCLS_SMS
, 1, 
AT_CPMS_PERM
},

308 {(
uöt8
*)"+CSCA" , 
AT_SMS_CmdFunc_CSCA
, 
SA_CMDCLS_SMS
, 1, 
AT_CSCA_PERM
},

309 {(
uöt8
*)"+CSMS" , 
AT_SMS_CmdFunc_CSMS
, 
SA_CMDCLS_SMS
, 1, 
AT_CSMS_PERM
},

310 {(
uöt8
*)"+CMGD" , 
AT_SMS_CmdFunc_CMGD
, 
SA_CMDCLS_SMS
, 1, 
AT_CMGD_PERM
},

311 {(
uöt8
*)"+CMGF" , 
AT_SMS_CmdFunc_CMGF
, 
SA_CMDCLS_SMS
, 1, 
AT_CMGF_PERM
},

313 {(
uöt8
*)"+CMGL" , 
AT_SMS_CmdFunc_CMGL
, 
SA_CMDCLS_SMS
, 1, 
AT_CMGL_PERM
},

314 {(
uöt8
*)"+CMGR" , 
AT_SMS_CmdFunc_CMGR
, 
SA_CMDCLS_SMS
, 1, 
AT_CMGR_PERM
},

315 {(
uöt8
*)"+CSDH" , 
AT_SMS_CmdFunc_CSDH
, 
SA_CMDCLS_SMS
, 1, 
AT_CSDH_PERM
},

316 {(
uöt8
*)"+CNMI" , 
AT_SMS_CmdFunc_CNMI
, 
SA_CMDCLS_SMS
, 1, 
AT_CNMI_PERM
},

317 {(
uöt8
*)"+CSMP" , 
AT_SMS_CmdFunc_CSMP
, 
SA_CMDCLS_SMS
, 1, 
AT_CSMP_PERM
},

318 {(
uöt8
*)"+CNMA" , 
AT_SMS_CmdFunc_CNMA
, 
SA_CMDCLS_SMS
, 1, 
AT_CNMA_PERM
},

319 {(
uöt8
*)"+CMSS" , 
AT_SMS_CmdFunc_CMSS
, 
SA_CMDCLS_SMS
, 1, 
AT_CMSS_PERM
},

320 {(
uöt8
*)"+CSAS" , 
AT_SMS_CmdFunc_CSAS
, 
SA_CMDCLS_SMS
, 1, 
AT_CSAS_PERM
},

321 {(
uöt8
*)"+CRES" , 
AT_SMS_CmdFunc_CRES
, 
SA_CMDCLS_SMS
, 1, 
AT_CRES_PERM
},

324 {(
uöt8
*)"+COPS" , 
AT_NW_CmdFunc_COPS
, 
SA_CMDCLS_NW
, 1, 
AT_COPS_PERM
},

325 {(
uöt8
*)"+CSQ" , 
AT_NW_CmdFunc_CSQ
, 
SA_CMDCLS_NW
, 1, 
AT_CSQ_PERM
},

326 {(
uöt8
*)"+COPN" , 
AT_NW_CmdFunc_COPN
, 
SA_CMDCLS_NW
, 1, 
AT_COPN_PERM
},

327 {(
uöt8
*)"+CREG" , 
AT_NW_CmdFunc_CREG
, 
SA_CMDCLS_NW
, 1, 
AT_CREG_PERM
},

328 {(
uöt8
*)"+CPOL" , 
AT_NW_CmdFunc_CPOL
, 
SA_CMDCLS_NW
, 1, 
AT_CPOL_PERM
},

330 #ifde‡
AT_USER_DBS


331 {(
uöt8
*)"+POSI" , 
AT_NW_CmdFunc_POSI
, 
SA_CMDCLS_NW
, 1, 
AT_POSI_PERM
},

332 {(
uöt8
*)"+CGSN" , 
AT_NW_CmdFunc_CGSN
, 
SA_CMDCLS_NW
, 1, 
AT_CGSN_PERM
},

333 {(
uöt8
*)"+GSMSTATUS" , 
AT_NW_CmdFunc_GSMSTATUS
, 
SA_CMDCLS_NW
, 1, 
AT_CGSN_PERM
},

338 {(
uöt8
*)"+CCWA" , 
AT_SS_CmdFunc_CCWA
, 
SA_CMDCLS_SS
, 1, 
AT_CCWA_PERM
},

339 {(
uöt8
*)"+CCFC" , 
AT_SS_CmdFunc_CCFC
, 
SA_CMDCLS_SS
, 1, 
AT_CCFC_PERM
},

340 {(
uöt8
*)"+CLIP" , 
AT_SS_CmdFunc_CLIP
, 
SA_CMDCLS_SS
, 1, 
AT_CLIP_PERM
},

341 {(
uöt8
*)"+CLIR" , 
AT_SS_CmdFunc_CLIR
, 
SA_CMDCLS_SS
, 1, 
AT_CLIR_PERM
 },

342 {(
uöt8
*)"+COLP" , 
AT_SS_CmdFunc_COLP
, 
SA_CMDCLS_SS
, 1, 
AT_COLP_PERM
},

343 {(
uöt8
*)"+COLR" , 
AT_SS_CmdFunc_COLR
, 
SA_CMDCLS_SS
, 1, 
AT_COLR_PERM
},

344 {(
uöt8
*)"+CUSD" , 
AT_SS_CmdFunc_CUSD
, 
SA_CMDCLS_SS
, 1, 
AT_CUSD_PERM
},

345 {(
uöt8
*)"+CSSN" , 
AT_SS_CmdFunc_CSSN
, 
SA_CMDCLS_SS
, 1, 
AT_CSSN_PERM
},

346 {(
uöt8
*)"+CAOC" , 
AT_SS_CmdFunc_CAOC
, 
SA_CMDCLS_SS
, 1, 
AT_CAOC_PERM
},

347 {(
uöt8
*)"+CPUC" , 
AT_SS_CmdFunc_CPUC
, 
SA_CMDCLS_SS
, 1, 
AT_CPUC_PERM
},

348 {(
uöt8
*)"+CACM" , 
AT_SS_CmdFunc_CACM
, 
SA_CMDCLS_SMS
, 1, 
AT_CACM_PERM
},

353 {(
uöt8
*)"+CPBS" , 
AT_PBK_CmdFunc_CPBS
, 
SA_CMDCLS_PBK
, 1, 
AT_CPBS_PERM
},

354 {(
uöt8
*)"+CPBR" , 
AT_PBK_CmdFunc_CPBR
, 
SA_CMDCLS_PBK
, 1, 
AT_CPBR_PERM
},

355 {(
uöt8
*)"+CPBF" , 
AT_PBK_CmdFunc_CPBF
, 
SA_CMDCLS_PBK
, 1, 
AT_CPBF_PERM
},

356 {(
uöt8
*)"+CPBW" , 
AT_PBK_CmdFunc_CPBW
, 
SA_CMDCLS_PBK
, 1, 
AT_CPBW_PERM
},

357 {(
uöt8
*)"+CNUM" , 
AT_PBK_CmdFunc_CNUM
, 
SA_CMDCLS_PBK
, 1, 
AT_CNUM_PERM
},

362 {(
uöt8
*)"^STGI" , 
AT_SAT_CmdFunc_STGI
, 
SA_CMDCLS_SAT
, 1, 
AT_STGI_PERM
},

363 {(
uöt8
*)"^STR" , 
AT_SAT_CmdFunc_STR
, 
SA_CMDCLS_SAT
, 1, 
AT_STR_PERM
},

364 {(
uöt8
*)"^STA" , 
AT_SAT_CmdFunc_STA
, 
SA_CMDCLS_SAT
, 1, 
AT_STA_PERM
},

367 {(
uöt8
*)"+CGMM" , 
AT_ID_CmdFunc_CGMM
, 
SA_CMDCLS_ID
, 1, 
AT_CGMM_PERM
},

368 {(
uöt8
*)"+GMM" , 
AT_ID_CmdFunc_GMM
, 
SA_CMDCLS_ID
, 1, 
AT_GMM_PERM
},

369 {(
uöt8
*)"+CGMR" , 
AT_ID_CmdFunc_CGMR
, 
SA_CMDCLS_ID
, 1, 
AT_CGMR_PERM
},

370 {(
uöt8
*)"+GMR" , 
AT_ID_CmdFunc_GMR
, 
SA_CMDCLS_ID
, 1, 
AT_GMR_PERM
},

371 {(
uöt8
*)"+CGMI" , 
AT_ID_CmdFunc_CGMI
, 
SA_CMDCLS_ID
, 1, 
AT_CGMI_PERM
},

372 {(
uöt8
*)"+GMI" , 
AT_ID_CmdFunc_GMI
, 
SA_CMDCLS_ID
, 1, 
AT_GMI_PERM
},

373 #i‚de‡
AT_USER_DBS


374 {(
uöt8
*)"+CGSN" , 
AT_ID_CmdFunc_CGSN
, 
SA_CMDCLS_ID
, 1, 
AT_CGSN_PERM
},

376 {(
uöt8
*)"+GSN" , 
AT_ID_CmdFunc_GSN
, 
SA_CMDCLS_ID
, 1, 
AT_GSN_PERM
},

377 {(
uöt8
*)"I" , 
AT_ID_CmdFunc_I
, 
SA_CMDCLS_ID
, 1, 
AT_ATI_PERM
},

378 {(
uöt8
*)"+CIMI" , 
AT_ID_CmdFunc_CIMI
, 
SA_CMDCLS_ID
, 1, 
AT_CIMI_PERM
},

381 {(
uöt8
*)"+CPIN" , 
AT_SIM_CmdFunc_CPIN
, 
SA_CMDCLS_SIM
, 1, 
AT_CPIN_PERM
},

382 {(
uöt8
*)"+CPIN2" , 
AT_SIM_CmdFunc_CPIN2
, 
SA_CMDCLS_SIM
, 1, 
AT_CPIN2_PERM
},

383 {(
uöt8
*)"^CPINC" , 
AT_SIM_CmdFunc_CPINC
, 
SA_CMDCLS_SIM
, 1, 
AT_CPINC_PERM
},

384 {(
uöt8
*)"+CLCK" , 
AT_SIM_CmdFunc_CLCK
, 
SA_CMDCLS_SIM
, 1, 
AT_CLCK_PERM
},

385 {(
uöt8
*)"+CPWD" , 
AT_SIM_CmdFunc_CPWD
, 
SA_CMDCLS_SIM
, 1, 
AT_CPWD_PERM
},

387 {(
uöt8
*)"+CRSM" , 
AT_SIM_CmdFunc_CRSM
, 
SA_CMDCLS_SIM
, 1, 
AT_CRSM_PERM
},

388 {(
uöt8
*)"+CAMM" , 
AT_SIM_CmdFunc_CAMM
, 
SA_CMDCLS_SIM
, 1, 
AT_CAMM_PERM
},

390 #ifde‡
AT_DUAL_SIM


391 {(
uöt8
*)"+SIM" , 
AT_SIM_CmdFunc_SETSIM
, 
SA_CMDCLS_SIM
, 1, 
AT_CAMM_PERM
},

401 {(
uöt8
*)"+CMER" , 
AT_GC_CmdFunc_CMER
, 
SA_CMDCLS_GC
, 1, 
AT_CMER_PERM
},

402 {(
uöt8
*)"+CEER" , 
AT_GC_CmdFunc_CEER
, 
SA_CMDCLS_GC
, 1, 
AT_CEER_PERM
 },

404 {(
uöt8
*)"+CMEE" , 
AT_GC_CmdFunc_CMEE
, 
SA_CMDCLS_GC
, 1, 
AT_CMEE_PERM
},

405 {(
uöt8
*)"+CFUN" , 
AT_GC_CmdFunc_CFUN
, 
SA_CMDCLS_GC
, 1, 
AT_CFUN_PERM
},

406 {(
uöt8
*)"+CSCS" , 
AT_GC_CmdFunc_CSCS
, 
SA_CMDCLS_GC
, 1, 
AT_CSCS_PERM
},

407 {(
uöt8
*)"+CCLK" , 
AT_GC_CmdFunc_CCLK
, 
SA_CMDCLS_GC
, 1, 
AT_CCLK_PERM
},

408 {(
uöt8
*)"E" , 
AT_GC_CmdFunc_E
, 
SA_CMDCLS_GC
, 1, 
AT_ATE_PERM
},

409 {(
uöt8
*)"V" , 
AT_GC_CmdFunc_V
, 
SA_CMDCLS_GC
, 1, 
AT_ATV_PERM
},

410 {(
uöt8
*)"Q" , 
AT_GC_CmdFunc_Q
, 
SA_CMDCLS_GC
, 1, 
AT_ATQ_PERM
},

411 {(
uöt8
*)"Z" , 
AT_GC_CmdFunc_Z
, 
SA_CMDCLS_GC
, 1, 
AT_ATZ_PERM
},

412 {(
uöt8
*)"+CALA" , 
AT_GC_CmdFunc_CALA
, 
SA_CMDCLS_GC
, 1, 
AT_CALA_PERM
},

413 {(
uöt8
*)"+CALD" , 
AT_GC_CmdFunc_CALD
, 
SA_CMDCLS_GC
, 1, 
AT_CALD_PERM
},

414 {(
uöt8
*)"&F" , 
AT_GC_CmdFunc_AndF
, 
SA_CMDCLS_GC
, 1, 
AT_ANDF_PERM
},

415 {(
uöt8
*)"X" , 
AT_GC_CmdFunc_X
, 
SA_CMDCLS_GC
, 1, 
AT_ATX_PERM
},

419 {(
uöt8
*)"&W" , 
AT_GC_CmdFunc_AndW
, 
SA_CMDCLS_GC
, 1, 
AT_ANDW_PERM
},

420 {(
uöt8
*)"S0" , 
AT_GC_CmdFunc_S0
, 
SA_CMDCLS_GC
, 1, 
AT_S0_PERM
},

421 {(
uöt8
*)"S5" , 
AT_GC_CmdFunc_S5
, 
SA_CMDCLS_GC
, 1, 
AT_S5_PERM
},

422 {(
uöt8
*)"S3" , 
AT_GC_CmdFunc_S3
, 
SA_CMDCLS_GC
, 1, 
AT_S3_PERM
},

423 {(
uöt8
*)"S4" , 
AT_GC_CmdFunc_S4
, 
SA_CMDCLS_GC
, 1, 
AT_S4_PERM
},

427 {(
uöt8
*)"+CDTMF" , 
AT_GC_CmdFunc_CDTMF
, 
SA_CMDCLS_GC
, 1, 
AT_CDTMF_PERM
},

429 {(
uöt8
*)"+IPR" , 
AT_GC_CmdFunc_IPR
, 
SA_CMDCLS_GC
, 1, 
AT_IPR_PERM
},

431 {(
uöt8
*)"+ICF" , 
AT_GC_CmdFunc_ICF
, 
SA_CMDCLS_GC
, 1, 
AT_ICF_PERM
 },

432 {(
uöt8
*)"+IFC" , 
AT_GC_CmdFunc_IFC
, 
SA_CMDCLS_GC
, 1, 
AT_IFC_PERM
 },

433 {(
uöt8
*)"+CAUDIO" , 
AT_AUDIO_CmdFunc_CAUDIO
, 
SA_CMDCLS_EX
, 1, 
AT_CAUDIO_PERM
},

434 {(
uöt8
*)"+CRSL" , 
AT_AUDIO_CmdFunc_CRSL
, 
SA_CMDCLS_EX
, 1, 
AT_CRSL_PERM
},

435 {(
uöt8
*)"+AUST" , 
AT_AUDIO_CmdFunc_AUST
, 
SA_CMDCLS_EX
, 1, 
AT_AUST_PERM
},

436 {(
uöt8
*)"+AUEND" , 
AT_AUDIO_CmdFunc_AUEND
, 
SA_CMDCLS_EX
, 1, 
AT_AUEND_PERM
},

437 {(
uöt8
*)"+VGR" , 
AT_AUDIO_CmdFunc_VGR
, 
SA_CMDCLS_EX
, 1, 
AT_VGR_PERM
},

438 {(
uöt8
*)"+VGT" , 
AT_AUDIO_CmdFunc_VGT
, 
SA_CMDCLS_EX
, 1, 
AT_VGT_PERM
},

439 #i‚de‡
AT_USER_DBS


440 {(
uöt8
*)"+CRMP" , 
AT_AUDIO_CmdFunc_CRMP
, 
SA_CMDCLS_EX
, 1, 
AT_CRMP_PERM
},

442 {(
uöt8
*)"+CLVL" , 
AT_AUDIO_CmdFunc_CLVL
, 
SA_CMDCLS_EX
, 1, 
AT_CLVL_PERM
},

443 {(
uöt8
*)"+CBC" , 
AT_BATTERY_CmdFunc_CBC
, 
SA_CMDCLS_EX
, 1, 
AT_CBC_PERM
},

444 {(
uöt8
*)"+CBCM" , 
AT_BATTERY_CmdFunc_CBCM
, 
SA_CMDCLS_EX
, 1, 
AT_CBCM_PERM
},

445 {(
uöt8
*)"+CPOF" , 
AT_GC_CmdFunc_CPOF
, 
SA_CMDCLS_EX
, 1, 
AT_CPOF_PERM
},

447 {(
uöt8
*)"+DPBK" , 
AT_EMOD_CmdFunc_DPBK
, 
SA_CMDCLS_EX
, 1, 
AT_DPBK_PERM
},

448 {(
uöt8
*)"+DREG" , 
AT_EMOD_CmdFunc_DREG
, 
SA_CMDCLS_EX
, 1, 
AT_DREG_PERM
},

449 {(
uöt8
*)"+DFFS" , 
AT_EMOD_CmdFunc_DFFS
, 
SA_CMDCLS_EX
, 1, 
AT_DFFS_PERM
},

450 {(
uöt8
*)"+DSMS" , 
AT_EMOD_CmdFunc_DSMS
, 
SA_CMDCLS_EX
, 1, 
AT_DSMS_PERM
},

451 {(
uöt8
*)"+SLCD" , 
AT_EMOD_CmdFunc_SLCD
, 
SA_CMDCLS_EX
, 1, 
AT_SLCD_PERM
},

452 {(
uöt8
*)"+STCD" , 
AT_EMOD_CmdFunc_STCD
, 
SA_CMDCLS_EX
, 1, 
AT_STCD_PERM
},

453 {(
uöt8
*)"+MONI" , 
AT_EMOD_CmdFunc_MONI
, 
SA_CMDCLS_EX
, 1, 
AT_MONI_PERM
},

454 {(
uöt8
*)"+MONIEND" , 
AT_EMOD_CmdFunc_MONIEND
, 
SA_CMDCLS_EX
, 1, 
AT_MONIEND_PERM
},

455 {(
uöt8
*)"+MONP" , 
AT_EMOD_CmdFunc_MONP
, 
SA_CMDCLS_EX
, 1, 
AT_MONP_PERM
},

456 {(
uöt8
*)"+MONPEND" , 
AT_EMOD_CmdFunc_MONPEND
, 
SA_CMDCLS_EX
, 1, 
AT_MONPEND_PERM
},

457 {(
uöt8
*)"+SBBI" , 
AT_EMOD_CmdFunc_SBBI
, 
SA_CMDCLS_EX
, 1, 
AT_SBBI_PERM
},

458 {(
uöt8
*)"+SBBR" , 
AT_EMOD_CmdFunc_SBBR
, 
SA_CMDCLS_EX
, 1, 
AT_SBBR_PERM
},

459 {(
uöt8
*)"+NBBR" , 
AT_EMOD_CmdFunc_NBBR
, 
SA_CMDCLS_EX
, 1, 
AT_NBBR_PERM
},

460 {(
uöt8
*)"+SBBW" , 
AT_EMOD_CmdFunc_SBBW
, 
SA_CMDCLS_EX
, 1, 
AT_SBBW_PERM
},

461 {(
uöt8
*)"+NBBW" , 
AT_EMOD_CmdFunc_NBBW
, 
SA_CMDCLS_EX
, 1, 
AT_NBBW_PERM
},

462 {(
uöt8
*)"+CPAS" , 
AT_GC_CmdFunc_CPAS
, 
SA_CMDCLS_EX
, 1, 
AT_CPAS_PERM
},

463 {(
uöt8
*)"+CIND" , 
AT_GC_CmdFunc_CIND
, 
SA_CMDCLS_EX
, 1, 
AT_CIND_PERM
},

464 {(
uöt8
*)"+SNFS" , 
AT_AUDIO_CmdFunc_SNFS
, 
SA_CMDCLS_EX
, 1, 
AT_SNFS_PERM
},

465 {(
uöt8
*)"+CMUT" , 
AT_AUDIO_CmdFunc_CMUT
, 
SA_CMDCLS_EX
, 1, 
AT_CMUT_PERM
},

466 {(
uöt8
*)"+SCID" , 
AT_EMOD_CmdFunc_SCID
, 
SA_CMDCLS_EX
, 1, 
AT_SCID_PERM
},

482 {(
uöt8
*)"+CGDCONT" , 
AT_GPRS_CmdFunc_CGDCONT
, 
SA_CMDCLS_GPRS
, 1, 
AT_CGDCONT_PERM
},

483 {(
uöt8
*)"+CGQREQ" , 
AT_GPRS_CmdFunc_CGQREQ
, 
SA_CMDCLS_GPRS
, 1, 
AT_CGQREQ_PERM
},

484 {(
uöt8
*)"+CGQMIN" , 
AT_GPRS_CmdFunc_CGQMIN
, 
SA_CMDCLS_GPRS
, 1, 
AT_CGQMIN_PERM
},

485 {(
uöt8
*)"+CGATT" , 
AT_GPRS_CmdFunc_CGATT
, 
SA_CMDCLS_GPRS
, 1, 
AT_CGATT_PERM
},

486 {(
uöt8
*)"+CGACT" , 
AT_GPRS_CmdFunc_CGACT
, 
SA_CMDCLS_GPRS
, 1, 
AT_CGACT_PERM
},

487 {(
uöt8
*)"+CGPADDR" , 
AT_GPRS_CmdFunc_CGPADDR
, 
SA_CMDCLS_GPRS
, 1, 
AT_CGPADDR_PERM
},

488 {(
uöt8
*)"+CGDATA" , 
AT_GPRS_CmdFunc_CGDATA
, 
SA_CMDCLS_GPRS
, 1, 
AT_CGDATA_PERM
},

489 {(
uöt8
*)"+CGAUTO" , 
AT_GPRS_CmdFunc_CGAUTO
, 
SA_CMDCLS_GPRS
, 1, 
AT_CGAUTO_PERM
},

490 {(
uöt8
*)"+CGANS" , 
AT_GPRS_CmdFunc_CGANS
, 
SA_CMDCLS_GPRS
, 1, 
AT_CGANS_PERM
},

491 {(
uöt8
*)"+CGCLASS" , 
AT_GPRS_CmdFunc_CGCLASS
, 
SA_CMDCLS_GPRS
, 1, 
AT_CGCLASS_PERM
},

492 {(
uöt8
*)"+CGEREP" , 
AT_GPRS_CmdFunc_CGEREP
, 
SA_CMDCLS_GPRS
, 1, 
AT_CGEREP_PERM
},

493 {(
uöt8
*)"+CGREG" , 
AT_GPRS_CmdFunc_CGREG
, 
SA_CMDCLS_GPRS
, 1, 
AT_CGREG_PERM
},

494 {(
uöt8
*)"+CGSMS" , 
AT_GPRS_CmdFunc_CGSMS
, 
SA_CMDCLS_GPRS
, 1, 
AT_CGSMS_PERM
},

495 {(
uöt8
*)"+CRC" , 
AT_GPRS_CmdFunc_CRC
, 
SA_CMDCLS_GPRS
, 1, 
AT_CRC_PERM
},

496 {(
uöt8
*)"+CIPSTART" , 
AT_TCPIP_CmdFunc_CIPSTART
, 
SA_CMDCLS_TCPIP
, 1, 
AT_TCPIP_PERM
},

497 {(
uöt8
*)"+CIFSR" , 
AT_TCPIP_CmdFunc_CIFSR
, 
SA_CMDCLS_TCPIP
, 1, 
AT_TCPIP_PERM
},

498 {(
uöt8
*)"+CIPSTATUS" , 
AT_TCPIP_CmdFunc_CIPSTATUS
, 
SA_CMDCLS_TCPIP
, 1, 
AT_TCPIP_PERM
},

499 {(
uöt8
*)"+CIPCLOSE" , 
AT_TCPIP_CmdFunc_CIPCLOSE
, 
SA_CMDCLS_TCPIP
, 1, 
AT_TCPIP_PERM
},

500 {(
uöt8
*)"+CIPSHUT" , 
AT_TCPIP_CmdFunc_CIPSHUT
, 
SA_CMDCLS_TCPIP
, 1, 
AT_TCPIP_PERM
},

501 {(
uöt8
*)"+CIICR" , 
AT_TCPIP_CmdFunc_CIICR
, 
SA_CMDCLS_TCPIP
, 1, 
AT_TCPIP_PERM
},

502 {(
uöt8
*)"+CIPSEND" , 
AT_TCPIP_CmdFunc_CIPSEND
, 
SA_CMDCLS_TCPIP
, 1, 
AT_TCPIP_PERM
},

503 {(
uöt8
*)"+CSTT" , 
AT_TCPIP_CmdFunc_CSTT
, 
SA_CMDCLS_TCPIP
, 1, 
AT_TCPIP_PERM
},

504 {(
uöt8
*)"+CIPATS" , 
AT_TCPIP_CmdFunc_CIPATS
, 
SA_CMDCLS_TCPIP
, 1, 
AT_TCPIP_PERM
},

507 #ifde‡
AT_USER_DBS


508 {(
uöt8
*)"+NETAPN" , 
AT_TCPIP_CmdFunc_NETAPN
, 
SA_CMDCLS_TCPIP
, 1, 
AT_TCPIP_PERM
},

509 {(
uöt8
*)"+SOCKET" , 
AT_TCPIP_CmdFunc_SOCKET
, 
SA_CMDCLS_TCPIP
, 1, 
AT_TCPIP_PERM
},

510 {(
uöt8
*)"+IPOPEN" , 
AT_TCPIP_CmdFunc_IPOPEN
, 
SA_CMDCLS_TCPIP
, 1, 
AT_TCPIP_PERM
},

511 {(
uöt8
*)"+IPSEND" , 
AT_TCPIP_CmdFunc_IPSEND
, 
SA_CMDCLS_TCPIP
, 1, 
AT_TCPIP_PERM
},

512 {(
uöt8
*)"+IPCLOSE" , 
AT_TCPIP_CmdFunc_IPCLOSE
, 
SA_CMDCLS_TCPIP
, 1, 
AT_TCPIP_PERM
},

513 {(
uöt8
*)"+IPDEACT" , 
AT_TCPIP_CmdFunc_IPDEACT
, 
SA_CMDCLS_GPRS
, 1, 
AT_CGACT_PERM
},

514 {(
uöt8
*)"+VGSMSW" , 
AT_TCPIP_CmdFunc_VGSMSW
, 
SA_CMDCLS_GPRS
, 1, 
AT_CGMR_PERM
},

515 {(
uöt8
*)"+FIRBOOT" , 
AT_TCPIP_CmdFunc_FIRBOOT
, 
SA_CMDCLS_GPRS
, 1, 
AT_CGMR_PERM
},

521 {
NULL
, NULL, 
SA_CMDCLS_INVALID_
, 1, {0xFFFFFFFF, 0xFFFFFFFF}},

	@D:\Projects\modem2.5g\branches\l4\navi\baseband\l4\at\engine\src\at_common.c

14 
	~"©.h
"

15 
	~"©_ß.h
"

16 
	~"©_cmd_gc.h
"

17 
	~"©_moduÀ.h
"

18 
	~"©_cfg.h
"

19 
	~"©_mux.h
"

20 
	~"cos.h
"

22 
AT_ModuÀInfo
 
g_AtModuÀ
;

23 
boﬁ
 
g_COPS_Së_Fœg
 ;

30 
uöt16
 
	gnATU£rTønsIdS∑ªHódî
 = 0;

31 
uöt16
 
	gnATU£rTønsIdS∑ªTaû
 = 0;

32 
AT_UTI_TABLE
 
	gATU£rTønsIdTabÀ
[
AT_USER_TRANS_ID_SIZE
] ;

33 
uöt8
 
	$CmdModeOuçutUrcLök
(
uöt8
 
nDLCI
)

45 
uöt8
 
uiCou¡î
 = 0;

46 
uöt8
 
uiAtMode
 = 0;

47 
AT_IND
** 
µIndLi°
 = 
NULL
;

50 if(
bMuxA˘iveSètus
)

52 
uiAtMode
 = 
	`AT_GëModeMux
(
nDLCI
);

53 
µIndLi°
 = (
AT_IND
**)
	`AT_GëIndiˇti⁄Li°Mux
(
nDLCI
);

57 
uiAtMode
 = 
	`AT_GëMode
();

58 
µIndLi°
 = 
	`AT_GëIndiˇti⁄Li°
();

60 i‡(0 =
uiAtMode
)

62 *
µIndLi°
 !
NULL
)

64 
AT_IND
* 
pInd
 = *
µIndLi°
;

68 i‡(
NULL
 !
pInd
)

70 
uöt8
 
uRCPª£¡Mode
;

71 
uöt8
 
uRCF‹m©Mode
;

73 
	`AT_GC_CfgGëResu…CodePª£¡Mode
(&
uRCPª£¡Mode
);

74 
	`AT_GC_CfgGëResu…CodeF‹m©Mode
(&
uRCF‹m©Mode
);

76 i‡(
pInd
->
ªsu…
.
pD©a
 !
NULL
 &&ÖInd->ªsu….
nD©aSize
 > 0)

78 
s
[] = {0, 0};

80 
s
[0] = 
	`AT_GC_CfgGëS4VÆue
();

81 if(
bMuxA˘iveSètus
)

83 
	`SídUIH
(
nDLCI
<<2,
s
, (
DWORD
)
	`°æí
((c⁄° *)s),
CTRL_FIELD_UIH
);

84 
	`SídUIH
(
nDLCI
<<2,
pInd
->
ªsu…
.
pD©a
,ÖInd->ªsu….
nD©aSize
,
CTRL_FIELD_UIH
);

88 
	`AT_WrôeU¨t
((
uöt8
 *)
s
, (
uöt16
)
	`°æí
((const *)s));

89 
	`AT_WrôeU¨t
((
uöt8
 *)
pInd
->
ªsu…
.
pD©a
, (
uöt16
ÌInd->ªsu….
nD©aSize
);

94 i‡(
uRCPª£¡Mode
 == 0)

96 
uöt8
 
msg
[128] = {0};

97 
	`AT_MemSë
(
msg
, '\0', 128);

98 
	`AT_GëEº‹_DCE
(
uRCF‹m©Mode
, 
pInd
->
ªsu…
.
uResu…Code
, 
msg
);

100 i‡(
	`AT_SåLí
(
msg
))

103 if(
bMuxA˘iveSètus
)

105 
	`SídUIH
(
nDLCI
<<2,
msg
, (
DWORD
)
	`AT_SåLí
(msg),
CTRL_FIELD_UIH
);

109 
	`AT_WrôeU¨t
((
uöt8
 *)
msg
, (
uöt16
)
	`AT_SåLí
(msg));

115 
	`AT_FªeCurInd
(
µIndLi°
, 
pInd
);

117 
uiCou¡î
++;

118 if(
bMuxA˘iveSètus
)

119 
µIndLi°
 = (
AT_IND
**)
	`AT_GëIndiˇti⁄Li°Mux
(
nDLCI
);

121 
µIndLi°
 = 
	`AT_GëIndiˇti⁄Li°
();

125  
uiCou¡î
;

126 
	}
}

129 
uöt8
 
	$OuçutUrcNode
(
PAT_CMD_RESULT
 
pCmdResu…
)

131 
uöt8
 
uRCPª£¡Mode
 = 0;

132 
uöt8
 
uRCF‹m©Mode
 = 0;

134 
	`AT_GC_CfgGëResu…CodePª£¡Mode
(&
uRCPª£¡Mode
);

135 
	`AT_GC_CfgGëResu…CodeF‹m©Mode
(&
uRCF‹m©Mode
);

137 i‡(
pCmdResu…
->
pD©a
 !
NULL
 &&ÖCmdResu…->
nD©aSize
 > 0)

139 
uöt8
 
s
[3] = {0};

141 
s
[0] = 
	`AT_GC_CfgGëS3VÆue
();

142 
s
[1] = 
	`AT_GC_CfgGëS4VÆue
();

145 if(
bMuxA˘iveSètus
)

147 i‡(
uRCF‹m©Mode
 == 1)

148 
	`SídUIH
(
pCmdResu…
->
nDLCI
<<2,
s
, (
DWORD
)
	`°æí
((c⁄° *)s),
CTRL_FIELD_UIH
);

150 
	`SídUIH
(
pCmdResu…
->
nDLCI
<<2,pCmdResu…->
pD©a
, (
DWORD
ÌCmdResu…->
nD©aSize
,
CTRL_FIELD_UIH
);

153 
	`SídUIH
(
pCmdResu…
->
nDLCI
<<2,
s
, (
DWORD
)
	`°æí
((c⁄° *)s),
CTRL_FIELD_UIH
);

159 i‡(
uRCF‹m©Mode
 == 1)

160 
	`AT_WrôeU¨t
((
uöt8
 *)
s
, (
uöt16
)
	`°æí
((const *)s));

162 
	`AT_WrôeU¨t
((
uöt8
 *)
pCmdResu…
->
pD©a
, (
uöt16
ÌCmdResu…->
nD©aSize
);

165 
	`AT_WrôeU¨t
((
uöt8
 *)
s
, (
uöt16
)
	`°æí
((const *)s));

170 i‡(
uRCPª£¡Mode
 == 0)

172 
uöt8
 
msg
[128] = {0};

177 i‡(
pCmdResu…
->
uResu…Code
 !
CMD_RC_CR
)

179 
	`AT_GëEº‹_DCE
(
uRCF‹m©Mode
, 
pCmdResu…
->
uResu…Code
, 
msg
);

181 if(
bMuxA˘iveSètus
)

183 i‡(
	`°æí
((c⁄° *)
msg
) > 0)

184 
	`SídUIH
(
pCmdResu…
->
nDLCI
<<2,
msg
, (
DWORD
)
	`°æí
((c⁄° *)msg),
CTRL_FIELD_UIH
);

188 i‡(
	`°æí
((c⁄° *)
msg
) > 0)

189 
	`AT_WrôeU¨t
((
uöt8
 *)
msg
, (
uöt16
)
	`°æí
((const *)msg));

195 
	}
}

197 
öt32
 
	$CmdResu…Faû
(
PAT_CMD_RESULT
 
pCmdResu…
)

199 
uöt8
 
szCR
[] = {0, 0};

200 
uöt8
 
szLF
[] = {0, 0};

202 
uöt32
 
uEºRë
 = 
ERR_AT_UTIL_FAILED
;

203 
uöt8
 
szEºSå
[128] = {0};

205 
uöt8
 
uCmìSë
 = 
gATCuºítuCmì
;

206 
uöt8
 
uRCF‹m©Mode
;

207 
uöt8
 
uRCPª£¡Mode
;

210 
szCR
[0] = 
	`AT_GC_CfgGëS3VÆue
();

211 
szLF
[0] = 
	`AT_GC_CfgGëS4VÆue
();

213 
	`AT_GC_CfgGëResu…CodePª£¡Mode
(&
uRCPª£¡Mode
);

214 
	`AT_GC_CfgGëResu…CodeF‹m©Mode
(&
uRCF‹m©Mode
);

215 if(
bMuxA˘iveSètus
)

216 
	`AT_KûlAsyncTimîMux
(
pCmdResu…
->
nDLCI
);

218 
	`AT_KûlAsyncTimî
();

223 i‡(
pCmdResu…
->
pD©a
 !
NULL
 &&ÖCmdResu…->
nD©aSize
 > 0)

225 
uöt8
 
s
[4] = {0};

227 
	`AT_S¥ötf
((
TCHAR
*)
s
, (
CONST
 TCHAR*)"%s%s", 
szCR
, 
szLF
);

231 if(
bMuxA˘iveSètus
)

234 i‡(
uRCF‹m©Mode
 == 0)

236 
	`SídUIH
(
pCmdResu…
->
nDLCI
<<2,pCmdResu…->
pD©a
, (
DWORD
ÌCmdResu…->
nD©aSize
,
CTRL_FIELD_UIH
);

237 
	`SídUIH
(
pCmdResu…
->
nDLCI
<<2,
s
, (
DWORD
)
	`°æí
((c⁄° *)s),
CTRL_FIELD_UIH
);

239 i‡(
uRCF‹m©Mode
 == 1)

241 
	`SídUIH
(
pCmdResu…
->
nDLCI
<<2,
s
, (
DWORD
)
	`°æí
((c⁄° *)s),
CTRL_FIELD_UIH
);

242 
	`SídUIH
(
pCmdResu…
->
nDLCI
<<2,pCmdResu…->
pD©a
, (
DWORD
ÌCmdResu…->
nD©aSize
,
CTRL_FIELD_UIH
);

243 
	`SídUIH
(
pCmdResu…
->
nDLCI
<<2,
s
, (
DWORD
)
	`°æí
((c⁄° *)s),
CTRL_FIELD_UIH
);

248 i‡(
uRCF‹m©Mode
 == 0)

250 
	`AT_WrôeU¨t
((
uöt8
 *)
pCmdResu…
->
pD©a
, (
uöt16
ÌCmdResu…->
nD©aSize
);

251 
	`AT_WrôeU¨t
((
uöt8
 *)
s
, (
uöt16
)
	`°æí
((const *)s));

253 i‡(
uRCF‹m©Mode
 == 1)

255 
	`AT_WrôeU¨t
((
uöt8
 *)
s
, (
uöt16
)
	`°æí
((const *)s));

256 
	`AT_WrôeU¨t
((
uöt8
 *)
pCmdResu…
->
pD©a
, (
uöt16
ÌCmdResu…->
nD©aSize
);

257 
	`AT_WrôeU¨t
((
uöt8
 *)
s
, (
uöt16
)
	`°æí
((const *)s));

266 i‡(
uRCPª£¡Mode
 == 1)

267 
œb_˛ón
;

269 
uCmìSë
)

273 
uEºRë
 = 
	`AT_GëEº‹_DCE
(
uRCF‹m©Mode
, 
pCmdResu…
->
uResu…Code
, 
szEºSå
);

280 i‡(
pCmdResu…
->
nEº‹Ty≥
 =
CMD_ERROR_CODE_TYPE_CME
)

281 
uEºRë
 = 
	`AT_GëEº‹_CME
(
pCmdResu…
->
uEº‹Code
, 
szEºSå
, 
uCmìSë
);

282 i‡(
pCmdResu…
->
nEº‹Ty≥
 =
CMD_ERROR_CODE_TYPE_CMS
)

283 
uEºRë
 = 
	`AT_GëEº‹_CMS
(
pCmdResu…
->
uEº‹Code
, 
szEºSå
, 
uCmìSë
);

288 i‡(
pCmdResu…
->
nEº‹Ty≥
 =
CMD_ERROR_CODE_TYPE_CME
)

289 
uEºRë
 = 
	`AT_GëEº‹_CME
(
pCmdResu…
->
uEº‹Code
, 
szEºSå
, 
uCmìSë
);

290 i‡(
pCmdResu…
->
nEº‹Ty≥
 =
CMD_ERROR_CODE_TYPE_CMS
)

291 
uEºRë
 = 
	`AT_GëEº‹_CMS
(
pCmdResu…
->
uEº‹Code
, 
szEºSå
, 
uCmìSë
);

296 i‡(
uEºRë
 =
ERR_AT_UTIL_FAILED
)

298 
	`mem£t
(
szEºSå
, 0, (szErrStr));

299 
	`AT_GëEº‹_DCE
(
uRCF‹m©Mode
, 
pCmdResu…
->
uResu…Code
, 
szEºSå
);

302 i‡(
	`°æí
((c⁄° *)
szEºSå
) > 0)

304 if(
bMuxA˘iveSètus
)

305 
	`SídUIH
(
pCmdResu…
->
nDLCI
<<2,
szEºSå
, (
DWORD
)
	`°æí
((c⁄° *)szEºSå),
CTRL_FIELD_UIH
);

307 
	`AT_WrôeU¨t
((
uöt8
 *)
szEºSå
, (
uöt16
)
	`°æí
((const *)szErrStr));

310 
œb_˛ón
:

312 
	`u¨t_CÀ¨Buf„r
();

314 if(
bMuxA˘iveSètus
)

316 
	`AT_CÀ¨Comm™dLi°Mux
(
pCmdResu…
->
nDLCI
);

317 
	`AT_SëSètusMux
(
AT_STATUS_CMD_LINE
,
pCmdResu…
->
nDLCI
);

321 
	`AT_CÀ¨Comm™dLi°
();

322 
	`AT_SëSètus
(
AT_STATUS_CMD_LINE
);

325 
	}
}

328 
	$wrôe_succ_ªsu…2u¨t
(
PAT_CMD_RESULT
 
p_ªsu…
)

330 
uöt8
 *
p
 = 
NULL
;

331 
uöt8
 
szCR
[] = {0, 0};

332 
uöt8
 
szLF
[] = {0, 0};

333 
uöt8
 
szCR_LF
[] = {0, 0, 0};

334 
uöt8
 
uAtvSë
 = 0;

338 
szCR
[0] = 
	`AT_GC_CfgGëS3VÆue
();

339 
szLF
[0] = 
	`AT_GC_CfgGëS4VÆue
();

340 
	`AT_GC_CfgGëResu…CodeF‹m©Mode
(&
uAtvSë
);

342 
szCR_LF
[0] = 
szCR
[0];

343 
szCR_LF
[1] = 
szLF
[0];

349 
p
 = 
	`AT_MALLOC
(
p_ªsu…
->
nD©aSize
 + 4 + 1);

351 
	`mem£t
(
p
, 0, 
p_ªsu…
->
nD©aSize
 + 4 + 1);

353 i‡(
uAtvSë
 == 1)

354 
	`AT_SåCpy
(
p
, 
szCR_LF
);

356 
	`mem˝y
(
p
 + 
	`°æí
((c⁄° *Ì), 
p_ªsu…
->
pD©a
,Ö_ªsu…->
nD©aSize
);

358 
	`mem˝y
(
p
 + 
	`°æí
((c⁄° *Ì), 
szCR_LF
, strlen((const *)szCR_LF));

360 if(
bMuxA˘iveSètus
)

361 
	`SídUIH
(
p_ªsu…
->
nDLCI
<<2,
p
, (
DWORD
)’_ªsu…->
nD©aSize
 + 4), 
CTRL_FIELD_UIH
);

363 
	`AT_WrôeU¨t
((
uöt8
 *)
p
, (
uöt16
)(
p_ªsu…
->
nD©aSize
 + 4));

365 
	`AT_FREE
(
p
);

366 
	}
}

367 
öt32
 
	$Pro˚ssSuc˚ssResu…NoCÀ¨Cmd
(
PAT_CMD_RESULT
 
p_ªsu…
)

369 
AT_CMD
 **
µCmdLi°
;

372 if(
bMuxA˘iveSètus
)

374 
µCmdLi°
 = 
	`AT_GëComm™dLi°Mux
(
p_ªsu…
->
nDLCI
);

375 i‡(
	`AT_IsAsyncTimîMux
(
p_ªsu…
->
nDLCI
))

376 
	`AT_KûlAsyncTimîMux
(
p_ªsu…
->
nDLCI
);

377 
	`AT_SëSètusMux
(
AT_STATUS_CMD_LINE
, 
p_ªsu…
->
nDLCI
);

381 
µCmdLi°
 = 
	`AT_GëComm™dLi°
();

382 i‡(
	`AT_IsAsyncTimî
())

383 
	`AT_KûlAsyncTimî
();

384 
	`AT_SëSètus
(
AT_STATUS_CMD_LINE
);

388 i‡(
p_ªsu…
->
pD©a
 !
NULL
 &&Ö_ªsu…->
nD©aSize
 > 0)

389 
	`wrôe_succ_ªsu…2u¨t
(
p_ªsu…
);

391 i‡(*
µCmdLi°
 =
NULL
)

393 
uöt8
 
s
[30] = {0};

394 
uöt8
 
uRCPª£¡Mode
;

395 
uöt8
 
uC⁄√˘Resu…F‹m©Code
;

396 
uöt8
 
uRCF‹m©Mode
;

398 if(
bMuxA˘iveSètus
)

399 
	`SA_SëSysSètusMux
(
SA_INNER_RUNCOMMAND_STATE_
, 0, 
p_ªsu…
->
nDLCI
);

401 
	`SA_SëSysSètus
(
SA_INNER_RUNCOMMAND_STATE_
, 0);

403 
	`AT_GC_CfgGëResu…CodePª£¡Mode
(&
uRCPª£¡Mode
);

404 
	`CFW_CfgGëC⁄√˘Resu…F‹m©Code
(&
uC⁄√˘Resu…F‹m©Code
);

405 
	`AT_GC_CfgGëResu…CodeF‹m©Mode
(&
uRCF‹m©Mode
);

407 i‡(
uRCPª£¡Mode
 == 0)

409 i‡(
uC⁄√˘Resu…F‹m©Code
 > 0 && uConnectResultFormatCode < 5)

412 
	`AT_GëEº‹_DCE
(
uRCF‹m©Mode
, 
p_ªsu…
->
uResu…Code
, 
s
);

414 if(
bMuxA˘iveSètus
)

416 i‡(
	`AT_SåLí
(
s
))

417 
	`SídUIH
(
p_ªsu…
->
nDLCI
<<2,
s
, (
DWORD
)
	`AT_SåLí
(s),
CTRL_FIELD_UIH
);

421 i‡(
	`AT_SåLí
(
s
))

422 
	`AT_WrôeU¨t
((
uöt8
 *)
s
, (
uöt16
)
	`AT_SåLí
(s));

428 if(
bMuxA˘iveSètus
)

429 
	`SA_SëSysSètusMux
(
SA_INNER_RUNCOMMAND_STATE_
, 1, 
p_ªsu…
->
nDLCI
);

431 
	`SA_SëSysSètus
(
SA_INNER_RUNCOMMAND_STATE_
, 1);

436 
	}
}

438 
öt32
 
	$Pro˚ssSuc˚ssResu…
(
PAT_CMD_RESULT
 
p_ªsu…
)

441 
AT_CMD
 **
µCmdLi°
 = 
NULL
;

442 if(
bMuxA˘iveSètus
)

444 
µCmdLi°
 = 
	`AT_GëComm™dLi°Mux
(
p_ªsu…
->
nDLCI
);

445 i‡(
	`AT_IsAsyncTimîMux
(
p_ªsu…
->
nDLCI
))

446 
	`AT_KûlAsyncTimîMux
(
p_ªsu…
->
nDLCI
);

450 
µCmdLi°
 = 
	`AT_GëComm™dLi°
();

451 i‡(
	`AT_IsAsyncTimî
())

452 
	`AT_KûlAsyncTimî
();

459 i‡(*
µCmdLi°
 !
NULL
)

462 if(
bMuxA˘iveSètus
)

464 
	`AT_Re£tCmdLi°
(
µCmdLi°
);

465 
µCmdLi°
 = 
	`AT_GëComm™dLi°Mux
(
p_ªsu…
->
nDLCI
);

469 
	`AT_FªeCurCmd
(
µCmdLi°
, *ppCmdList);

470 
µCmdLi°
 = 
	`AT_GëComm™dLi°
();

473 if(
bMuxA˘iveSètus
)

474 
	`AT_SëSètusMux
(
AT_STATUS_CMD_LINE
,
p_ªsu…
->
nDLCI
);

476 
	`AT_SëSètus
(
AT_STATUS_CMD_LINE
);

478 i‡(
p_ªsu…
->
pD©a
 !
NULL
 &&Ö_ªsu…->
nD©aSize
 > 0)

479 
	`wrôe_succ_ªsu…2u¨t
(
p_ªsu…
);

481 i‡(*
µCmdLi°
 =
NULL
)

483 
uöt8
 
s
[30] = {0};

484 
uöt8
 
uRCPª£¡Mode
;

485 
uöt8
 
uC⁄√˘Resu…F‹m©Code
;

486 
uöt8
 
uRCF‹m©Mode
;

487 if(
bMuxA˘iveSètus
)

488 
	`SA_SëSysSètusMux
(
SA_INNER_RUNCOMMAND_STATE_
, 0, 
p_ªsu…
->
nDLCI
);

490 
	`SA_SëSysSètus
(
SA_INNER_RUNCOMMAND_STATE_
, 0);

492 
	`AT_GC_CfgGëResu…CodePª£¡Mode
(&
uRCPª£¡Mode
);

493 
	`CFW_CfgGëC⁄√˘Resu…F‹m©Code
(&
uC⁄√˘Resu…F‹m©Code
);

494 
	`AT_GC_CfgGëResu…CodeF‹m©Mode
(&
uRCF‹m©Mode
);

496 i‡(
uRCPª£¡Mode
 == 0)

498 i‡(
uC⁄√˘Resu…F‹m©Code
 > 0 && uConnectResultFormatCode < 5)

501 
	`AT_GëEº‹_DCE
(
uRCF‹m©Mode
, 
p_ªsu…
->
uResu…Code
, 
s
);

503 if(
bMuxA˘iveSètus
)

505 i‡(
	`AT_SåLí
(
s
))

506 
	`SídUIH
(
p_ªsu…
->
nDLCI
<<2,
s
, (
DWORD
)
	`AT_SåLí
(s),
CTRL_FIELD_UIH
);

511 i‡(
	`AT_SåLí
(
s
))

512 
	`AT_WrôeU¨t
((
uöt8
 *)
s
, (
uöt16
)
	`AT_SåLí
(s));

516 if(
uRCPª£¡Mode
 ==1)

518 
	`AT_GëEº‹_DCE
(
uRCF‹m©Mode
, 
p_ªsu…
->
uResu…Code
, 
s
);

520 if(
bMuxA˘iveSètus
)

522 i‡(
	`AT_SåLí
(
s
))

523 
	`SídUIH
(
p_ªsu…
->
nDLCI
<<2,
s
, (
DWORD
)
	`AT_SåLí
(s),
CTRL_FIELD_UIH
);

528 i‡(
	`AT_SåLí
(
s
))

529 
	`AT_WrôeU¨t
((
uöt8
 *)
s
, (
uöt16
)
	`AT_SåLí
(s));

539 if(
bMuxA˘iveSètus
)

541 
COS_EVENT
 
EV
 = { 0 };

543 
	`SA_SëSysSètusMux
(
SA_INNER_RUNCOMMAND_STATE_
, 1, 
p_ªsu…
->
nDLCI
);

545 
EV
.
nEvítId
 = 
EV_AT_RUN_NEXT_COMMAND
;

548 
EV
.
nP¨am3
 = 0;

550 if–
	`COS_SídEvít
(
CSW_AT_TASK_HANDLE
, &
EV
, 
COS_WAIT_FOREVER
, 
COS_EVENT_PRI_NORMAL
Ë=
TRUE
)

560 
	`SA_SëSysSètus
(
SA_INNER_RUNCOMMAND_STATE_
, 1);

565 
	}
}

567 
öt32
 
	$CmdResu…AsynSuc˚ss
(
PAT_CMD_RESULT
 
pCmdResu…
)

570 if(
bMuxA˘iveSètus
)

572 i‡(
pCmdResu…
->
pD©a
 !
NULL
 &&ÖCmdResu…->
nD©aSize
 > 0)

573 
	`SídUIH
(
pCmdResu…
->
nDLCI
<<2,pCmdResu…->
pD©a
, (
DWORD
ÌCmdResu…->
nD©aSize
,
CTRL_FIELD_UIH
);

574 
	`AT_SëAsyncTimîMux
(
pCmdResu…
->
nDñayTime
 =0 ? 
AT_DEFAULT_ELAPSE
 :ÖCmdResu…->nDñayTime,ÖCmdResu…->
nDLCI
);

578 i‡(
pCmdResu…
->
pD©a
 !
NULL
 &&ÖCmdResu…->
nD©aSize
 > 0)

579 
	`AT_WrôeU¨t
((
uöt8
 *)
pCmdResu…
->
pD©a
, (
uöt16
ÌCmdResu…->
nD©aSize
);

580 
	`AT_SëAsyncTimî
(
pCmdResu…
->
nDñayTime
 =0 ? 
AT_DEFAULT_ELAPSE
 :ÖCmdResult->nDelayTime);

583 
	}
}

585 
öt32
 
	$CmdResu…WaôSMS
(
PAT_CMD_RESULT
 
pCmdResu…
)

588 if(
bMuxA˘iveSètus
)

590 
	`AT_SëSètusMux
(
AT_STATUS_SMS_DATA
, 
pCmdResu…
->
nDLCI
);

591 i‡(
pCmdResu…
->
pD©a
 !
NULL
 &&ÖCmdResu…->
nD©aSize
 > 0)

592 
	`SídUIH
(
pCmdResu…
->
nDLCI
<<2,pCmdResu…->
pD©a
, (
DWORD
ÌCmdResu…->
nD©aSize
,
CTRL_FIELD_UIH
);

596 
	`AT_SëSètus
(
AT_STATUS_SMS_DATA
);

597 i‡(
pCmdResu…
->
pD©a
 !
NULL
 &&ÖCmdResu…->
nD©aSize
 > 0)

598 
	`AT_WrôeU¨t
((
uöt8
 *)
pCmdResu…
->
pD©a
, (
uöt16
ÌCmdResu…->
nD©aSize
);

603 i‡(
pCmdResu…
->
nDñayTime
 != 0)

605 if(
bMuxA˘iveSètus
)

606 
	`AT_SëAsyncTimîMux
(
pCmdResu…
->
nDñayTime
,ÖCmdResu…->
nDLCI
);

608 
	`AT_SëAsyncTimî
(
pCmdResu…
->
nDñayTime
);

612 if(
bMuxA˘iveSètus
)

613 
	`AT_SëAsyncTimîMux
(
AT_DEFAULT_ELAPSE
, 
pCmdResu…
->
nDLCI
);

615 
	`AT_SëAsyncTimî
(
AT_DEFAULT_ELAPSE
);

619 
	}
}

620 
öt32
 
	$CmdResu…WaôIpD©a
(
PAT_CMD_RESULT
 
pCmdResu…
)

623 if(
bMuxA˘iveSètus
)

625 
	`AT_SëSètusMux
(
AT_STATUS_IP_DATA
, 
pCmdResu…
->
nDLCI
);

626 i‡(
pCmdResu…
->
pD©a
 !
NULL
 &&ÖCmdResu…->
nD©aSize
 > 0)

627 
	`SídUIH
(
pCmdResu…
->
nDLCI
<<2,pCmdResu…->
pD©a
, (
DWORD
ÌCmdResu…->
nD©aSize
,
CTRL_FIELD_UIH
);

631 
	`AT_SëSètus
(
AT_STATUS_IP_DATA
);

632 i‡(
pCmdResu…
->
pD©a
 !
NULL
 &&ÖCmdResu…->
nD©aSize
 > 0)

633 
	`AT_WrôeU¨t
((
uöt8
 *)
pCmdResu…
->
pD©a
, (
uöt16
ÌCmdResu…->
nD©aSize
);

637 i‡(
pCmdResu…
->
nDñayTime
 != 0)

639 if(
bMuxA˘iveSètus
)

640 
	`AT_SëAsyncTimîMux
(
pCmdResu…
->
nDñayTime
,ÖCmdResu…->
nDLCI
);

642 
	`AT_SëAsyncTimî
(
pCmdResu…
->
nDñayTime
);

649  
ERR_SUCCESS
;

650 
	}
}

652 
	$wrôe_c⁄ti_ªsu…2u¨t
(
PAT_CMD_RESULT
 
p_ªsu…
)

654 
uöt8
 *
p
 = 
NULL
;

655 
uöt8
 
szCR_LF
[] = {0, 0, 0};

656 
uöt8
 
uAtvSë
 = 0;

660 
szCR_LF
[0] = 
	`AT_GC_CfgGëS3VÆue
();

661 
szCR_LF
[1] = 
	`AT_GC_CfgGëS4VÆue
();

671 
p
 = 
	`AT_MALLOC
(
p_ªsu…
->
nD©aSize
 + 4 + 1);

672 
	`mem£t
(
p
, 0, 
p_ªsu…
->
nD©aSize
 + 4 + 1);

674 
	`AT_GC_CfgGëResu…CodeF‹m©Mode
(&
uAtvSë
);

676 if(
bMuxA˘iveSètus
)

678 i‡(
g_AtModuÀMux
[
p_ªsu…
->
nDLCI
].
uSuccRcCou¡î
 =0 && 
uAtvSë
 == 1)

679 
	`AT_SåCpy
(
p
, 
szCR_LF
);

683 i‡(
g_AtModuÀ
.
uSuccRcCou¡î
 =0 && 
uAtvSë
 == 1)

684 
	`AT_SåCpy
(
p
, 
szCR_LF
);

687 
	`mem˝y
(
p
 + 
	`°æí
((c⁄° *Ì), 
p_ªsu…
->
pD©a
,Ö_ªsu…->
nD©aSize
);

689 
	`AT_SåC©
(
p
, 
szCR_LF
);

692 if(
bMuxA˘iveSètus
)

694 
	`SídUIH
(
p_ªsu…
->
nDLCI
<<2,
p
, (
DWORD
)
	`°æí
((c⁄° *Ì),
CTRL_FIELD_UIH
);

698 
	`AT_WrôeU¨t
((
uöt8
 *)
p
, (
uöt16
)
	`°æí
((const *)p));

701 
	`AT_FREE
(
p
);

702 
	}
}

704 
öt32
 
	$CmdResu…C⁄töue
(
PAT_CMD_RESULT
 
pCmdResu…
)

706 i‡(
pCmdResu…
->
pD©a
 =
NULL
 ||ÖCmdResu…->
nD©aSize
 == 0)

709 
	`wrôe_c⁄ti_ªsu…2u¨t
(
pCmdResu…
);

712 
	}
}

714 
öt32
 
	$CmdResu…NŸifiˇti⁄
(
PAT_CMD_RESULT
 
pCmdResu…
)

716 
uöt8
 
uiAtMode
;

717 
uöt8
 
uMode
;

718 
AT_IND
 **
µIndLi°
;

719 if(
bMuxA˘iveSètus
)

721 
uiAtMode
 = 
	`AT_GëModeMux
(
pCmdResu…
->
nDLCI
);

722 
µIndLi°
 = (
AT_IND
 **)
	`AT_GëIndiˇti⁄Li°Mux
(
pCmdResu…
->
nDLCI
);

723 
uMode
 = 
	`AT_GëCmîModeMux
(
pCmdResu…
->
nDLCI
);

727 
uiAtMode
 = 
	`AT_GëMode
();

728 
µIndLi°
 = 
	`AT_GëIndiˇti⁄Li°
();

729 
uMode
 = 
	`AT_GëCmîMode
();

732 
uMode
)

735 
AT_CMER_ONLY_BUF_MODE
:

739 
AT_IND
 *
p
 = 
	`AT_MALLOC
((AT_IND));

741 
	`AT_MemCpy
(&
p
->
ªsu…
, 
pCmdResu…
, (
AT_CMD_RESULT
));

742 
p
->
pNext
 = 
NULL
;

743 
	`AT_AddIndToLi°
(
µIndLi°
, 
p
);

748 
AT_CMER_DATA_DIS_MODE
:

750 i‡(
uiAtMode
 == 0)

751 
	`OuçutUrcNode
(
pCmdResu…
);

757 
AT_CMER_DATA_BUF_MODE
:

758 i‡(
uiAtMode
 == 0)

759 
	`OuçutUrcNode
(
pCmdResu…
);

764 
AT_IND
* 
p
 = 
	`AT_MALLOC
((AT_IND));

765 
	`AT_MemCpy
(&(
p
->
ªsu…
), 
pCmdResu…
, (
AT_CMD_RESULT
));

766 
p
->
pNext
 = 
NULL
;

767 
	`AT_AddIndToLi°
(
µIndLi°
, 
p
);

772 
AT_CMER_DMA_MODE
:

775 
	`OuçutUrcNode
(
pCmdResu…
);

780 
	}
}

783 
	$ATE_H™dÀEx˚±i⁄
(
uöt32
 
uEºCode
,
uöt8
 
nDLCI
)

785 
uöt8
 
v_£t
 = 0;

786 
uöt8
 
uRCPª£¡Mode
 = 0;

787 
uöt8
 
rc_°r
[128] = {0};

793 if(
bMuxA˘iveSètus
)

795 i‡(
	`AT_IsAsyncTimîMux
(
nDLCI
))

796 
	`AT_KûlAsyncTimîMux
(
nDLCI
);

800 i‡(
	`AT_IsAsyncTimî
())

801 
	`AT_KûlAsyncTimî
();

805 i‡(
	`AT_GC_CfgGëResu…CodeF‹m©Mode
(&
v_£t
Ë!
ERR_SUCCESS
)

806 
v_£t
 = 1;

809 
	`AT_GëEº‹_DCE
(
v_£t
, 
uEºCode
, 
rc_°r
);

811 
	`AT_GC_CfgGëResu…CodePª£¡Mode
(&
uRCPª£¡Mode
);

813 i‡(
uRCPª£¡Mode
 == 0)

815 i‡(
bMuxA˘iveSètus
)

817 
	`SídUIH
(
nDLCI
 << 2, 
rc_°r
, (
DWORD
)
	`°æí
((c⁄° *Ïc_°r),
CTRL_FIELD_UIH
);

818 
	`AT_CÀ¨Comm™dLi°Mux
(
nDLCI
);

819 
	`u¨t_CÀ¨Buf„r
();

822 
	`AT_SëSètusMux
(
AT_STATUS_CMD_LINE
, 
nDLCI
);

827 
	`AT_WrôeU¨t
((
uöt8
 *)
rc_°r
, (
uöt16
)
	`°æí
((const *)rc_str));

829 
	`AT_CÀ¨Comm™dLi°
();

832 
	`u¨t_CÀ¨Buf„r
();

835 
	`AT_SëSètus
(
AT_STATUS_CMD_LINE
);

838 
	}
}

840 
	#ERR_STR
 "COMMAND NO RESPONSE!"

	)

841 
	$ATE_H™dÀTimeout
()

844 
s3
 = 
	`AT_GC_CfgGëS3VÆue
();

845 
s4
 = 
	`AT_GC_CfgGëS4VÆue
();

847 
buff
[20 + 1 + 4] = {0};

849 i‡(
	`AT_IsAsyncTimî
())

850 
	`AT_KûlAsyncTimî
();

853 
g_COPS_Së_Fœg
 = 
FALSE
;

855 
	`•rötf
(
buff
, "%c%c%s%c%c", 
s3
, 
s4
, 
ERR_STR
, s3, s4);

856 
	`AT_WrôeU¨t
((
uöt8
 *)
buff
, (
uöt16
)
	`°æí
((const *)buff));

860 
	`AT_CÀ¨Comm™dLi°
();

861 
	`AT_SëSètus
(
AT_STATUS_CMD_LINE
);

862 
	}
}

864 
	$ATE_H™dÀTimeoutMux
(
uöt8
 
nDLCI
)

866 
s3
 = 
	`AT_GC_CfgGëS3VÆue
(), 
s4
 = 
	`AT_GC_CfgGëS4VÆue
();

867 
buff
[20 + 1 + 4] = {0};

870 i‡(
	`AT_IsAsyncTimîMux
(
nDLCI
))

871 
	`AT_KûlAsyncTimîMux
(
nDLCI
);

874 
g_COPS_Së_Fœg
 = 
FALSE
;

876 
	`•rötf
(
buff
, "%c%c%s%c%c", 
s3
, 
s4
, 
ERR_STR
, s3, s4);

877 
	`SídUIH
(
nDLCI
 << 2,
buff
, (
DWORD
)
	`°æí
((c⁄° *)buff),
CTRL_FIELD_UIH
);

880 
	`AT_CÀ¨Comm™dLi°Mux
(
nDLCI
);

881 
	`AT_SëSètusMux
(
AT_STATUS_CMD_LINE
, 
nDLCI
);

882 
	}
}

884 
boﬁ
 
	$AT_IsAsynCmdAvaûabÀ
(c⁄° *
pName
, 
uöt32
 
uCmdSèmp
,
uöt8
 
nDLCI
)

886 if(
bMuxA˘iveSètus
)

888 
AT_CMD
 **
µCmdLi°
 = 
	`AT_GëComm™dLi°Mux
(
nDLCI
);

890 i‡(
	`AT_IsAsyncTimîMux
(
nDLCI
)

891 && (*
µCmdLi°
 !
NULL
)

892 && (
	`AT_SåCmp
(
pName
, (*
µCmdLi°
)->pName) == 0)

893 && ((*
µCmdLi°
)->
uCmdSèmp
 == uCmdStamp))

895  
TRUE
;

899  
FALSE
;

904 
AT_CMD
 **
µCmdLi°
 = 
	`AT_GëComm™dLi°
();

906 i‡(
	`AT_IsAsyncTimî
()

907 && (*
µCmdLi°
 !
NULL
)

908 && (
	`AT_SåCmp
(
pName
, (*
µCmdLi°
)->pName) == 0)

909 && ((*
µCmdLi°
)->
uCmdSèmp
 == uCmdStamp))

911  
TRUE
;

915  
FALSE
;

918 
	}
}

920 
öt32
 
	$AT_NŸifyResu…2ATM
(
PAT_CMD_RESULT
 
pCmdResu…
,
uöt8
 
nDLCI
)

925 
	`CmdModeOuçutUrcLök
(
nDLCI
);

926 if(
bMuxA˘iveSètus
)

928 
pCmdResu…
->
uRëu∫VÆue
)

931 
CMD_FUNC_FAIL
:

932 
g_AtModuÀMux
[
nDLCI
].
uSuccRcCou¡î
 = 0;

933  
	`CmdResu…Faû
(
pCmdResu…
);

935 
CMD_FUNC_SUCC
:

936 
g_AtModuÀMux
[
nDLCI
].
uSuccRcCou¡î
 = 0;

937  
	`Pro˚ssSuc˚ssResu…
(
pCmdResu…
);

939 
CMD_FUNC_SUCC_ASYN
:

940 
g_AtModuÀMux
[
nDLCI
].
uSuccRcCou¡î
 = 0;

941  
	`CmdResu…AsynSuc˚ss
(
pCmdResu…
);

943 
CMD_FUNC_WAIT_SMS
:

944 
g_AtModuÀMux
[
nDLCI
].
uSuccRcCou¡î
 = 0;

945  
	`CmdResu…WaôSMS
(
pCmdResu…
);

946 
CMD_FUNC_WAIT_IP_DATA
:

947 
g_AtModuÀMux
[
nDLCI
].
uSuccRcCou¡î
 = 0;

948  
	`CmdResu…WaôIpD©a
(
pCmdResu…
);

949 
CMD_FUNC_CONTINUE
:

951 
öt32
 
r
 = 0;

953 
r
 = 
	`CmdResu…C⁄töue
(
pCmdResu…
);

955 i‡(
g_AtModuÀMux
[
nDLCI
].
uSuccRcCou¡î
 >
MAX_UINT8
)

956 
g_AtModuÀMux
[
nDLCI
].
uSuccRcCou¡î
 = 1;

957 i‡(
pCmdResu…
->
nD©aSize
 > 0)

958 
g_AtModuÀMux
[
nDLCI
].
uSuccRcCou¡î
++;

960  
r
;

963 
CSW_IND_NOTIFICATION
:

964  
	`CmdResu…NŸifiˇti⁄
(
pCmdResu…
);

965 
CMD_FUNC_SUCC_ASYN_CLEAR_CMD
:

967 
AT_CMD
 **
µCmdLi°
 ;

968 
µCmdLi°
 = 
	`AT_GëComm™dLi°Mux
(
pCmdResu…
->
nDLCI
);

971 i‡(*
µCmdLi°
 !
NULL
)

973 
	`AT_FªeCurCmd
(
µCmdLi°
, *ppCmdList);

974 
µCmdLi°
 = 
	`AT_GëComm™dLi°Mux
(
pCmdResu…
->
nDLCI
);

977 
g_AtModuÀMux
[
nDLCI
].
uSuccRcCou¡î
 = 0;

978  
	`CmdResu…AsynSuc˚ss
(
pCmdResu…
);

980 
CMD_FUNC_SUCC_NO_CLEAR_CMD
:

981 
g_AtModuÀMux
[
nDLCI
].
uSuccRcCou¡î
 = 0;

982  
	`Pro˚ssSuc˚ssResu…NoCÀ¨Cmd
(
pCmdResu…
);

992 
pCmdResu…
->
uRëu∫VÆue
)

994 
CMD_FUNC_FAIL
:

995 
g_AtModuÀ
.
uSuccRcCou¡î
 = 0;

996  
	`CmdResu…Faû
(
pCmdResu…
);

998 
CMD_FUNC_SUCC
:

999 
g_AtModuÀ
.
uSuccRcCou¡î
 = 0;

1000  
	`Pro˚ssSuc˚ssResu…
(
pCmdResu…
);

1002 
CMD_FUNC_SUCC_ASYN
:

1003 
g_AtModuÀ
.
uSuccRcCou¡î
 = 0;

1004  
	`CmdResu…AsynSuc˚ss
(
pCmdResu…
);

1006 
CMD_FUNC_WAIT_SMS
:

1007 
g_AtModuÀ
.
uSuccRcCou¡î
 = 0;

1008  
	`CmdResu…WaôSMS
(
pCmdResu…
);

1009 
CMD_FUNC_WAIT_IP_DATA
:

1010 
g_AtModuÀ
.
uSuccRcCou¡î
 = 0;

1011  
	`CmdResu…WaôIpD©a
(
pCmdResu…
);

1012 
CMD_FUNC_CONTINUE
:

1014 
öt32
 
r
 = 0;

1016 
r
 = 
	`CmdResu…C⁄töue
(
pCmdResu…
);

1018 i‡(
g_AtModuÀ
.
uSuccRcCou¡î
 >
MAX_UINT8
)

1019 
g_AtModuÀ
.
uSuccRcCou¡î
 = 1;

1020 i‡(
pCmdResu…
->
nD©aSize
 > 0)

1021 
g_AtModuÀ
.
uSuccRcCou¡î
++;

1023  
r
;

1026 
CSW_IND_NOTIFICATION
:

1027  
	`CmdResu…NŸifiˇti⁄
(
pCmdResu…
);

1029 
CMD_FUNC_SUCC_ASYN_CLEAR_CMD
:

1031 
AT_CMD
 **
µCmdLi°
 ;

1032 
µCmdLi°
 = 
	`AT_GëComm™dLi°
();

1035 i‡(*
µCmdLi°
 !
NULL
)

1037 
	`AT_FªeCurCmd
(
µCmdLi°
, *ppCmdList);

1038 
µCmdLi°
 = 
	`AT_GëComm™dLi°
();

1041 
g_AtModuÀ
.
uSuccRcCou¡î
 = 0;

1042  
	`CmdResu…AsynSuc˚ss
(
pCmdResu…
);

1044 
CMD_FUNC_SUCC_NO_CLEAR_CMD
:

1045 
g_AtModuÀ
.
uSuccRcCou¡î
 = 0;

1046  
	`Pro˚ssSuc˚ssResu…NoCÀ¨Cmd
(
pCmdResu…
);

1054 
	}
}

1056 
	$AT_CosEvít2CfwEvít
(
COS_EVENT
* 
pCosEvít
, 
CFW_EVENT
* 
pCfwEvít
)

1058 
pCfwEvít
->
nEvítId
 = 
pCosEvít
->nEventId;

1059 
pCfwEvít
->
nP¨am1
 = 
pCosEvít
->nParam1;

1060 
pCfwEvít
->
nP¨am2
 = 
pCosEvít
->nParam2;

1061 
pCfwEvít
->
nUTI
 = 
	`HIUINT16
(
pCosEvít
->
nP¨am3
);

1062 
pCfwEvít
->
nTy≥
 = 
	`HIUINT8
(
pCosEvít
->
nP¨am3
);

1063 
pCfwEvít
->
nFœg
 = 
	`LOUINT8
(
pCosEvít
->
nP¨am3
);

1064 
	}
}

1066 
PAT_CMD_RESULT
 
	$AT_Cª©eRC
(
uöt32
 
uRëu∫VÆue
,

1067 
uöt32
 
uResu…Code
,

1068 
uöt32
 
uEº‹Code
,

1069 
uöt8
 
nEº‹Ty≥
,

1070 
uöt8
 
nDñayTime
,

1071 
uöt8
* 
pBuf„r
,

1072 
uöt16
 
nD©aSize
,

1073 
uöt8
 
nDLCI
)

1075 
PAT_CMD_RESULT
 
pResu…
 = (PAT_CMD_RESULT)
	`AT_MALLOC
((
AT_CMD_RESULT
Ë+ 
nD©aSize
);

1077 i‡(
pResu…
 =
NULL
)

1079  
NULL
;

1082 
pResu…
->
uRëu∫VÆue
 = uReturnValue;

1084 
pResu…
->
uResu…Code
 = uResultCode;

1085 
pResu…
->
uEº‹Code
 = uErrorCode;

1086 
pResu…
->
nEº‹Ty≥
 =ÇErrorType;

1087 
pResu…
->
nD©aSize
 =ÇDataSize;

1088 
pResu…
->
nDñayTime
 =ÇDelayTime;

1089 
pResu…
->
nDLCI
 =ÇDLCI;

1091 i‡(
pBuf„r
 !
NULL
)

1093 
	`AT_MemCpy
(
pResu…
->
pD©a
, 
pBuf„r
, 
nD©aSize
);

1095 
	`AT_Utû_TrimR•SåögSuffixCrLf
(
pResu…
->
pD©a
, &pResu…->
nD©aSize
);

1096 
pResu…
->
pD©a
[pResu…->
nD©aSize
] = '\0';

1099  
pResu…
;

1100 
	}
}

1102 
CFW_INIT_INFO
 
	gcfwInôInfo
;

1104 
boﬁ
 
	$AT_GëCfwInôSmsInfo
(
CFW_EVENT
 *
pCfwEvít
)

1106 
boﬁ
 
ªt
 = 
FALSE
;

1108 i‡(
cfwInôInfo
.
sms
.
nTy≥
 =
CFW_INIT_STATUS_SMS
)

1110 
pCfwEvít
->
nEvítId
 = 
cfwInôInfo
.
sms
.nEventId;

1111 
pCfwEvít
->
nP¨am1
 = 
cfwInôInfo
.
sms
.nParam1;

1112 
pCfwEvít
->
nP¨am2
 = 
cfwInôInfo
.
sms
.nParam2;

1114 
pCfwEvít
->
nUTI
 = 
cfwInôInfo
.
sms
.nUTI;

1115 
pCfwEvít
->
nTy≥
 = 
cfwInôInfo
.
sms
.nType;

1116 
pCfwEvít
->
nFœg
 = 
cfwInôInfo
.
sms
.nFlag;

1118 
ªt
 = 
TRUE
;

1121  
ªt
;

1122 
	}
}

1125 #ifde‡
AT_DUAL_SIM


1126 
uöt32
 
	$AT_GëPh⁄eA˘iveSètus
(
uöt8
 
nSim
)

1128 
uöt32
 
	$AT_GëPh⁄eA˘iveSètus
()

1132 
uöt32
 
ªt
 = 
AT_ACTIVE_STATUS_UNKNOWN
;

1136 i‡(
	`AT_GëComm™dTabÀ
(Ë!
NULL
)

1138 
ªt
 = 
AT_ACTIVE_STATUS_READY
;

1142 
ªt
 = 
AT_ACTIVE_STATUS_UNAVAILABLE
;

1146 
ªt
 = 
AT_ACTIVE_STATUS_READY
;

1150 #ifde‡
AT_DUAL_SIM


1151 
	`CFW_CcGëCÆlSètus
(
nSim
))

1153 
	`CFW_CcGëCÆlSètus
())

1163 
ªt
 = 
AT_ACTIVE_STATUS_CALL_IN_PROGRESS
;

1175 
ªt
 = 
AT_ACTIVE_STATUS_RINGING
;

1183  
ªt
;

1184 
	}
}

1200 
uöt32
 
	$AT_SëCmeEº‹Code
(
uöt32
 
nCfwEº‹Code
, 
boﬁ
 
bSëP¨amVÆid
)

1203 
nCfwEº‹Code
)

1206 
ERR_CFW_INVALID_PARAMETER
:

1208 i‡(
bSëP¨amVÆid
)

1210  
ERR_AT_CME_PARAM_INVALID
;

1214  
ERR_AT_CME_EXE_FAIL
;

1219 
ERR_CME_SIM_NOT_INSERTED
:

1220  
ERR_AT_CME_SIM_NOT_INSERTED
;

1223 
ERR_CME_SIM_PIN_REQUIRED
:

1224  
ERR_AT_CME_SIM_PIN_REQUIRED
;

1227 
ERR_CME_SIM_PUK_REQUIRED
:

1228  
ERR_AT_CME_SIM_PUK_REQUIRED
;

1231 
ERR_CME_SIM_PIN2_REQUIRED
:

1232  
ERR_AT_CME_SIM_PIN2_REQUIRED
;

1235 
ERR_CME_SIM_PUK2_REQUIRED
:

1236  
ERR_AT_CME_SIM_PUK2_REQUIRED
;

1239 
ERR_NO_MORE_MEMORY
:

1240  
ERR_AT_CME_MEMORY_FULL
;

1243 
ERR_CME_MEMORY_FULL
:

1244  
ERR_AT_CME_MEMORY_FULL
;

1247 
ERR_CME_INCORRECT_PASSWORD
:

1248  
ERR_AT_CME_INCORRECT_PASSWORD
;

1251 
ERR_CFW_NOT_SUPPORT
:

1252  
ERR_AT_CME_OPERATION_NOT_SUPPORTED
;

1255 
ERR_CME_INVALID_INDEX
:

1256  
ERR_AT_CME_INVALID_INDEX
;

1259 
ERR_CME_MEMORY_FAILURE
:

1260  
ERR_AT_CME_MEMORY_FAILURE
;

1263 
ERR_CME_SIM_CHV_UNINIT
:

1265 
ERR_CME_SIM_UNBLOCK_FAIL
:

1267 
ERR_CME_SIM_UNBLOCK_FAIL_NO_LEFT
:

1269 
ERR_CME_SIM_VERIFY_FAIL
:

1271 
ERR_CME_SIM_VERIFY_FAIL_NO_LEFT
:

1272  
ERR_AT_CME_SIM_FAILURE
;

1275 
ERR_CME_SIM_BLOCKED
:

1277 
ERR_CME_SIM_UNKNOW
:

1279 
ERR_CME_SIM_PROFILE_ERROR
:

1281 
ERR_CME_SIM_FILEID_NOT_FOUND
:

1283 
ERR_CME_SIM_PATTERN_NOT_FOUND
:

1285 
ERR_CME_SIM_MAXVALUE_REACHED
:

1287 
ERR_CME_SIM_CONTRADICTION_INVALIDATION
:

1289 
ERR_CME_SIM_CONTRADICTION_CHV
:

1291 
ERR_CME_SIM_FILE_UNMATCH_COMMAND
:

1293 
ERR_CME_SIM_NOEF_SELECTED
:

1295 
ERR_CME_SIM_CHV_NEED_UNBLOCK
:

1297 
ERR_CME_SIM_TECHNICAL_PROBLEM
:

1299 
ERR_CME_SIM_WRONG_CLASS
:

1301 
ERR_CME_SIM_UNKNOW_COMMAND
:

1303 
ERR_CME_SIM_CONDITION_NO_FULLFILLED
:

1304  
ERR_AT_CME_SIM_WRONG
;

1307 
ERR_CME_SIM_STK_BUSY
:

1308  
ERR_AT_CME_SIM_BUSY
;

1311 
ERR_CME_PHONE_FAILURE
:

1312  
ERR_AT_CME_PHONE_FAILURE
;

1315 
ERR_CME_NO_CONNECTION_TO_PHONE
:

1316  
ERR_AT_CME_NO_CONNECT_PHONE
;

1319 
ERR_CME_PHONE_ADAPTER_LINK_RESERVED
:

1320  
ERR_AT_CME_PHONE_ADAPTER_LINK_RESERVED
;

1323 
ERR_CME_OPERATION_NOT_ALLOWED
:

1324  
ERR_AT_CME_OPERATION_NOT_ALLOWED
;

1327 
ERR_CME_OPERATION_NOT_SUPPORTED
:

1328  
ERR_AT_CME_OPERATION_NOT_SUPPORTED
;

1331 
ERR_CME_PH_SIM_PIN_REQUIRED
:

1332  
ERR_AT_CME_PHSIM_PIN_REQUIRED
;

1335 
ERR_CME_PH_FSIM_PIN_REQUIRED
:

1336  
ERR_AT_CME_PHFSIM_PIN_REQUIRED
;

1339 
ERR_CME_PH_FSIM_PUK_REQUIRED
:

1340  
ERR_AT_CME_PHFSIM_PUK_REQUIRED
;

1343 
ERR_CME_SIM_FAILURE
:

1344  
ERR_AT_CME_SIM_FAILURE
;

1347 
ERR_CME_SIM_BUSY
:

1348  
ERR_AT_CME_SIM_BUSY
;

1351 
ERR_CME_NOT_FOUND
:

1352  
ERR_AT_CME_NOT_FOUND
;

1355 
ERR_CME_TEXT_STRING_TOO_LONG
:

1356  
ERR_AT_CME_TEXT_LONG
;

1359 
ERR_CME_INVALID_CHARACTERS_IN_TEXT_STRING
:

1360  
ERR_AT_CME_INVALID_CHAR_INTEXT
;

1363 
ERR_CME_DIAL_STRING_TOO_LONG
:

1364  
ERR_AT_CME_DAIL_STR_LONG
;

1367 
ERR_CME_INVALID_CHARACTERS_IN_DIAL_STRING
:

1368  
ERR_AT_CME_INVALID_CHAR_INDIAL
;

1371 
ERR_CME_NO_NETWORK_SERVICE
:

1372  
ERR_AT_CME_NO_NET_SERVICE
;

1375 
ERR_CME_NETWORK_TIMEOUT
:

1376  
ERR_AT_CME_NETWORK_TIMOUT
;

1379 
ERR_CME_NETWORK_NOT_ALLOWED_EMERGENCY_CALLS_ONLY
:

1380  
ERR_AT_CME_NOT_ALLOW_EMERGENCY
;

1383 
ERR_CME_NETWORK_PERSONALIZATION_PIN_REQUIRED
:

1384  
ERR_AT_CME_NET_PER_PIN_REQUIRED
;

1387 
ERR_CME_NETWORK_PERSONALIZATION_PUK_REQUIRED
:

1388  
ERR_AT_CME_NET_PER_PUK_REQUIRED
;

1391 
ERR_CME_NETWORK_SUBSET_PS_PIN_REQUIRED
:

1392  
ERR_AT_CME_NET_SUB_PER_PIN_REQ
;

1395 
ERR_CME_NETWORK_SUBSET_PS_PUK_REQUIRED
:

1396  
ERR_AT_CME_NET_SUB_PER_PUK_REQ
;

1399 
ERR_CME_SERVICE_PROVIDER_PS_PIN_REQUIRED
:

1400  
ERR_AT_CME_SERVICE_PROV_PER_PIN_REQ
;

1403 
ERR_CME_SERVICE_PROVIDER_PS_PUK_REQUIRED
:

1404  
ERR_AT_CME_SERVICE_PROV_PER_PUK_REQ
;

1407 
ERR_CME_CORPORATE_PERSONALIZATION_PIN_REQUIRED
:

1408  
ERR_AT_CME_CORPORATE_PER_PIN_REQ
;

1411 
ERR_CME_CORPORATE_PERSONALIZATION_PUK_REQUIRED
:

1412  
ERR_AT_CME_CORPORATE_PER_PUK_REQ
;

1415 
ERR_CME_OPERATION_TEMPORARILY_NOT_ALLOWED
:

1416  
ERR_AT_CME_OPERATION_NOT_ALLOWED
;

1420  
ERR_AT_CME_EXE_FAIL
;

1424 
	}
}

1438 
uöt8
 * 
	$AT_Gë_RëuªVÆue_Name
(
uöt32
 
uRëu∫VÆue
)

1440 
uRëu∫VÆue
)

1443 
CMD_FUNC_SUCC
:

1444  (
uöt8
 *)"CMD_FUNC_SUCC";

1446 
CMD_FUNC_SUCC_ASYN
:

1447  (
uöt8
 *)"CMD_FUNC_SUCC_ASYN";

1449 
CMD_FUNC_FAIL
:

1450  (
uöt8
 *)"CMD_FUNC_FAIL";

1452 
CMD_FUNC_CONTINUE
:

1453  (
uöt8
 *)"CMD_FUNC_CONTINUE";

1455 
CMD_FUNC_WAIT_SMS
:

1456  (
uöt8
 *)"CMD_FUNC_WAIT_SMS";

1457 
CMD_FUNC_WAIT_IP_DATA
:

1458  (
uöt8
 *)"CMD_FUNC_WAIT_IP_DATA";

1460 
CSW_IND_NOTIFICATION
:

1461  (
uöt8
 *)"CSW_IND_NOTIFICATION";

1464  (
uöt8
 *)"Error uReturnValue";

1467 
	}
}

1481 
uöt8
 * 
	$AT_Gë_Resu…Code_Name
(
uöt32
 
uResu…Code
)

1483 
uResu…Code
)

1486 
CMD_RC_OK
:

1487  (
uöt8
 *)"CMD_RC_OK";

1489 
CMD_RC_CONNECT
:

1490  (
uöt8
 *)"CMD_RC_CONNECT";

1492 
CMD_RC_RING
:

1493  (
uöt8
 *)"CMD_RC_RING";

1495 
CMD_RC_NOCARRIER
:

1496  (
uöt8
 *)"CMD_RC_NOCARRIER";

1498 
CMD_RC_ERROR
:

1499  (
uöt8
 *)"CMD_RC_ERROR";

1501 
CMD_RC_NODIALTONE
:

1502  (
uöt8
 *)"CMD_RC_NODIALTONE";

1504 
CMD_RC_BUSY
:

1505  (
uöt8
 *)"CMD_RC_BUSY";

1507 
CMD_RC_NOANSWER
:

1508  (
uöt8
 *)"CMD_RC_NOANSWER";

1510 
CMD_RC_NOTSUPPORT
:

1511  (
uöt8
 *)"CMD_RC_NOTSUPPORT";

1513 
CMD_RC_INVCMDLINE
:

1514  (
uöt8
 *)"CMD_RC_INVCMDLINE";

1516 
CMD_RC_CR
:

1517  (
uöt8
 *)"CMD_RC_CR";

1520  (
uöt8
 *)"Error uResultCode";

1523 
	}
}

1537 
	$AT_Së_Mu…iL™guage
()

1539 
©_ch£t_t
 
eCuºítSë
 = 
gAtCuºítSëtög
.
g_CfgInfo
.
mt_ch£t
;

1540 
uöt8
 
nMu…iCh¨£t
[12] = {0};

1542 
eCuºítSë
)

1545 
cs_gsm
:

1546 
	`AT_MemCpy
(
nMu…iCh¨£t
, 
ML_ISO8859_1
, 
	`AT_SåLí
(ML_ISO8859_1));

1549 
cs_gbk
:

1550 
	`AT_MemCpy
(
nMu…iCh¨£t
, 
ML_CP936
, 
	`AT_SåLí
(ML_CP936));

1553 
cs_hex
:

1557 
cs_ucs2
:

1567 if(
ERR_SUCCESS
 !
	`ML_SëCodePage
(
nMu…iCh¨£t
))

1572 
	}
}

1585 
boﬁ
 
	$AT_UnicodeBigEnd2Unicode
(
uöt8
 * 
pUniBigD©a
, uöt8 *
pUniD©a
, 
uöt16
 
nD©aLí
)

1589 i‡((
NULL
 =
pUniD©a
)||(NULL =
pUniBigD©a
))

1591  
FALSE
;

1596 if(
nD©aLí
%2)

1598 
nD©aLí
 =ÇDataLen -1;

1601 
nD©aLí
 > 0)

1603 
pUniD©a
[
nD©aLí
 -2] = 
pUniBigD©a
[nDataLen -1];

1604 
pUniD©a
[
nD©aLí
-1] = 
pUniBigD©a
[nDataLen -2];

1606 
nD©aLí
 -= 2;

1609  
TRUE
;

1611 
	}
}

1614 * 
	$°ru¥
(* 
pSå
)

1616 * 
p
 = 
pSå
;

1618 i‡(
p
 =
NULL
)

1619  
NULL
;

1621 *
p
 != '\0')

1623 i‡(*
p
 >= 'a' && *p <= 'z')

1624 *
p
 = *p - 32;

1626 
p
++;

1629  
pSå
;

1630 
	}
}

1645 
boﬁ
 
	$AT_Byãs2Såög
(
uöt8
 * 
pDe°
, uöt8 * 
pSour˚
, uöt8 *
nSour˚Lí
)

1648 
uöt8
 
nTemp
 = 0;

1649 
uöt8
 
nDe°Lí
 = 0;

1651 i‡((
NULL
 =
pSour˚
Ë|| (NULL =
pDe°
))

1654  
FALSE
;

1659 
nTemp
 < *
nSour˚Lí
)

1662 
pDe°
[
nDe°Lí
] = (
pSour˚
[
nTemp
] >> 4) & 0x0f;

1664 i‡(
pDe°
[
nDe°Lí
] < 10)

1666 
pDe°
[
nDe°Lí
] |= '0';

1670 
pDe°
[
nDe°Lí
] += 'A' -10;

1673 
nDe°Lí
++;

1676 
pDe°
[
nDe°Lí
] = 
pSour˚
[
nTemp
] & 0x0f;

1678 i‡(
pDe°
[
nDe°Lí
] < 10)

1680 
pDe°
[
nDe°Lí
] |= '0';

1684 
pDe°
[
nDe°Lí
] += 'A' -10;

1687 
nDe°Lí
++;

1689 
nTemp
++;

1693 
pDe°
[
nDe°Lí
] = '\0';

1695 *
nSour˚Lí
 = 
nDe°Lí
;

1699 i‡(*
nSour˚Lí
 % 2)

1702  
FALSE
;

1705  
TRUE
;

1707 
	}
}

1720 
boﬁ
 
	$AT_Såög2Byãs
(
uöt8
 * 
pDe°
, uöt8 * 
pSour˚
, uöt8* 
pLí
)

1722 
uöt8
 
nSour˚Lí
 = *
pLí
;

1723 
uöt8
 
nTemp
 = 0;

1724 
uöt8
 
nByãNumbî
 = 0;

1726 i‡((
NULL
 =
pSour˚
Ë|| (NULL =
pDe°
))

1729  
FALSE
;

1735 i‡(
nSour˚Lí
 % 2)

1738  
FALSE
;

1742 
nTemp
 < 
nSour˚Lí
)

1745 i‡((
pSour˚
[
nTemp
] > 0x2f) && (pSource[nTemp] < 0x3a))

1747 
pDe°
[
nByãNumbî
] = (
pSour˚
[
nTemp
] - '0') << 4;

1749 i‡((
pSour˚
[
nTemp
] > 0x40) && (pSource[nTemp] < 0x47))

1751 
pDe°
[
nByãNumbî
] = (
pSour˚
[
nTemp
] - 'A' + 10) << 4;

1753 i‡((
pSour˚
[
nTemp
] > 0x60) && (pSource[nTemp] < 0x67))

1755 
pDe°
[
nByãNumbî
] = (
pSour˚
[
nTemp
] - 'a' + 10) << 4;

1760  
FALSE
;

1764 
nTemp
++;

1766 i‡((
pSour˚
[
nTemp
] > 0x2f) && (pSource[nTemp] < 0x3a))

1768 
pDe°
[
nByãNumbî
] +(
pSour˚
[
nTemp
] - '0');

1770 i‡((
pSour˚
[
nTemp
] > 0x40) && (pSource[nTemp] < 0x47))

1772 
pDe°
[
nByãNumbî
] +(
pSour˚
[
nTemp
] - 'A' + 10) ;

1774 i‡((
pSour˚
[
nTemp
] > 0x60) && (pSource[nTemp] < 0x67))

1776 
pDe°
[
nByãNumbî
] +(
pSour˚
[
nTemp
] - 'a' + 10) ;

1781  
FALSE
;

1784 
nTemp
++;

1786 
nByãNumbî
++;

1790 
pDe°
[
nByãNumbî
] = '\0';

1792 *
pLí
 = 
nByãNumbî
;

1794  
TRUE
;

1797 
	}
}

1809 
	$AT_InôUtiTabÀ
()

1811 
uöt16
 
nIndex
 = 0;

1812 
	`AT_MemZîo
(&
ATU£rTønsIdTabÀ
[0], 
AT_USER_TRANS_ID_SIZE
*(
AT_UTI_TABLE
));

1814 
nATU£rTønsIdS∑ªHódî
 = 1;

1815 
nATU£rTønsIdS∑ªTaû
 = 0;

1817 
nIndex
 = 1;ÇIndex < 
AT_USER_TRANS_ID_SIZE
 - 1 ;ÇIndex++)

1819 
ATU£rTønsIdTabÀ
[
nIndex
].
nNextUTIS∑ªTabÀ
 =ÇIndex + 1;

1822 
nATU£rTønsIdS∑ªTaû
 = 
nIndex
;

1823 
ATU£rTønsIdTabÀ
[
nATU£rTønsIdS∑ªTaû
].
nNextUTIS∑ªTabÀ
 = 0;

1825 
	}
}

1837 
uöt16
 
	$AT_AŒocU£rTønsID
()

1839 
uöt16
 
TempIndex
 = 0;

1842 if((
nATU£rTønsIdS∑ªHódî
 <= 0 )

1843 || (
nATU£rTønsIdS∑ªTaû
 > 
AT_USER_TRANS_ID_SIZE
 - 1)

1844 || (
nATU£rTønsIdS∑ªHódî
 =
nATU£rTønsIdS∑ªTaû
))

1847  
TempIndex
;

1852 
TempIndex
 = 
nATU£rTønsIdS∑ªHódî
;

1853 
nATU£rTønsIdS∑ªHódî
 = 
ATU£rTønsIdTabÀ
[nATU£rTønsIdS∑ªHódî].
nNextUTIS∑ªTabÀ
;

1854 
	`AT_MemZîo
(&
ATU£rTønsIdTabÀ
[
TempIndex
], (
AT_UTI_TABLE
));

1857  
TempIndex
;

1859 
	}
}

1872 
	$AT_FªeU£rTønsID
(
uöt16
 
nUTI
)

1876 if((
nUTI
 >
AT_USER_TRANS_ID_SIZE
)

1877 || (
ATU£rTønsIdTabÀ
[
nUTI
].
nNextUTIS∑ªTabÀ
 != 0))

1884 
ATU£rTønsIdTabÀ
[
nATU£rTønsIdS∑ªTaû
].
nNextUTIS∑ªTabÀ
 = 
nUTI
;

1885 
nATU£rTønsIdS∑ªTaû
 = 
nUTI
;

1886 
	`AT_MemZîo
(&(
ATU£rTønsIdTabÀ
[
nUTI
]), (
AT_UTI_TABLE
));

1887 
	}
}

1888 #ifde‡
AT_DUAL_SIM


1890 
	$AT_SídToSIMID
(
uöt8
 
nSim
)

1892 
uöt8
 
¨rResTe°
[40] = {0,};

1893 
uöt8
 
¨rResOk
[10] = {
AT_CMD_CR
,
AT_CMD_LF
,'O','K',AT_CMD_CR,AT_CMD_LF,0,};

1894 
uöt8
 
¨rCRLF
[4] = {
AT_CMD_CR
,
AT_CMD_LF
,0,};

1896 
	`AT_SåCpy
(
¨rResTe°
, 
¨rCRLF
);

1897 
	`AT_S¥ötf
((
TCHAR
*)&
¨rResTe°
[2],(
CONST
 TCHAR*)"SIM:%d",
nSim
);

1901 
	`AT_SåC©
(
¨rResTe°
, 
¨rCRLF
);

1902 
	`AT_SåC©
(
¨rResTe°
, 
¨rResOk
);

1903 
	`AT_WrôeU¨t
((
uöt8
 *)
¨rResTe°
,(
uöt16
)
	`AT_SåLí
(arrResTest));

1906 
	}
}

	@D:\Projects\modem2.5g\branches\l4\navi\baseband\l4\at\engine\src\at_main.c

13 
	~"©.h
"

14 
	~"©_moduÀ.h
"

15 
	~"©_∑r£r.h
"

16 
	~"©_ß.h
"

18 
	~"©_cmd_gc.h
"

19 
	~"cfw.h
"

20 
	~"©_mux.h
"

21 
	~"sxs_io.h
"

22 
	#MMI_VERSION_STRING
 "MMIv1.0.1"

	)

38 
AT_ModuÀInfo
 
g_AtModuÀ
;

40 
PsDow∆ökD©aH™dÀr
(
CFW_GPRS_DATA
* 
pG¥sD©a
, 
uöt8
 
cid
);

41 #ifde‡
AT_DUAL_SIM


42 
AT_Resu…_OK
(
uöt32
 
uRëu∫VÆue
, uöt32 
uResu…Code
, 
uöt8
 
nDñayTime
, uöt8* 
pBuf„r
, 
uöt16
 
nD©aSize
, uöt8 
nDLCI
, uöt8 
nSim
);

44 
AT_Resu…_OK
(
uöt32
 
uRëu∫VÆue
, uöt32 
uResu…Code
, 
uöt8
 
nDñayTime
, uöt8* 
pBuf„r
, 
uöt16
 
nD©aSize
, uöt8 
nDLCI
);

47 
MMI_DeÁu…_VÆue
 
g_MMI_DeÁu…_VÆue
;

48 
	$BAL_SëMMIDeÁu…VÆue
()

50 
g_MMI_DeÁu…_VÆue
.
nMöVﬁ
 = 3200;

51 
g_MMI_DeÁu…_VÆue
.
nMem‹ySize
 = 50* 1024;

52 
	}
}

54 
AT_NW_AsyncEvítPro˚ss
(
COS_EVENT
* 
pEvít
);

55 
AT_CC_AsyncEvítPro˚ss
(
COS_EVENT
* 
pEvít
);

56 
AT_SS_AsyncEvítPro˚ss
(
COS_EVENT
* 
pEvít
);

57 
AT_SIM_AsyncEvítPro˚ss
(
COS_EVENT
* 
pEvít
);

58 
AT_SMS_AsyncEvítPro˚ss
(
COS_EVENT
* 
pEvít
);

59 
AT_PBK_AsyncEvítPro˚ss
(
COS_EVENT
* 
pEvít
);

60 
AT_GPRS_AsyncEvítPro˚ss
(
COS_EVENT
* 
pEvít
);

61 
AT_TCPIP_AsyncEvítPro˚ss
(
COS_EVENT
* 
pEvít
);

64 
AT_ID_AsyncEvítPro˚ss
(
COS_EVENT
* 
pEvít
);

65 
AT_GC_AsyncEvítPro˚ss
(
COS_EVENT
* 
pEvít
);

66 
AT_SAT_AsyncEvítPro˚ss
(
COS_EVENT
* 
pEvít
);

67 
AT_SPECIAL_B©ãry_AsyncEvítPro˚ss
(
COS_EVENT
* 
pEvít
);

70 
AT_Emod_AsyncEvítPro˚ss
(
COS_EVENT
* 
pEvít
);

74 
boﬁ
 
AT_Sy°íSètusPro˚ss
(
COS_EVENT
*);

76 
VDS_CacheFlushAŒowed
();

77 
öt32
 
AT_SmsD©aPro˚ss
(
uöt8
* 
pBuf
, 
uöt32
 
Àn
);

78 
AT_RunComm™d
();

79 
AT_AsyncEvítPro˚ss
(
COS_EVENT
* 
pEvít
);

80 
boﬁ
 
AT_CFW_InôPro˚ss
(
COS_EVENT
* 
pEvít
);

85 #ifde‡
AT_DUAL_SIM


86 
AT_SMS_INIT
(
uöt8
 
nSim
);

87 
AT_PBK_Inô
(
uöt8
 
nSim
);

89 
AT_SMS_INIT
();

90 
AT_PBK_Inô
();

96 
AT_SMS_Resu…_Eº
(
uöt32
 
uEº‹Code
, 
uöt8
* 
pBuf„r
, 
uöt16
 
nD©aSize
, c⁄° * 
pExãndEºInfo
,uöt8 
nDLCI
);

97 
CFW_INIT_INFO
 
cfwInôInfo
;

98 
AT_RunComm™dMux
(
uöt8
 
nDLCI
);

100 
	$AT_RunNextComm™dMux
(
uöt8
 
nDLCI
)

103 
	`AT_RunComm™dMux
(
nDLCI
);

105 
	}
}

106 
	$AT_RunNextComm™d
()

109 
	`AT_RunComm™d
();

111 
	}
}

117 
boﬁ
 
	$AT_InôCfw
(
COS_EVENT
 *
pEvít
)

119 
	`AT_Sy°íSètusPro˚ss
(
pEvít
);

120 
	`AT_CFW_InôPro˚ss
(
pEvít
);

121  
FALSE
;

122 
	}
}

124 
boﬁ
 
	$AT_CFW_InôPro˚ss
(
COS_EVENT
 *
pEvít
)

126 
CFW_INIT_INFO
 
cfwInôInfo
;

127 
CFW_EVENT
 
cfw_evít
;

128 
uöt32
 
©s_°©
 = 0;

129 #ifde‡
AT_DUAL_SIM


130 
uöt8
 
nSim
;

132 
	`AT_MemSë
(&
cfw_evít
, 0, 
	`SIZEOF
(cfw_event));

134 
	`AT_CosEvít2CfwEvít
(
pEvít
, &
cfw_evít
);

135 
	`AT_FREE
((
PVOID
)
pEvít
);

136 #ifde‡
AT_DUAL_SIM


137 
nSim
 = 
cfw_evít
.
nFœg
;

139 i‡(
cfw_evít
.
nEvítId
 =
EV_CFW_INIT_IND
)

143 #i‡(
MAL_EXTENDED
 == 1)

144 
PAT_CMD_RESULT
 
pResu…
 = 
NULL
;

145 
uöt8
 
urc_°r
[100] = {0};

147 
	`AT_S¥ötf
((
TCHAR
*)
urc_°r
, (
CONST
 TCHAR*)"^CINIT: %u, %u, %u",

148 
cfw_evít
.
nTy≥
, cfw_evít.
nP¨am1
, cfw_evít.
nP¨am2
);

149 
pResu…
 = 
	`AT_Cª©eRC
(

150 
CSW_IND_NOTIFICATION
,

151 
CMD_RC_CR
,

152 
CMD_ERROR_CODE_OK
,

153 
CMD_ERROR_CODE_TYPE_CME
,

155 
urc_°r
,

156 (
uöt16
)
	`AT_SåLí
(
urc_°r
),0);

158 
	`AT_NŸify2ATM
(
pResu…
,
cfw_evít
.
nUTI
);

160 i‡(
pResu…
 !
NULL
)

162 
	`AT_FREE
(
pResu…
);

163 
pResu…
 = 
NULL
;

168 i‡(
g_gc_pwroff
)

170 
g_gc_pwroff
 = 0;

171 #ifde‡
AT_DUAL_SIM


172 
	`AT_Resu…_OK
(
CMD_FUNC_SUCC
, 
CMD_RC_OK
, 0, 0, 0,
cfw_evít
.
nUTI
,
nSim
);

174 
	`AT_Resu…_OK
(
CMD_FUNC_SUCC
, 
CMD_RC_OK
, 0, 0, 0,
cfw_evít
.
nUTI
);

176  
TRUE
;

179 
g_cfg_cfun
 = 5;

181 
cfw_evít
.
nTy≥
)

184 
CFW_INIT_STATUS_NO_SIM
:

186 #i‡
	`deföed
(
USER_DATA_CACHE_SUPPORT
)

187 
	`VDS_CacheFlushAŒowed
();

189 
	`AT_ModuÀSëInôResu…
(
AT_MODULE_INIT_NO_SIM
);

191 
	`AT_MemCpy
(&(
cfwInôInfo
.
noSim
[0]), &
cfw_evít
, (cfw_event));

195 
CFW_INIT_STATUS_SIM
:

197 i‡(
cfw_evít
.
nP¨am1
&
CFW_INIT_SIM_PIN1_READY
)

199 
	`AT_ModuÀSëInôResu…
(
AT_MODULE_INIT_SIM_AUTH_READY
);

202 i‡(
cfw_evít
.
nP¨am1
&
CFW_INIT_SIM_WAIT_PIN1
)

204 
	`AT_ModuÀSëInôResu…
(
AT_MODULE_INIT_SIM_AUTH_WAIT_PIN1
);

207 i‡(
cfw_evít
.
nP¨am1
&
CFW_INIT_SIM_WAIT_PUK1
)

209 
	`AT_ModuÀSëInôResu…
(
AT_MODULE_INIT_SIM_AUTH_WAIT_PUK1
);

212 
	`AT_MemCpy
(&(
cfwInôInfo
.
sim
), &
cfw_evít
, (cfw_event));

217 
CFW_INIT_STATUS_SAT
:

219 i‡(!(
cfw_evít
.
nP¨am1
&
CFW_INIT_SIM_SAT
))

221 
	`AT_ModuÀSëInôResu…
(
AT_MODULE_INIT_SAT_OK
);

224 i‡(
cfw_evít
.
nP¨am1
&
CFW_INIT_SIM_SAT
)

226 
	`AT_ModuÀSëInôResu…
(
AT_MODULE_INIT_SAT_ERROR
);

229 
	`AT_MemCpy
(&(
cfwInôInfo
.
ßt
), &
cfw_evít
, (cfw_event));

234 
CFW_INIT_STATUS_SIMCARD
:

236 i‡((
cfw_evít
.
nP¨am1
&
CFW_INIT_SIM_CARD_CHANGED
)

237 && (
cfw_evít
.
nP¨am1
&
CFW_INIT_SIM_NORMAL_CARD
))

239 
	`AT_ModuÀSëInôResu…
(
AT_MODULE_INIT_NORMAL_CHANGED_SIM_CARD
);

241 i‡(
cfw_evít
.
nP¨am1
&
CFW_INIT_SIM_NORMAL_CARD
)

243 
	`AT_ModuÀSëInôResu…
(
AT_MODULE_INIT_NORMAL_SIM_CARD
);

245 i‡(
cfw_evít
.
nP¨am1
&
CFW_INIT_SIM_CARD_CHANGED
)

247 
	`AT_ModuÀSëInôResu…
(
AT_MODULE_INIT_CHANGED_SIM_CARD
);

249 i‡(
cfw_evít
.
nP¨am1
&
CFW_INIT_SIM_TEST_CARD
)

251 
	`AT_ModuÀSëInôResu…
(
AT_MODULE_INIT_TEST_SIM_CARD
);

254 
	`AT_MemCpy
(&(
cfwInôInfo
.
simC¨d
), &
cfw_evít
, (cfw_event));

259 
CFW_INIT_STATUS_SMS
:

261 
uöt32
 
nUTI
 = 0x00;

263 if(0 =(
nUTI
 = 
	`AT_AŒocU£rTønsID
()))

265 
	`AT_SMS_Resu…_Eº
(
ERR_AT_CMS_ME_FAIL
, 
NULL
, 0, "cmgr: mÆlo¯UTIÉº‹", 
cfw_evít
.
nUTI
);

266  
FALSE
;

268 
	`CFW_SmsMoInô
(
nUTI
);

270 i‡(0 =(
cfw_evít
.
nP¨am1
))

272 
	`AT_ModuÀSëInôResu…
(
AT_MODULE_INIT_SIM_SMS_OK
);

274 i‡(1 =(
cfw_evít
.
nP¨am1
))

276 
	`AT_ModuÀSëInôResu…
(
AT_MODULE_INIT_SIM_SMS_ERROR
);

279 
	`AT_SMS_INIT
();

281 
	`AT_MemCpy
(&(
cfwInôInfo
.
sms
), &
cfw_evít
, (cfw_event));

284 
©s_°©
 = 
	`SA_GëSysSètus
(
SA_ATS_INIT_STATUS
);

286 
©s_°©
 |
SA_ATS_SMS_READY
;

288 
	`SA_SëSysSètus
(
SA_ATS_INIT_STATUS
, 
©s_°©
);

293 
CFW_INIT_STATUS_PBK
:

295 i‡(0 =(
cfw_evít
.
nP¨am1
))

297 
	`AT_ModuÀSëInôResu…
(
AT_MODULE_INIT_SIM_PBK_OK
);

300 i‡(1 =(
cfw_evít
.
nP¨am1
))

302 
	`AT_ModuÀSëInôResu…
(
AT_MODULE_INIT_SIM_PBK_ERROR
);

304 #ifde‡
AT_DUAL_SIM


305 
	`AT_PBK_Inô
(
nSim
);

307 
	`AT_PBK_Inô
();

310 
	`AT_MemCpy
(&(
cfwInôInfo
.
pbk
), &
cfw_evít
, (cfw_event));

313 
©s_°©
 = 
	`SA_GëSysSètus
(
SA_ATS_INIT_STATUS
);

314 
©s_°©
 |
SA_ATS_PBK_READY
;

315 
	`SA_SëSysSètus
(
SA_ATS_INIT_STATUS
, 
©s_°©
);

317 #i‡
	`deföed
(
USER_DATA_CACHE_SUPPORT
)

318 
	`VDS_CacheFlushAŒowed
();

322 
CFW_INIT_STATUS_AUTODAIL
:

324 
uöt32
 
ªt
 = 0x00;

325 
uöt8
 
De°Numbî
[2] ;

327 
De°Numbî
[0] = 0x11;

328 
De°Numbî
[1] = 0xF2;

329 i‡(
ERR_SUCCESS
 =(
ªt
 = 
	`CFW_CcEmcDül
(
De°Numbî
, 2)))

336 
ERR_SUCCESS
 !
ªt
)

341 
	`COS_SÀï
(500);

342 
ªt
 = 
	`CFW_CcEmcDül
(
De°Numbî
, 2);

355 if(
cfw_evít
.
nEvítId
 =
EV_CFW_SRV_STATUS_IND
)

357 
uöt32
 
nUTI
 = 0x00;

359 
cfw_evít
.
nTy≥
)

364 
	`AT_ModuÀSëInôResu…
(
AT_MODULE_INIT_SIM_SMS_OK
);

369 
	`AT_ModuÀSëInôResu…
(
AT_MODULE_INIT_SIM_SMS_ERROR
);

380 if(0 =(
nUTI
 = 
	`AT_AŒocU£rTønsID
()))

382 
	`AT_SMS_Resu…_Eº
(
ERR_AT_CMS_ME_FAIL
, 
NULL
, 0, "cmgr: mÆlo¯UTIÉº‹",
cfw_evít
.
nUTI
 );

383  
FALSE
;

386 
	`CFW_SmsInôCom∂ëe
(
nUTI
);

388 #ifde‡
AT_DUAL_SIM


389 
	`AT_SMS_INIT
–
nSim
);

391 
	`AT_SMS_INIT
();

394 
	`AT_MemCpy
(&(
cfwInôInfo
.
sms
), &
cfw_evít
, (cfw_event));

397 
©s_°©
 = 
	`SA_GëSysSètus
(
SA_ATS_INIT_STATUS
);

399 
©s_°©
 |
SA_ATS_SMS_READY
;

401 
	`SA_SëSysSètus
(
SA_ATS_INIT_STATUS
, 
©s_°©
);

404 
gATCuºítuCmî_öd
 = 2;

405 
gATCuºítAtSMSInfo
.
sCnmi
.
nMt
 = 2;

409  
FALSE
;

410 
	}
}

412 
boﬁ
 
	$AT_Sy°íSètusPro˚ss
(
COS_EVENT
 *
pEvít
)

414 
uöt8
 
powî_⁄_n‹mÆ
 = 0;

416 i‡(
pEvít
->
nEvítId
 =
EV_DM_POWER_ON_IND
)

418 
uöt32
 
ªt
;

420 
ªt
 = 
	`CFW_ShñlC⁄åﬁ
(
CFW_CONTROL_CMD_POWER_ON
);

425 
	`LOUINT16
(
pEvít
->
nP¨am1
))

428 
DM_POWRN_ON_CAUSE_KEY
:

430 
DM_POWRN_ON_CAUSE_RESET
:

432 
powî_⁄_n‹mÆ
 = 1;

437 
DM_POWRN_ON_CAUSE_CHARGE
:

439 
DM_POWRN_ON_CAUSE_ALARM
:

445 
DM_POWRN_ON_CAUSE_EXCEPTION
:

459 i‡(
pEvít
->
nEvítId
 =
EV_CFW_EXIT_IND
)

461 i‡(
powî_⁄_n‹mÆ
 == 1)

463 
	`CFW_ShñlC⁄åﬁ
(
CFW_CONTROL_CMD_POWER_OFF
);

470  
FALSE
;

471 
	}
}

477 
	$BackupCmdBuf„r
()

479 i‡(
g_AtModuÀ
.
cmd_buf
.
D©aLí
 != 0)

480 
	`mem˝y
(&
g_AtModuÀ
.
cmd_buf_bak
, &g_AtModuÀ.
cmd_buf
, (
AT_CMD_BUF
));

481 
	}
}

482 
	$BackupCmdBuf„rMux
(
uöt8
 
nDLCI
)

484 i‡(
g_AtModuÀMux
[
nDLCI
].
cmd_buf
.
D©aLí
 != 0)

485 
	`mem˝y
(&
g_AtModuÀMux
[
nDLCI
].
cmd_buf_bak
, &g_AtModuÀMux[nDLCI].
cmd_buf
, (
AT_CMD_BUF
));

486 
	}
}

487 
	$Re°‹eCmdBuf„r
()

489 
	`mem˝y
(&
g_AtModuÀ
.
cmd_buf
, &g_AtModuÀ.
cmd_buf_bak
, (
AT_CMD_BUF
));

490 
	}
}

491 
	$Re°‹eCmdBuf„rMux
(
uöt8
 
nDLCI
)

493 
	`mem˝y
(&
g_AtModuÀMux
[
nDLCI
].
cmd_buf
, &g_AtModuÀMux[nDLCI].
cmd_buf_bak
, (
AT_CMD_BUF
));

494 
	}
}

495 
boﬁ
 
	$Fú°CmdIsBSœsh
(
uöt8
 
nDLCI
)

497 
AT_CMD
 *
pCmdLi°
 = 
NULL
;

499 if(
bMuxA˘iveSètus
)

500 
pCmdLi°
 = *
	`AT_GëComm™dLi°Mux
(
nDLCI
);

502 
pCmdLi°
 = *
	`AT_GëComm™dLi°
();

505 i‡(
pCmdLi°
 =
NULL
)

506  
FALSE
;

508 
pCmdLi°
 !
NULL
)

510 i‡(
	`AT_SåCmp
(
pCmdLi°
->
pName
, "A/") == 0)

511  
TRUE
;

513 
pCmdLi°
 =ÖCmdLi°->
pNext
;

516  
FALSE
;

517 
	}
}

518 
öt32
 
	$AT_Comm™dLöePro˚ssMux
(
uöt8
* 
pBuf
, 
uöt32
 
Àn
,uöt8 
nDLCI
)

520 
uöt32
 
uResu…
;

521 
öt32
 
iRë
 = 
ERR_SUCCESS
;

522 
uöt32
 
i
;

523 
AT_PARSE_RESULT
 
sP¨£Resu…
;

525 
SA_COMMAND_TABLE_T
* 
pSaCmdTabÀ
 = (SA_COMMAND_TABLE_T*)
g_Comm™dTabÀ
;

526 
AT_CMD_NODE
* 
pTmp
;

527 
boﬁ
 
bFöe
 = 
FALSE
;

529 i‡(
pBuf
 =
NULL
 && 
Àn
 == 0)

537 
	`AT_MemSë
(&
sP¨£Resu…
, 0, 
	`SIZEOF
(
AT_PARSE_RESULT
));

540 
uResu…
 = 
	`AT_CmdLöeSy¡axP¨£r
(
pBuf
, 
Àn
, &
sP¨£Resu…
);

543 i‡(
uResu…
 =
ERR_SUCCESS
)

548 
sP¨£Resu…
.
pNodeHód
 !
NULL
)

550 
bFöe
 = 
FALSE
;

551 
i
 = 0;

553 
NULL
 !
pSaCmdTabÀ
[
i
].
pName
)

555 i‡(
	`AT_SåCa£ÀssCmp
(
pSaCmdTabÀ
[
i
].
pName
, 
sP¨£Resu…
.
pNodeHód
->
szName
) == 0)

557 
AT_CMD
* 
pAtCmd
;

558 
pAtCmd
 = (
AT_CMD
*)
	`AT_MALLOC
((AT_CMD));

560 i‡(
pAtCmd
 =
NULL
)

563 
	`AT_MemSë
(
pAtCmd
, 0x00, (
AT_CMD
));

565 
pAtCmd
->
iTy≥
 = 
sP¨£Resu…
.
pNodeHód
->
uTy≥
;

567 
	`AT_SåCpy
(
pAtCmd
->
pName
, 
sP¨£Resu…
.
pNodeHód
->
szName
);

569 
	`AT_SåCpy
(
pAtCmd
->
pP¨a
, 
sP¨£Resu…
.
pNodeHód
->
szP¨am
);

571 
	`AT_SåU¥
(
pAtCmd
->
pName
);

572 
pAtCmd
->
nDLCI
 =ÇDLCI;

576 
	`AT_AddCmdToLi°Mux
(
pAtCmd
,
nDLCI
);

578 
bFöe
 = 
TRUE
;

583 
i
++;

586 i‡(
bFöe
 !
TRUE
)

588 
iRë
 = -1;

592 
pTmp
 = 
sP¨£Resu…
.
pNodeHód
;

594 
sP¨£Resu…
.
pNodeHód
 = sP¨£Resu….pNodeHód->
pNext
;

595 
	`AT_FREE
(
pTmp
);

596 
pTmp
 = 
NULL
;

600 
sP¨£Resu…
.
pNodeHód
 !
NULL
)

602 
pTmp
 = 
sP¨£Resu…
.
pNodeHód
;

603 
sP¨£Resu…
.
pNodeHód
 = sP¨£Resu….pNodeHód->
pNext
;

604 
	`AT_FREE
(
pTmp
);

605 
pTmp
 = 
NULL
;

611 
iRë
 = 
uResu…
;

615 i‡(
ERR_SUCCESS
 !
iRë
)

618 
	`AT_CÀ¨Comm™dLi°Mux
(
nDLCI
);

622  
iRë
;

623 
	}
}

624 
öt32
 
	$AT_Comm™dLöePro˚ss
(
uöt8
* 
pBuf
, 
uöt32
 
Àn
)

626 
uöt32
 
uResu…
;

627 
öt32
 
iRë
 = 
ERR_SUCCESS
;

628 
uöt32
 
i
;

629 
AT_PARSE_RESULT
 
sP¨£Resu…
;

630 
SA_COMMAND_TABLE_T
* 
pSaCmdTabÀ
 = (SA_COMMAND_TABLE_T*)
g_Comm™dTabÀ
;

631 
AT_CMD_NODE
* 
pTmp
;

632 
boﬁ
 
bFöe
 = 
FALSE
;

634 i‡(
pBuf
 =
NULL
 && 
Àn
 == 0)

646 
	`AT_TC_MEMBLOCK
(
g_sw_SA
, 
pBuf
, 
Àn
, 16);

648 
	`AT_MemSë
(&
sP¨£Resu…
, 0, 
	`SIZEOF
(
AT_PARSE_RESULT
));

650 
uResu…
 = 
	`AT_CmdLöeSy¡axP¨£r
(
pBuf
, 
Àn
, &
sP¨£Resu…
);

652 i‡(
uResu…
 =
ERR_SUCCESS
)

656 
sP¨£Resu…
.
pNodeHód
 !
NULL
)

658 
bFöe
 = 
FALSE
;

659 
i
 = 0;

661 
NULL
 !
pSaCmdTabÀ
[
i
].
pName
)

663 i‡(
	`AT_SåCa£ÀssCmp
(
pSaCmdTabÀ
[
i
].
pName
, 
sP¨£Resu…
.
pNodeHód
->
szName
) == 0)

665 
AT_CMD
* 
pAtCmd
;

666 
pAtCmd
 = (
AT_CMD
*)
	`AT_MALLOC
((AT_CMD));

668 i‡(
pAtCmd
 =
NULL
)

671 
	`AT_MemSë
(
pAtCmd
, 0x00, (
AT_CMD
));

673 
pAtCmd
->
iTy≥
 = 
sP¨£Resu…
.
pNodeHód
->
uTy≥
;

675 
	`AT_SåCpy
(
pAtCmd
->
pName
, 
sP¨£Resu…
.
pNodeHód
->
szName
);

677 
	`AT_SåCpy
(
pAtCmd
->
pP¨a
, 
sP¨£Resu…
.
pNodeHód
->
szP¨am
);

679 
	`AT_SåU¥
(
pAtCmd
->
pName
);

683 
	`AT_AddCmdToLi°
(
pAtCmd
);

685 
bFöe
 = 
TRUE
;

690 
i
++;

693 i‡(
bFöe
 !
TRUE
)

695 
iRë
 = -1;

699 
pTmp
 = 
sP¨£Resu…
.
pNodeHód
;

701 
sP¨£Resu…
.
pNodeHód
 = sP¨£Resu….pNodeHód->
pNext
;

702 
	`AT_FREE
(
pTmp
);

703 
pTmp
 = 
NULL
;

707 
sP¨£Resu…
.
pNodeHód
 !
NULL
)

709 
pTmp
 = 
sP¨£Resu…
.
pNodeHód
;

710 
sP¨£Resu…
.
pNodeHód
 = sP¨£Resu….pNodeHód->
pNext
;

711 
	`AT_FREE
(
pTmp
);

712 
pTmp
 = 
NULL
;

718 
iRë
 = 
uResu…
;

724 i‡(
ERR_SUCCESS
 !
iRë
)

727 
	`AT_CÀ¨Comm™dLi°
();

732  
iRë
;

733 
	}
}

736 
öt32
 
	$AT_SmsD©aPro˚ssMux
(
uöt8
* 
pBuf
, 
uöt32
 
Àn
, uöt8 
nDLCI
)

740 
öt32
 
ªt
;

741 
AT_CMD
 **
µCmdLi°
 = 
NULL
;

742 
AT_CMD
 *
pCmd
 = 
NULL
;

744 
µCmdLi°
 = 
	`AT_GëComm™dLi°Mux
(
nDLCI
);

745 
pCmd
 = *
µCmdLi°
;

747 i‡((
	`AT_SåCmp
(
pCmd
->
pName
, "+CMGS") == 0)

748 || (
	`AT_SåCmp
(
pCmd
->
pName
, "+CMGW") == 0)

749 || (
	`AT_SåCmp
(
pCmd
->
pName
, "+CIPSEND") == 0)

750 || (
	`AT_SåCmp
(
pCmd
->
pName
, "+IPSEND") == 0))

752 
ªt
 = 
ERR_SUCCESS
;

754 i‡(
	`AT_IsAsyncTimîMux
(
nDLCI
))

756 
	`AT_KûlAsyncTimîMux
(
nDLCI
);

761 
ªt
 = -1;

764  
ªt
;

765 
	}
}

767 
öt32
 
	$AT_SmsD©aPro˚ss
(
uöt8
* 
pBuf
, 
uöt32
 
Àn
)

771 
öt32
 
ªt
;

772 
AT_CMD
 **
µCmdLi°
 = 
NULL
;

773 
AT_CMD
 *
pCmd
 = 
NULL
;

775 
µCmdLi°
 = 
	`AT_GëComm™dLi°
();

776 
pCmd
 = *
µCmdLi°
;

778 i‡((
	`AT_SåCmp
(
pCmd
->
pName
, "+CMGS") == 0)

779 || (
	`AT_SåCmp
(
pCmd
->
pName
, "+CMGW") == 0)

780 || (
	`AT_SåCmp
(
pCmd
->
pName
, "+CIPSEND") == 0)

781 || (
	`AT_SåCmp
(
pCmd
->
pName
, "+IPSEND") == 0))

783 
ªt
 = 
ERR_SUCCESS
;

785 i‡(
	`AT_IsAsyncTimî
())

787 
	`AT_KûlAsyncTimî
();

792 
ªt
 = -1;

795  
ªt
;

796 
	}
}

799 
	$AT_RunComm™d
()

801 
AT_CMD
** 
µCmdLi°
 = 
NULL
;

802 
AT_CMD
 *
pCmd
 = 
NULL
;

804 
µCmdLi°
 = 
	`AT_GëComm™dLi°
();

805 
pCmd
 = (
AT_CMD
 *Ë* 
µCmdLi°
;

807 i‡(
µCmdLi°
 !
NULL
)

813 i‡(
pCmd
 !
NULL
)

817 i‡(
pCmd
->
pCmdFunc
 =
NULL
)

821 
	`AT_CÀ¨Comm™dLi°
();

829 
AT_CMD_PARA
 
∑ø
;

830 
AT_CMD_BUF
* 
pCmdBuf
 = 
	`AT_GëCmdBuf
();

832 
	`AT_MemSë
(&
∑ø
, 0, (
AT_CMD_PARA
));

835 
∑ø
.
iTy≥
 = 
pCmd
->iType;

836 
∑ø
.
pP¨a
 = 
pCmd
->pPara;

837 
∑ø
.
uCmdSèmp
 = 
pCmd
->uCmdStamp;

839 i‡(
pCmdBuf
->
D©aLí
 > 0 &&–(
	`AT_GëSètus
(Ë=
AT_STATUS_SMS_DATA
)

840 ||(
	`AT_GëSètus
(Ë=
AT_STATUS_IP_DATA
)) )

842 
∑ø
.
pExD©a
 = 
pCmdBuf
->
D©aBuf
;

843 
∑ø
.
iExD©aLí
 = 
pCmdBuf
->
D©aLí
;

847 
∑ø
.
pExD©a
 = 
NULL
;

848 
∑ø
.
iExD©aLí
 = 0;

852 i‡(
NULL
 !
pCmd
->
pCmdFunc
)

854 
pCmd
->
	`pCmdFunc
(&
∑ø
);

876 
	}
}

877 
	$AT_RunComm™dMux
(
uöt8
 
nDLCI
)

879 
AT_CMD
** 
µCmdLi°
 = 
NULL
;

880 
AT_CMD
* 
pCmd
 = 
NULL
;

881 
µCmdLi°
 = 
	`AT_GëComm™dLi°Mux
(
nDLCI
);

882 
pCmd
 = (
AT_CMD
*)*
µCmdLi°
;

884 i‡(
µCmdLi°
 !
NULL
)

889 i‡(
pCmd
 !
NULL
)

893 i‡(
pCmd
->
pCmdFunc
 =
NULL
)

898 
	`AT_CÀ¨Comm™dLi°Mux
(
nDLCI
);

905 
AT_CMD_PARA
 
∑ø
;

907 
AT_CMD_BUF
* 
pCmdBuf
 = (AT_CMD_BUF *)
	`AT_GëCmdBufMux
(
nDLCI
);

909 
	`AT_MemSë
(&
∑ø
, 0, (
AT_CMD_PARA
));

912 
∑ø
.
iTy≥
 = 
pCmd
->iType;

913 
∑ø
.
pP¨a
 = 
pCmd
->pPara;

914 
∑ø
.
uCmdSèmp
 = 
pCmd
->uCmdStamp;

915 
∑ø
.
nDLCI
 =ÇDLCI;

917 i‡(
pCmdBuf
->
D©aLí
 > 0 && ((
	`AT_GëSètusMUX
(
nDLCI
Ë=
AT_STATUS_SMS_DATA
Ë|| (AT_GëSètusMUX“DLCIË=
AT_STATUS_IP_DATA
)))

919 
∑ø
.
pExD©a
 = 
pCmdBuf
->
D©aBuf
;

920 
∑ø
.
iExD©aLí
 = 
pCmdBuf
->
D©aLí
;

924 
∑ø
.
pExD©a
 = 
NULL
;

925 
∑ø
.
iExD©aLí
 = 0;

929 i‡(
NULL
 !
pCmd
->
pCmdFunc
)

932 
pCmd
->
	`pCmdFunc
(&
∑ø
);

954 
	}
}

957 
	$AT_AsyncEvítPro˚ss
(
COS_EVENT
 *
pEvít
)

959 if(
bMuxA˘iveSètus
)

961 if((
	`HIUINT16
(
pEvít
->
nP¨am3
Ë=0Ë||(HIUINT16’Evít->nP¨am3Ë> 
MAX_DLC_NUM
 ))

963 
pEvít
->
nP¨am3
 =ÖEvent->nParam3 & 0x00ffff|(1 << 16);

966 
pEvít
->
nEvítId
)

969 
EV_CFW_SIM_SET_PREF_OPERATOR_LIST_RSP
:

971 
EV_CFW_SIM_GET_PREF_OPERATOR_LIST_RSP
:

973 
EV_CFW_SIM_GET_PREF_OPT_LIST_MAXNUM_RSP
:

975 
EV_CFW_NW_SIGNAL_QUALITY_IND
:

977 
EV_CFW_NW_REG_STATUS_IND
:

979 
EV_CFW_NW_SET_BAND_RSP
:

981 
EV_CFW_NW_GET_IMEI_RSP
:

983 
EV_CFW_NW_GET_SIGNAL_QUALITY_RSP
:

985 
EV_CFW_NW_SET_REGISTRATION_RSP
:

987 
EV_CFW_NW_GET_AVAIL_OPERATOR_RSP
:

989 
EV_CFW_NW_ABORT_LIST_OPERATORS_RSP
:

992 
	`AT_NW_AsyncEvítPro˚ss
(
pEvít
);

998 
EV_CFW_NW_DEREGISTER_RSP
:

1000 i‡(!
g_gc_pwroff
)

1003 
	`AT_NW_AsyncEvítPro˚ss
(
pEvít
);

1011 
EV_CFW_CC_SPEECH_CALL_IND
:

1012 
	`SA_SëSysSètus
(
AT_EVENT
, 
EV_CFW_CC_SPEECH_CALL_IND
);

1015 
	`AT_CC_AsyncEvítPro˚ss
(
pEvít
);

1019 
EV_CFW_CC_ERROR_IND
:

1022 
	`AT_CC_AsyncEvítPro˚ss
(
pEvít
);

1026 
EV_CFW_CC_RELEASE_CALL_IND
:

1027 
	`SA_SëSysSètus
(
AT_EVENT
, 
EV_CFW_CC_RELEASE_CALL_IND
);

1030 
	`AT_CC_AsyncEvítPro˚ss
(
pEvít
);

1034 
EV_CFW_CC_CALL_INFO_IND
:

1037 
	`AT_CC_AsyncEvítPro˚ss
(
pEvít
);

1041 
EV_CFW_CC_CRSSINFO_IND
:

1044 
	`AT_CC_AsyncEvítPro˚ss
(
pEvít
);

1048 
EV_CFW_CC_ACCEPT_SPEECH_CALL_RSP
:

1049 
	`SA_SëSysSètus
(
AT_EVENT
, 
EV_CFW_CC_ACCEPT_SPEECH_CALL_RSP
);

1052 
	`AT_CC_AsyncEvítPro˚ss
(
pEvít
);

1056 
EV_CFW_CC_CALL_HOLD_MULTIPARTY_RSP
:

1059 
	`AT_CC_AsyncEvítPro˚ss
(
pEvít
);

1063 
EV_CFW_CC_INITIATE_SPEECH_CALL_RSP
:

1064 
	`SA_SëSysSètus
(
AT_EVENT
, 
EV_CFW_CC_INITIATE_SPEECH_CALL_RSP
);

1067 
	`AT_CC_AsyncEvítPro˚ss
(
pEvít
);

1071 
EV_CFW_CC_RELEASE_CALL_RSP
:

1072 
	`SA_SëSysSètus
(
AT_EVENT
, 
EV_CFW_CC_RELEASE_CALL_RSP
);

1075 
	`AT_CC_AsyncEvítPro˚ss
(
pEvít
);

1079 
EV_CFW_SS_SET_CALL_WAITING_RSP
:

1081 
EV_CFW_SS_QUERY_CALL_WAITING_RSP
:

1083 
EV_CFW_SS_SET_CALL_FORWARDING_RSP
:

1085 
EV_CFW_SS_QUERY_CALL_FORWARDING_RSP
:

1087 
EV_CFW_SS_QUERY_CLIP_RSP
:

1089 
EV_CFW_SS_QUERY_CLIR_RSP
:

1091 
EV_CFW_SS_QUERY_COLR_RSP
:

1093 
EV_CFW_SS_QUERY_COLP_RSP
:

1095 
EV_CFW_SS_SEND_USSD_RSP
:

1097 
EV_CFW_SIM_GET_PUCT_RSP
:

1099 
EV_CFW_SIM_GET_ACM_RSP
:

1101 
EV_CFW_SIM_SET_ACM_RSP
:

1103 
EV_CFW_SIM_SET_PUCT_RSP
:

1106 
	`AT_SS_AsyncEvítPro˚ss
(
pEvít
);

1110 
EV_CFW_SIM_CHANGE_PWD_RSP
:

1112 
EV_CFW_SIM_GET_AUTH_STATUS_RSP
:

1114 
EV_CFW_SIM_ENTER_AUTH_RSP
:

1116 
EV_CFW_SIM_SET_FACILITY_LOCK_RSP
:

1118 
EV_CFW_SIM_GET_FACILITY_LOCK_RSP
:

1120 
EV_CFW_SIM_DELETE_MESSAGE_RSP
:

1122 
EV_CFW_SIM_WRITE_MESSAGE_RSP
:

1124 
EV_CFW_SIM_READ_MESSAGE_RSP
:

1126 
EV_CFW_SIM_LIST_MESSAGE_RSP
:

1128 
EV_CFW_SIM_GET_SMS_STORAGE_INFO_RSP
:

1130 
EV_CFW_SIM_READ_BINARY_RSP
:

1132 
EV_CFW_SIM_UPDATE_BINARY_RSP
:

1134 
EV_CFW_SIM_GET_SMS_PARAMETERS_RSP
:

1136 
EV_CFW_SIM_SET_SMS_PARAMETERS_RSP
:

1138 
EV_CFW_SIM_GET_MR_RSP
:

1140 
EV_CFW_SIM_SET_MR_RSP
:

1142 
EV_CFW_SIM_COMPOSE_PDU_RSP
:

1144 
EV_CFW_SIM_SET_PBKMODE_RSP
:

1146 
EV_CFW_SIM_GET_PBKMODE_RSP
:

1148 
EV_CFW_SIM_INIT_SMS_RSP
:

1150 
EV_CFW_SIM_RESET_RSP
:

1154 
EV_CFW_SIM_GET_ACMMAX_RSP
:

1156 
EV_CFW_SIM_SET_ACMMAX_RSP
:

1160 
	`AT_SIM_AsyncEvítPro˚ss
(
pEvít
);

1165 
EV_CFW_SIM_GET_ICCID_RSP
:

1167 
	`AT_Emod_AsyncEvítPro˚ss
(
pEvít
);

1171 
EV_CFW_SIM_GET_PROVIDER_ID_RSP
:

1175 
	`AT_ID_AsyncEvítPro˚ss
(
pEvít
);

1179 
EV_CFW_SAT_CMDTYPE_IND
:

1181 
EV_CFW_SAT_ACTIVATION_RSP
:

1183 
EV_CFW_SAT_GET_STATUS_RSP
:

1185 
EV_CFW_SAT_RESPONSE_RSP
:

1187 
EV_CFW_SAT_GET_INFORMATION_RSP
:

1190 
	`AT_SAT_AsyncEvítPro˚ss
(
pEvít
);

1194 
EV_CFW_NEW_SMS_IND
:

1196 
EV_CFW_SMS_INFO_IND
:

1198 
EV_CFW_SMS_DELETE_MESSAGE_RSP
:

1200 
EV_CFW_SMS_LIST_MESSAGE_RSP
:

1202 
EV_CFW_SMS_READ_MESSAGE_RSP
:

1204 
EV_CFW_SMS_SEND_MESSAGE_RSP
:

1206 
EV_CFW_SMS_WRITE_MESSAGE_RSP
:

1210 
EV_CFW_SMS_GET_STORAGE_RSP
:

1212 
EV_CFW_SMS_SET_STORAGE_RSP
:

1214 
EV_CFW_SMS_SET_CENTER_ADDR_RSP
:

1216 
EV_CFW_SMS_GET_CENTER_ADDR_RSP
:

1218 
EV_CFW_SMS_SET_TEXT_MODE_PARAM_RSP
:

1220 
EV_CFW_SMS_GET_TEXT_MODE_PARAM_RSP
:

1222 
EV_CFW_SMS_LIST_MESSAGE_HRD_RSP
:

1224 
EV_CFW_SMS_COPY_MESSAGE_RSP
:

1226 
EV_CFW_SMS_SET_UNREAD2READ_RSP
:

1228 
EV_CFW_SMS_SET_UNSENT2SENT_RSP
:

1230 
EV_CFW_SMS_SET_READ2UNREAD_RSP
:

1233 
	`AT_SMS_AsyncEvítPro˚ss
(
pEvít
);

1238 
EV_CFW_PBK_ADD_RSP
:

1240 
EV_CFW_PBK_UPDATE_ENTRY_RSP
:

1242 
EV_CFW_PBK_DELETE_RSP
:

1244 
EV_CFW_PBK_DELETE_BATCH_ENTRIES_RSP
:

1246 
EV_CFW_PBK_FIND_ENTRY_RSP
:

1248 
EV_CFW_PBK_LIST_ENTRIES_RSP
:

1250 
EV_CFW_PBK_GET_ENTRY_RSP
:

1252 
EV_CFW_PBK_COPY_ENTRIES_RSP
:

1254 
EV_CFW_PBK_ADD_ENTRY_ITEM_RSP
:

1256 
EV_CFW_PBK_GET_ENTRY_ITEMS_RSP
:

1258 
EV_CFW_PBK_DELETE_ENTRY_ITEM_RSP
:

1260 
EV_CFW_PBK_ADD_CALLLOG_ENTTRY_RSP
:

1262 
EV_CFW_PBK_GET_CALLLOG_ENTRY_RSP
:

1264 
EV_CFW_PBK_LIST_CALLLOG_ENTRIES_RSP
:

1266 
EV_CFW_PBK_DELETE_CALLLOG_ALL_ENTRIES_RSP
:

1268 
EV_CFW_PBK_CANCEL_RSP
:

1270 
EV_CFW_PBK_DELETE_CALLLOG_OLDEST_ENTRY_RSP
:

1272 
EV_CFW_SIM_ADD_PBK_RSP
:

1274 
EV_CFW_SIM_DELETE_PBK_ENTRY_RSP
:

1276 
EV_CFW_SIM_GET_PBK_ENTRY_RSP
:

1278 
EV_CFW_SIM_LIST_PBK_ENTRY_RSP
:

1280 
EV_CFW_SIM_LIST_COUNT_PBK_ENTRY_RSP
:

1282 
EV_CFW_SIM_GET_PBK_STRORAGE_INFO_RSP
:

1284 
EV_CFW_SIM_GET_PBK_STRORAGE_RSP
:

1288 
	`AT_PBK_AsyncEvítPro˚ss
(
pEvít
);

1294 
EV_CFW_GPRS_CXT_ACTIVE_IND
:

1296 
EV_CFW_GPRS_CXT_DEACTIVE_IND
:

1298 
EV_CFW_GPRS_MOD_IND
:

1300 
EV_CFW_GPRS_STATUS_IND
:

1303 
EV_CFW_GPRS_CTX_MODIFY_ACC_RSP
:

1305 
EV_CFW_GPRS_ATT_RSP
:

1307 
EV_CFW_GPRS_ACT_RSP
:

1309 
EV_CFW_GPRS_CXT_ACTIVE_RSP
:

1311 
EV_CFW_GPRS_MOD_RSP
:

1313 
	`AT_GPRS_AsyncEvítPro˚ss
(
pEvít
);

1318 
EV_CFW_GPRS_DATA_IND
:

1319 
	`PsDow∆ökD©aH™dÀr
((
CFW_GPRS_DATA
 *)
pEvít
->
nP¨am1
, 
	`LOUINT8
’Evít->
nP¨am2
));

1322 
EV_CFW_TCPIP_SOCKET_CONNECT_RSP
:

1324 
EV_CFW_TCPIP_SOCKET_SEND_RSP
:

1325 
EV_CFW_TCPIP_SOCKET_CLOSE_RSP
:

1326 
EV_CFW_TCPIP_REV_DATA_IND
 :

1329 
EV_CFW_TSM_INFO_IND
:

1330 
	`AT_NW_AsyncEvítPro˚ss
(
pEvít
);

1332 
EV_CFW_TSM_INFO_END_RSP
:

1340 
EV_PM_BC_IND
:

1344 
	`AT_SPECIAL_B©ãry_AsyncEvítPro˚ss
(
pEvít
);

1348 
EV_CFW_EXIT_IND
:

1350 
EV_TIM_ALRAM_IND
:

1353 
	`AT_GC_AsyncEvítPro˚ss
(
pEvít
);

1356 
EV_CFW_PPP_TERMINATE_IND
:

1358 if(
bMuxA˘iveSètus
)

1360 
	`©_PµEndPro˚ssMux
(
	`HIUINT16
(
pEvít
->
nP¨am3
));

1363 
	`©_PµEndPro˚ss
();

1371 
	}
}

1374 
	$PsDow∆ökD©aH™dÀr
(
CFW_GPRS_DATA
 *
pG¥sD©a
, 
uöt8
 
cid
)

1377 
i
 = 0;

1378 
cid
 = cid;

1381  
i
 = 0 ; i < 
pG¥sD©a
->
nD©aLígth
; i++ )

1385 
	`sxs_Dump
(1,0, 
pG¥sD©a
->
pD©a
,ÖG¥sD©a->
nD©aLígth
);

1386 
	`u¨t_PsSídD©a
((
uöt8
 *)
pG¥sD©a
->
pD©a
,ÖG¥sD©a->
nD©aLígth
);

1389 
	}
}

	@D:\Projects\modem2.5g\branches\l4\navi\baseband\l4\at\engine\src\at_module.c

14 
	~"©.h
"

15 
	~"©_ß.h
"

16 
	~"©_è.h
"

17 
	~"©_cmd_•ecül_b©ãry.h
"

18 
	~"©_cmd_gc.h
"

19 
	~"©_moduÀ.h
"

20 
	~"©_mux.h
"

22 
	~"©_cfg.h
"

23 
	~"©_u¨t.h
"

24 
	~"sxs_io.h
"

25 
	~"cswty≥.h
"

27 
AT_ModuÀInfo
 
	gg_AtModuÀ
 = {0};

38 
	$AT_ModuÀInô
()

40 
UART_CFG
 
ucfg
 = {
UART_BAUD_RATE_115200
, 
UART_8_DATA_BITS
, 
UART_1_STOP_BIT
, 
UART_NO_PARITY
,

41 
UART_AFC_MODE_DISABLE


43 
boﬁ
 
bCfg
 = 0;

45 
g_AtModuÀ
.
mode
 = 
AT_MODE_CMD
;

46 
g_AtModuÀ
.
°©us
 = 
AT_STATUS_CMD_LINE
;

47 
g_AtModuÀ
.
uiCmîMode
 = 
AT_CMER_DATA_BUF_MODE
;

48 
g_AtModuÀ
.
pCmdLi°
 = 
NULL
;

49 
g_AtModuÀ
.
uiModuÀInôSètus
 = 0xff;

51 
	`TS_SëOuçutMask
(
CFW_CC_TS_ID
, 1);

52 
	`TS_SëOuçutMask
(
CFW_NW_TS_ID
, 1);

53 
	`TS_SëOuçutMask
(
CFW_SIM_TS_ID
, 1);

55 
g_AtModuÀ
.
ps_3∂us_°©
 = 
pssm_W_PFX
;

58 #ifde‡
AT_DUAL_SIM


60 
	`CFW_CfgSëNwSètus
 (0,1);

61 
	`CFW_CfgSëNwSètus
 (1,0);

63 
	`CFW_CfgSëNwSètus
(0);

65 
	`CFW_CfgSëCh¨a˘îSë
(
CFW_CHSET_GSM
);

68 
bCfg
 = 
	`©_CfgGëAtSëtögs
(
MANUFACTURER_DEFALUT_SETING
, 0);

76 
ucfg
.
br
 = 
gATCuºítu32nBaudR©e
;

80 
	`u¨t_Inô
(&
ucfg
);

82 
	`u¨t_O≥n
(
UART_DEFAULT_UART
, 
ds_low
);

84 
	`AT_SPECIAL_B©ãry_Inô
();

86 i‡(
	`AT_GC_Inô
(Ë=
FALSE
)

97 
	`AT_WrôeU¨t
((
uöt8
 *)"\r\nAT Ródy\r\n", (
uöt16
)
	`°æí
((const *)"\r\nAT Ready\r\n"));

101 
	}
}

103 
	$AT_ModuÀSëInôResu…
(
uöt8
 
uiSètus
)

105 
g_AtModuÀ
.
uiModuÀInôSètus
 = 
uiSètus
;

108 
uiSètus
)

111 
AT_MODULE_INIT_NO_SIM
:

113 
g_AtModuÀ
.
uiModuÀInôSètus
 = 
AT_MODULE_INIT_NO_SIM
;

118 
AT_MODULE_INIT_SIM_AUTH_READY
:

120 
g_AtModuÀ
.
uiModuÀInôSètus
 = 
AT_MODULE_INIT_SIM_AUTH_READY
;

126 
AT_MODULE_INIT_SIM_AUTH_WAIT_PUK1
:

128 
g_AtModuÀ
.
uiModuÀInôSètus
 = 
AT_MODULE_INIT_SIM_AUTH_WAIT_PUK1
;

133 
AT_MODULE_INIT_SIM_AUTH_WAIT_PIN1
:

135 
g_AtModuÀ
.
uiModuÀInôSètus
 = 
AT_MODULE_INIT_SIM_AUTH_WAIT_PIN1
;

140 
AT_MODULE_INIT_SAT_OK
:

142 
g_AtModuÀ
.
uiModuÀInôSètus
 = 
AT_MODULE_INIT_SAT_OK
;

147 
AT_MODULE_INIT_SAT_ERROR
:

149 
g_AtModuÀ
.
uiModuÀInôSètus
 = 
AT_MODULE_INIT_SAT_ERROR
;

154 
AT_MODULE_INIT_NORMAL_SIM_CARD
:

156 
g_AtModuÀ
.
uiModuÀInôSètus
 = 
AT_MODULE_INIT_NORMAL_SIM_CARD
;

161 
AT_MODULE_INIT_CHANGED_SIM_CARD
:

163 
g_AtModuÀ
.
uiModuÀInôSètus
 = 
AT_MODULE_INIT_CHANGED_SIM_CARD
;

168 
AT_MODULE_INIT_TEST_SIM_CARD
:

170 
g_AtModuÀ
.
uiModuÀInôSètus
 = 
AT_MODULE_INIT_TEST_SIM_CARD
;

175 
AT_MODULE_INIT_SIM_SMS_OK
:

177 
g_AtModuÀ
.
uiModuÀInôSètus
 = 
AT_MODULE_INIT_SIM_SMS_OK
;

182 
AT_MODULE_INIT_SIM_SMS_ERROR
:

184 
g_AtModuÀ
.
uiModuÀInôSètus
 = 
AT_MODULE_INIT_SIM_SMS_ERROR
;

189 
AT_MODULE_INIT_SIM_PBK_OK
:

191 
g_AtModuÀ
.
uiModuÀInôSètus
 = 
AT_MODULE_INIT_SIM_PBK_OK
;

196 
AT_MODULE_INIT_SIM_PBK_ERROR
:

198 
g_AtModuÀ
.
uiModuÀInôSètus
 = 
AT_MODULE_INIT_SIM_PBK_ERROR
;

205 
g_AtModuÀ
.
uiModuÀInôSètus
 = 0xff;

212 
	}
}

214 
uöt8
 
	$AT_ModuÀGëInôResu…
()

216  
g_AtModuÀ
.
uiModuÀInôSètus
;

217 
	}
}

220 
	$AT_SëMode
(
uöt8
 
mode
)

222 i‡(
mode
 =
AT_MODE_CMD
)

224 
	`u¨t_SëU¨tD©aMode
(
FALSE
);

228 
	`u¨t_SëU¨tD©aMode
(
TRUE
);

231 
g_AtModuÀ
.
mode
 = mode;

234 
	}
}

238 
uöt8
 
	$AT_GëMode
()

240  
g_AtModuÀ
.
mode
;

241 
	}
}

243 
uöt8
 
	$AT_SëCmîMode
(
uöt8
 
mode
)

246 
g_AtModuÀ
.
uiCmîMode
 = 
mode
;

248  
g_AtModuÀ
.
uiCmîMode
;

249 
	}
}

251 
uöt8
 
	$AT_GëCmîMode
()

253  
g_AtModuÀ
.
uiCmîMode
;

254 
	}
}

255 
uöt8
 
	$AT_GëModeMux
(
uöt8
 
nDLCI
)

257  
g_AtModuÀMux
[
nDLCI
].
mode
;

258 
	}
}

260 
uöt8
 
	$AT_SëCmîModeMux
(
uöt8
 
mode
,uöt8 
nDLCI
)

263 
g_AtModuÀMux
[
nDLCI
].
uiCmîMode
 = 
mode
;

265  
g_AtModuÀMux
[
nDLCI
].
uiCmîMode
;

266 
	}
}

268 
uöt8
 
	$AT_GëCmîModeMux
(
uöt8
 
nDLCI
)

270  
g_AtModuÀMux
[
nDLCI
].
uiCmîMode
;

271 
	}
}

272 
	$AT_SëSètus
(
öt8
 
°©us
)

274 
	`u¨t_SëWaôSmsD©aFœg
(
°©us
);

275 
g_AtModuÀ
.
°©us
 = status;

276 
	}
}

277 
	$AT_SëSètusMux
(
öt8
 
°©us
,
uöt8
 
nDLCI
)

279 
	`u¨t_SëWaôSmsD©aFœg
(
°©us
);

280 
g_AtModuÀMux
[
nDLCI
].
°©us
 = status;

281 
	}
}

282 
öt8
 
	$AT_GëSètus
()

284  
g_AtModuÀ
.
°©us
;

285 
	}
}

286 
öt8
 
	$AT_GëSètusMUX
(
uöt8
 
nDLCI
)

288  
g_AtModuÀMux
[
nDLCI
].
°©us
;

289 
	}
}

291 
AT_CMD
** 
	$AT_GëPªvComm™dLi°
()

293  &(
g_AtModuÀ
.
pPªvCmdLi°
);

294 
	}
}

297 
AT_CMD
** 
	$AT_GëComm™dLi°
()

301  &(
g_AtModuÀ
.
pCmdLi°
);

302 
	}
}

303 
AT_CMD
** 
	$AT_GëPªvComm™dLi°Mux
(
uöt8
 
nDLCI
)

305  &(
g_AtModuÀMux
[
nDLCI
].
pPªvCmdLi°
);

306 
	}
}

309 
AT_CMD
** 
	$AT_GëComm™dLi°Mux
(
uöt8
 
nDLCI
)

313  &(
g_AtModuÀMux
[
nDLCI
].
pCmdLi°
);

314 
	}
}

315 
	$AT_CÀ¨Comm™dLi°
()

317 
AT_CMD
** 
µCmdLi°
 = 
	`AT_GëComm™dLi°
();

318 
AT_CMD
 * 
pCuº
 = *
µCmdLi°
;

322 
pCuº
 !
NULL
)

324 
	`AT_FªeCurCmd
(
µCmdLi°
, 
pCuº
);

325 
pCuº
 = 
NULL
;

326 
µCmdLi°
 = 
	`AT_GëComm™dLi°
();

327 
pCuº
 = *
µCmdLi°
;

330 
	`SA_SëSysSètus
(
SA_INNER_RUNCOMMAND_STATE_
, 0);

332 
	`AT_SëSètus
(
AT_STATUS_CMD_LINE
);

334 
	}
}

336 
	$AT_CÀ¨Comm™dLi°Mux
(
uöt8
 
nDLCI
)

338 
AT_CMD
** 
µCmdLi°
 = 
	`AT_GëComm™dLi°Mux
(
nDLCI
);

339 
AT_CMD
 * 
pCuº
 = *
µCmdLi°
;

343 
pCuº
 !
NULL
)

346 
	`AT_FªeCurCmd
(
µCmdLi°
, 
pCuº
);

347 
pCuº
 = 
NULL
;

348 
µCmdLi°
 = 
	`AT_GëComm™dLi°Mux
(
nDLCI
);

349 
pCuº
 = *
µCmdLi°
;

352 
	`SA_SëSysSètusMux
(
SA_INNER_RUNCOMMAND_STATE_
, 
nDLCI
);

354 
	`AT_SëSètusMux
(
AT_STATUS_CMD_LINE
, 
nDLCI
);

356 
	}
}

359 
AT_IND
** 
	$AT_GëIndiˇti⁄Li°
()

361  (
AT_IND
**)&(
g_AtModuÀ
.
pIndLi°
);

362 
	}
}

364 
AT_IND
** 
	$AT_GëIndiˇti⁄Li°Mux
(
uöt8
 
nDLCI
)

366  &(
g_AtModuÀMux
[
nDLCI
].
pIndLi°
);

367 
	}
}

369 
AT_CMD_BUF
* 
	$AT_GëCmdBuf
()

371  &(
g_AtModuÀ
.
cmd_buf
);

372 
	}
}

374 
AT_CMD_BUF
* 
	$AT_GëCmdBufMux
(
uöt8
 
nDLCI
)

376  &(
g_AtModuÀMux
[
nDLCI
].
cmd_buf
);

377 
	}
}

379 
öt32
 
	$AT_C⁄vîtTeD©a2Mt
(
uöt8
* 
pTeD©a
, 
uöt32
 
Àn
, 
AT_CMD_BUF
 *
pMtD©aBuff
)

381 
è_ch£t_c⁄vît_ªsu…_t
 
r
 = 
cs_cvt_INVALID_
;

382 
uöt16
 
d©a_Àn
 = 0;

386 i‡(
Àn
 > 
AT_CMD_LINE_BUFF_LEN
 - 2)

387 
Àn
 = 
AT_CMD_LINE_BUFF_LEN
 - 2;

389 
d©a_Àn
 = 
pMtD©aBuff
->
D©aLí
;

391 
r
 = 
	`©e_TaC⁄vît
(
mode_ã2mt
, 
pTeD©a
, 
Àn
, 
pMtD©aBuff
->
D©aBuf
, &
d©a_Àn
);

393 
pMtD©aBuff
->
D©aLí
 = 
d©a_Àn
;

395 i‡(
r
 =
cs_cvt_√edÀss
)

397 
	`mem˝y
(
pMtD©aBuff
->
D©aBuf
, 
pTeD©a
, 
Àn
);

398 
pMtD©aBuff
->
D©aLí
 = 
Àn
;

400 i‡(
r
 =
cs_cvt_Áûed
)

406  
pMtD©aBuff
->
D©aLí
;

407 
	}
}

410 
	$AT_CÀ™CmdBuf
(
AT_CMD_BUF
* 
pCBuf
)

412 
	`AT_MemSë
(
pCBuf
->
D©aBuf
, 0, 
AT_CMD_LINE_BUFF_LEN
);

413 
pCBuf
->
D©aLí
 = 0;

415 
	}
}

418 
boﬁ
 
	$AT_IsAsyncTimî
()

420  
g_AtModuÀ
.
bAsyncTimî
;

421 
	}
}

423 
boﬁ
 
	$AT_IsAsyncTimîMux
(
uöt8
 
nDLCI
)

425  
g_AtModuÀMux
[
nDLCI
].
bAsyncTimî
;

426 
	}
}

427 
boﬁ
 
	$AT_SëAsyncTimî
(
uöt32
 
nEœp£
)

429 
	`AT_KûlAsyncTimî
();

430 
g_AtModuÀ
.
bAsyncTimî
 = 
	`COS_SëTimî
(
CSW_AT_TASK_HANDLE
,

431 
ATE_ASYNC_TIMER
,

432 
COS_TIMER_MODE_SINGLE
,

433 
nEœp£
 * 16384

435  
g_AtModuÀ
.
bAsyncTimî
;

436 
	}
}

438 
boﬁ
 
	$AT_SëAsyncTimîMux
(
uöt32
 
nEœp£
, 
uöt8
 
nDLCI
)

440 
	`AT_KûlAsyncTimîMux
(
nDLCI
);

441 
g_AtModuÀMux
[
nDLCI
].
bAsyncTimî
 = 
	`COS_SëTimî
(
CSW_AT_TASK_HANDLE
,

442 
ATE_ASYNC_TIMER
 + 
nDLCI
,

443 
COS_TIMER_MODE_SINGLE
,

444 
nEœp£
 * 16384

446  
g_AtModuÀMux
[
nDLCI
].
bAsyncTimî
;

447 
	}
}

449 
boﬁ
 
	$AT_KûlAsyncTimîMux
(
uöt8
 
nDLCI
)

451 
boﬁ
 
ªt
 = 
FALSE
;

453 i‡(
	`AT_IsAsyncTimîMux
(
nDLCI
))

455 
ªt
 = 
	`COS_KûlTimî
(
CSW_AT_TASK_HANDLE
,

456 
ATE_ASYNC_TIMER
 + 
nDLCI


458 
g_AtModuÀMux
[
nDLCI
].
bAsyncTimî
 = 
FALSE
;

461  
ªt
;

462 
	}
}

465 #ifde‡
AT_USER_DBS


467 
boﬁ
 
	$AT_IsRögTimî
()

469  
g_AtModuÀ
.
bRögTimî
;

470 
	}
}

472 
boﬁ
 
	$AT_IsRögTimîMux
(
uöt8
 
nDLCI
)

474  
g_AtModuÀMux
[
nDLCI
].
bRögTimî
;

475 
	}
}

477 
boﬁ
 
	$AT_KûlRögTimîMux
(
uöt8
 
nDLCI
)

479 
boﬁ
 
ªt
 = 
FALSE
;

481 i‡(
	`AT_IsRögTimîMux
(
nDLCI
))

483 
ªt
 = 
	`COS_KûlTimî
(
CSW_AT_TASK_HANDLE
,

484 
ATE_RING_TIMER
 + 
nDLCI


486 
g_AtModuÀMux
[
nDLCI
].
bRögTimî
 = 
FALSE
;

489  
ªt
;

490 
	}
}

492 
boﬁ
 
	$AT_KûlRögTimî
()

494 
boﬁ
 
ªt
 = 
FALSE
;

496 i‡(
	`AT_IsRögTimî
())

498 
ªt
 = 
	`COS_KûlTimî
(
CSW_AT_TASK_HANDLE
,

499 
ATE_RING_TIMER
);

500 
g_AtModuÀ
.
bRögTimî
 = 
FALSE
;

503  
ªt
;

504 
	}
}

506 
boﬁ
 
	$AT_SëRögTimîMux
(
uöt32
 
nEœp£
, 
uöt8
 
nDLCI
)

508 i‡(
	`AT_IsRögTimîMux
(
nDLCI
))

509 
	`AT_KûlRögTimîMux
(
nDLCI
);

510 
g_AtModuÀMux
[
nDLCI
].
bRögTimî
 = 
	`COS_SëTimî
(
CSW_AT_TASK_HANDLE
,

511 
ATE_RING_TIMER
 + 
nDLCI
,

512 
COS_TIMER_MODE_SINGLE
,

513 
nEœp£
 * 16384

517  
g_AtModuÀMux
[
nDLCI
].
bRögTimî
;

518 
	}
}

520 
boﬁ
 
	$AT_SëRögTimî
(
uöt32
 
nEœp£
)

522 i‡(
	`AT_IsRögTimî
())

523 
	`AT_KûlRögTimî
();

524 
g_AtModuÀ
.
bRögTimî
 = 
	`COS_SëTimî
(
CSW_AT_TASK_HANDLE
,

525 
ATE_RING_TIMER
,

526 
COS_TIMER_MODE_SINGLE
,

527 
nEœp£
 * 16384

531  
g_AtModuÀ
.
bRögTimî
;

532 
	}
}

536 
boﬁ
 
	$AT_KûlAsyncTimî
()

538 
boﬁ
 
ªt
 = 
FALSE
;

540 i‡(
	`AT_IsAsyncTimî
())

542 
ªt
 = 
	`COS_KûlTimî
(
CSW_AT_TASK_HANDLE
,

543 
ATE_ASYNC_TIMER


545 
g_AtModuÀ
.
bAsyncTimî
 = 
FALSE
;

548  
ªt
;

549 
	}
}

551 
boﬁ
 
	$AT_IsLPTimî
()

553  
g_AtModuÀ
.
bLPTimî
;

554 
	}
}

556 
boﬁ
 
	$AT_IsLPTimîMux
(
uöt8
 
nDLCI
)

558  
g_AtModuÀMux
[
nDLCI
].
bLPTimî
;

559 
	}
}

561 
boﬁ
 
	$AT_KûlLPTimî
()

563 
boﬁ
 
ªt
 = 
FALSE
;

565 i‡(
	`AT_IsLPTimî
())

567 
ªt
 = 
	`COS_KûlTimî
(
CSW_AT_TASK_HANDLE
,

568 
ATE_LP_TIMER


570 
g_AtModuÀ
.
bLPTimî
 = 
FALSE
;

573  
ªt
;

574 
	}
}

576 
boﬁ
 
	$AT_KûlLPTimîMux
(
uöt8
 
nDLCI
)

578 
boﬁ
 
ªt
 = 
FALSE
;

580 i‡(
	`AT_IsLPTimîMux
(
nDLCI
))

582 
ªt
 = 
	`COS_KûlTimî
(
CSW_AT_TASK_HANDLE
,

583 
ATE_LP_TIMER


585 
g_AtModuÀMux
[
nDLCI
].
bLPTimî
 = 
FALSE
;

588  
ªt
;

589 
	}
}

590 
boﬁ
 
	$AT_SëLPTimî
(
uöt32
 
nEœp£
)

592 if(
	`AT_IsLPTimî
())

593 
	`AT_KûlLPTimî
();

594 
g_AtModuÀ
.
bLPTimî
 = 
	`COS_SëTimî
(
CSW_AT_TASK_HANDLE
,

595 
ATE_LP_TIMER
,

596 
COS_TIMER_MODE_SINGLE
,

597 
nEœp£
 * 16384

600  
g_AtModuÀ
.
bLPTimî
;

601 
	}
}

603 
boﬁ
 
	$AT_SëLPTimîMux
(
uöt32
 
nEœp£
,
uöt8
 
nDLCI
)

605 if(
	`AT_IsLPTimîMux
(
nDLCI
))

606 
	`AT_KûlLPTimîMux
(
nDLCI
);

607 
g_AtModuÀMux
[
nDLCI
].
bAsyncTimî
 = 
	`COS_SëTimî
(
CSW_AT_TASK_HANDLE
,

608 
ATE_LP_TIMER
+
nDLCI
,

609 
COS_TIMER_MODE_SINGLE
,

610 
nEœp£
 * 16384

612 
	`AT_SëLPModeMux
(0,
nDLCI
);

613  
g_AtModuÀMux
[
nDLCI
].
bLPTimî
;

614 
	}
}

616 
	$AT_SëLPModeMux
(
boﬁ
 
bMode
,
uöt8
 
nDLCI
)

619 if(
bMode
 =
g_AtModuÀMux
[
nDLCI
].
bInLPMode
)

622 if(
bMode
)

624 
	`hÆ_SysReque°Fªq
(4 , 32768 );

628 
	`hÆ_SysReque°Fªq
(4 , 26000000 );

631 
g_AtModuÀMux
[
nDLCI
].
bInLPMode
 = 
bMode
;

634 
	}
}

636 
uöt16
 
	$AT_WrôeU¨t
(
uöt8
 *
pD©aToSíd
, 
uöt16
 
d©a_Àn
)

638 
uöt8
 *
p
 = 0;

639 
uöt16
 
Àn
 = 0;

640 
è_ch£t_c⁄vît_ªsu…_t
 
r
 = 
cs_cvt_INVALID_
;

641 
uöt16
 
£nd_r
 = 0;

643 
	`AT_ASSERT
(
pD©aToSíd
 !
NULL
);

653 i‡(
	`cfg_GëMtCh£t
(Ë=
cs_ucs2
)

655 
p
 = 
	`mÆloc
(
d©a_Àn
 + 2);

656 
	`mem£t
(
p
, 0, (
d©a_Àn
 + 2));

660 
p
 = 
	`mÆloc
(
d©a_Àn
 * 2 + 2);

661 
	`mem£t
(
p
, 0, (
d©a_Àn
 * 2 + 2));

664 
r
 = 
	`©e_TaC⁄vît
(
mode_mt2ã
, 
pD©aToSíd
, 
d©a_Àn
, 
p
, &
Àn
);

666 i‡(
r
 =
cs_cvt_√edÀss
)

668 
	`mem˝y
(
p
, 
pD©aToSíd
, 
d©a_Àn
);

669 
Àn
 = 
d©a_Àn
;

671 i‡(
r
 =
cs_cvt_Áûed
)

673 
	`AT_TC
(
g_sw_ATE
, "Convert string failed by callingáte_TaConvert().");

677 
£nd_r
 = 
	`u¨t_SídD©aToTe
(
p
, 
Àn
);

679 
	`‰ì
(
p
);

680  
£nd_r
;

681 
	}
}

683 
uöt16
 
	$AT_WrôeU¨t
(
uöt8
 *
pD©aToSíd
, 
uöt16
 
d©a_Àn
)

686  
	`hÆ_U¨tSídD©a
(
HAL_UART_CH1
, 
pD©aToSíd
, 
d©a_Àn
);

687 
	}
}

690 
	$ATE_H™dÀ3PlusTimîEvMux
(
uöt8
 
nDLCI
)

692 
g_AtModuÀMux
[
nDLCI
].
ps_3∂us_°©
)

695 
pssm_W_PFX
:

696 
g_AtModuÀMux
[
nDLCI
].
ps_3∂us_°©
 = 
pssm_W_STR
;

699 
pssm_W_SFX
:

701 
g_AtModuÀMux
[
nDLCI
].
ps_3∂us_°©
 = 
pssm_GOTTEN
;

702 
	`STOP_3PLUS_TIMERMUX
(
nDLCI
);

703 
	`SA_SëSysSètusMux
(
SA_ATCMD_3PLUS_RESULT
, 
SA_ATCMD_3PLUS_OK
, 
nDLCI
);

704 
g_AtModuÀMux
[
nDLCI
].
ps_3∂us_°©
 = 
pssm_W_PFX
;

712 
	}
}

714 
	$ATE_H™dÀ3PlusTimîEv
()

716 
g_AtModuÀ
.
ps_3∂us_°©
)

719 
pssm_W_PFX
:

720 
g_AtModuÀ
.
ps_3∂us_°©
 = 
pssm_W_STR
;

723 
pssm_W_SFX
:

725 
g_AtModuÀ
.
ps_3∂us_°©
 = 
pssm_GOTTEN
;

726 
	`STOP_3PLUS_TIMER
();

727 
	`SA_SëSysSètus
(
SA_ATCMD_3PLUS_RESULT
, 
SA_ATCMD_3PLUS_OK
);

728 
g_AtModuÀ
.
ps_3∂us_°©
 = 
pssm_W_PFX
;

736 
	}
}

740 #ifde‡
TEST_STUB_2


741 
	$°ub_SídD©aToAtTask
(
uöt8
 *
pD©a
, 
uöt16
 
uD©aSize
,uöt8 
nDLCI
)

743 
COS_EVENT
 
ev
 = {0};

744 
CFW_GPRS_DATA
 *
pG¥sD©a
 = 
NULL
;

747 
pG¥sD©a
 = 
	`AT_MALLOC
((
CFW_GPRS_DATA
Ë+ 
uD©aSize
);

749 
	`mem£t
(
pG¥sD©a
, 0, (
CFW_GPRS_DATA
Ë+ 
uD©aSize
);

752 
pG¥sD©a
->
nD©aLígth
 = 
uD©aSize
;

753 
	`mem˝y
(
pG¥sD©a
->
pD©a
,ÖD©a, 
uD©aSize
);

756 
ev
.
nEvítId
 = 
EV_CFW_GPRS_DATA_IND
;

757 
ev
.
nP¨am1
 = (
uöt32
)
pG¥sD©a
;

758 
ev
.
nP¨am2
 = 
nDLCI
 << 16;

761 
	`COS_SídEvít
(
g_hAtTask
, &
ev
, 
COS_WAIT_FOREVER
, 
COS_EVENT_PRI_NORMAL
);

762 
	}
}

768 
	#EV_CFW_GPRS_DATA_REQ
 1

	)

769 
HANDLE
 
	gg_hPPPTask
 = 
NULL
;

771 
öt32
 
	$CFW_PµSídD©a
(
uöt8
* 
pD©a
, 
uöt16
 
nD©aSize
)

773 
COS_EVENT
 
sEvt
 = {0, };

775 
boﬁ
 
bResu…
;

777 i‡(
NULL
 =
pD©a
)

779  
ERR_CFW_INVALID_PARAMETER
;

783 
sEvt
.
nEvítId
 = 
EV_CFW_GPRS_DATA_REQ
;

785 
sEvt
.
nP¨am1
 = (
uöt32
)
pD©a
;

787 
sEvt
.
nP¨am2
 = 
nD©aSize
;

790 
bResu…
 = 
	`COS_SídEvít
(
g_hPPPTask
, &
sEvt
, 
COS_WAIT_FOREVER
, 
COS_EVENT_PRI_NORMAL
);

792 i‡(
FALSE
 =
bResu…
)

794  
ERR_CFW_QUEUE_FULL
;

798  
ERR_SUCCESS
;

800 
	}
}

805 
	#HDL_STATUS_IDLE
 0x00

	)

806 
	#HDL_STATUS_BEGIN
 0x01

	)

807 
	#HDL_STATUS_PROCESS
 0x02

	)

808 
	#HDL_STATUS_END
 0x03

	)

809 
	#HDL_MAX_DATA_SIZE
 4096*4

	)

811 
uöt8
 
	ggHDLSètus
 = 
HDL_STATUS_IDLE
;

812 
uöt32
 
	ggHDLSt‹eBufPosi
 = 0x00;

814 
uöt8
 
	ggHDLSt‹eBuf
[
HDL_MAX_DATA_SIZE
] = {0x00,};

815 
öt32
 
CFW_PµSídD©a
(
uöt8
* 
pD©a
, 
uöt16
 
nD©aSize
);

817 
	$ATE_RódU∂ökD©a
(
ATE_CALLER_T
 
ˇŒî
)

820 
uöt8
 *
pBuff
 = 
NULL
;

821 
uöt16
 
uSize
 = 0;

824 
uSize
 = 
	`u¨t_PsRódRxD©a
(
NULL
, 0);

827 
pBuff
 = 
	`AT_MALLOC
(
uSize
);

829 
	`mem£t
(
pBuff
, 0, 
uSize
);

832 
uSize
 = 
	`u¨t_PsRódRxD©a
(
pBuff
, uSize);

834 i‡(
uSize
 == 0)

836 
	`AT_FREE
(
pBuff
);

840 
	`sxs_Dump
(1,0, 
pBuff
, 
uSize
);

842 i‡((
g_AtModuÀ
.
ps_3∂us_°©
 =
pssm_W_STR
Ë&& (
ˇŒî
 =
TIMEOUT
) &&

843 (
uSize
 =3Ë&& (
	`memcmp
(
pBuff
, "+++", uSize) == 0))

846 
g_AtModuÀ
.
ps_3∂us_°©
 = 
pssm_W_SFX
;

847 
	`START_3PLUS_TIMER
();

851 i‡(
g_AtModuÀ
.
ps_3∂us_°©
 =
pssm_W_SFX
)

853 #ifde‡
TEST_STUB_2


855 
	`°ub_SídD©aToAtTask
("+++", 
uSize
);

857 
	`CFW_PµSídD©a
((
uöt8
*)"+++", 
uSize
);

861 
g_AtModuÀ
.
ps_3∂us_°©
 = 
pssm_W_PFX
;

868 if((
uSize
 + 
gHDLSt‹eBufPosi
Ë> 
HDL_MAX_DATA_SIZE
)

872 
	`mem˝y
(
gHDLSt‹eBuf
 + 
gHDLSt‹eBufPosi
, 
pBuff
, 
uSize
);

873 
gHDLSt‹eBufPosi
 +
uSize
;

875 
	`AT_FREE
(
pBuff
);

876 
pBuff
 = 
NULL
;

880 
gHDLSètus
)

882 
HDL_STATUS_IDLE
:

885 
uöt8
 *
p
 = 
	`memchr
(
gHDLSt‹eBuf
, 0x7E, 
gHDLSt‹eBufPosi
);

886 if(
NULL
 !
p
 )

888 
	`memmove
(
gHDLSt‹eBuf
, 
p
, 
gHDLSt‹eBufPosi
 - (p - gHDLStoreBuf));

891 
gHDLSt‹eBufPosi
 -
p
 - 
gHDLSt‹eBuf
;

894 
	`AT_ASSERT
(
gHDLSt‹eBufPosi
<=
HDL_MAX_DATA_SIZE
);

896 
gHDLSètus
 = 
HDL_STATUS_BEGIN
;

900 
	`mem£t
(
gHDLSt‹eBuf
, 0x00, 
gHDLSt‹eBufPosi
);

901 
	`AT_ASSERT
(
gHDLSt‹eBufPosi
<=
HDL_MAX_DATA_SIZE
);

902 
gHDLSt‹eBufPosi
 = 0x00;

907 
HDL_STATUS_BEGIN
:

909 if–
gHDLSt‹eBufPosi
 > 
HDL_MAX_DATA_SIZE
 )

911 
	`mem£t
(
gHDLSt‹eBuf
, 0x00, 
HDL_MAX_DATA_SIZE
);

912 
gHDLSt‹eBufPosi
 = 0x00;

915 
uöt8
 *
p
 = 
	`memchr
(
gHDLSt‹eBuf
 + 1, 0x7E, 
gHDLSt‹eBufPosi
 - 1);

916 if(
NULL
 !
p
 )

919 
uöt8
 *
pSídD©a
 = 
	`AT_MALLOC
((
uöt32
)(
p
-
gHDLSt‹eBuf
) + 1);

920 
	`mem£t
(
pSídD©a
, 0x00, (
uöt32
)(
p
-
gHDLSt‹eBuf
) + 1);

921 
	`mem˝y
(
pSídD©a
, 
gHDLSt‹eBuf
, (
uöt32
)(
p
-gHDLStoreBuf) + 1);

922 
	`CFW_PµSídD©a
(
pSídD©a
, (
uöt32
)(
p
-
gHDLSt‹eBuf
) + 1);

929 
	`memmove
(
gHDLSt‹eBuf
, 
p
 + 1, 
gHDLSt‹eBufPosi
 - ((
uöt32
)(p-gHDLStoreBuf) + 1));

930 
gHDLSt‹eBufPosi
 -(
uöt32
)(
p
-
gHDLSt‹eBuf
) + 1;

934 
	`AT_ASSERT
(
gHDLSt‹eBufPosi
<=
HDL_MAX_DATA_SIZE
);

935 
gHDLSètus
 = 
HDL_STATUS_IDLE
;

937 
	`AT_FREE
(
pSídD©a
);

938 
pSídD©a
 = 
NULL
;

947 
HDL_STATUS_END
:

959 #ifde‡
TEST_STUB_2


961 
	`°ub_SídD©aToAtTask
(
pBuff
, 
uSize
);

963 
	`CFW_PµSídD©a
(
pBuff
, 
uSize
);

965 
	`START_3PLUS_TIMER
();

968 
	`AT_FREE
(
pBuff
);

969 
pBuff
 = 
NULL
;

972 
	}
}

974 
	$AT_GPIOSÀïH™dÀr
()

978 
	`u¨t_Clo£
(
UART_DEFAULT_UART
);

979 
	}
}

980 
	$AT_GPIOSÀï
(
HAL_GPIO_GPIO_ID_T
 
gpio
)

982 
HAL_GPIO_IRQ_MASK_T
 
nGpioMaskCfg
;

983 
HAL_GPIO_GPIO_ID_T
 
nGpioId
;

986 
nGpioMaskCfg
.
risög
 = 
TRUE
;

987 
nGpioMaskCfg
.
ÁŒög

FALSE
;

988 
nGpioMaskCfg
.
deboun˚
=
TRUE
;

989 
nGpioMaskCfg
.
Àvñ
=
FALSE
;

991 
nGpioId
=
gpio
;

996 
	}
}

997 
	$AT_GPIOWakeupH™dÀr
()

1000 
	`u¨t_O≥n
(
UART_DEFAULT_UART
, 
ds_low
);

1003 
	}
}

1004 
	$AT_GPIOWakeup
(
HAL_GPIO_GPIO_ID_T
 
gpio
)

1006 
HAL_GPIO_IRQ_MASK_T
 
nGpioMaskCfg
;

1007 
HAL_GPIO_GPIO_ID_T
 
nGpioId
;

1010 
nGpioMaskCfg
.
risög
 = 
FALSE
;

1011 
nGpioMaskCfg
.
ÁŒög

TRUE
;

1012 
nGpioMaskCfg
.
deboun˚
=
TRUE
;

1013 
nGpioMaskCfg
.
Àvñ
=
FALSE
;

1015 
nGpioId
=
gpio
;

1020 
	}
}

1021 
UART_INFO_T
 
g_U¨tInfo
;

1022 
	$AT_GPIORe£tH™dÀr
()

1025 
g_U¨tInfo
.
CommO≥√d
 = 
FALSE
;

1026 
	`u¨t_Clo£
(1);

1028 
	}
}

1029 
	$AT_GPIORe£t
(
HAL_GPIO_GPIO_ID_T
 
gpio
)

1031 
HAL_GPIO_IRQ_MASK_T
 
nGpioMaskCfg
;

1032 
HAL_GPIO_GPIO_ID_T
 
nGpioId
;

1035 
nGpioMaskCfg
.
risög
 = 
TRUE
;

1036 
nGpioMaskCfg
.
ÁŒög

FALSE
;

1037 
nGpioMaskCfg
.
deboun˚
=
TRUE
;

1038 
nGpioMaskCfg
.
Àvñ
=
FALSE
;

1039 
nGpioId
=
gpio
;

1044 
	}
}

1045 
	$AT_GPIOWakeupAP
(
HAL_GPIO_GPIO_ID_T
 
gpio
)

1047 
HAL_GPIO_IRQ_MASK_T
 
nGpioMaskCfg
;

1048 
HAL_GPIO_GPIO_ID_T
 
nGpioId
;

1050 
nGpioMaskCfg
.
risög
 = 
TRUE
;

1051 
nGpioMaskCfg
.
ÁŒög

FALSE
;

1052 
nGpioMaskCfg
.
deboun˚
=
TRUE
;

1053 
nGpioMaskCfg
.
Àvñ
=
FALSE
;

1054 
nGpioId
=
gpio
;

1058 
	}
}

1061 
uöt8
 
	ggInLPMode
 = 0;

1062 
UART_INFO_T
 
g_U¨tInfo
;

1064 
	$AT_SëLPMode
(
boﬁ
 
bMode
)

1068 if(
bMode
)

1072 
	`u¨t_Clo£
(
UART_1
);

1079 
	`u¨t_O≥n
(
UART_1
,
ds_low
);

1084 
	}
}

1148 
	$ATE_RódU∂ökD©aMux
(
uöt8
 *
pBuff
, 
uöt16
 
uSize
, 
ATE_CALLER_T
 
ˇŒî
, uöt8 
nDLCI
)

1154 i‡(
uSize
 == 0)

1159 i‡((
g_AtModuÀMux
[
nDLCI
].
ps_3∂us_°©
 =
pssm_W_STR
Ë&& (
ˇŒî
 =
TIMEOUT
) &&

1160 (
uSize
 =3Ë&& (
	`memcmp
(
pBuff
, "+++", uSize) == 0))

1163 
g_AtModuÀMux
[
nDLCI
].
ps_3∂us_°©
 = 
pssm_W_SFX
;

1164 
	`START_3PLUS_TIMERMUX
(
nDLCI
);

1168 i‡(
g_AtModuÀMux
[
nDLCI
].
ps_3∂us_°©
 =
pssm_W_SFX
)

1170 #ifde‡
TEST_STUB_2


1172 
	`°ub_SídD©aToAtTask
("+++", 
uSize
);

1174 
	`CFW_PµSídD©a
((
uöt8
*)"+++", 
uSize
);

1178 
g_AtModuÀMux
[
nDLCI
].
ps_3∂us_°©
 = 
pssm_W_PFX
;

1185 if((
uSize
 + 
gHDLSt‹eBufPosi
Ë> 
HDL_MAX_DATA_SIZE
)

1189 
	`mem˝y
(
gHDLSt‹eBuf
 + 
gHDLSt‹eBufPosi
, 
pBuff
, 
uSize
);

1190 
gHDLSt‹eBufPosi
 +
uSize
;

1194 
gHDLSètus
)

1196 
HDL_STATUS_IDLE
:

1199 
uöt8
 *
p
 = 
	`memchr
(
gHDLSt‹eBuf
, 0x7E, 
gHDLSt‹eBufPosi
);

1200 if(
NULL
 !
p
 )

1202 
	`memmove
(
gHDLSt‹eBuf
, 
p
, 
gHDLSt‹eBufPosi
 - (p - gHDLStoreBuf));

1205 
gHDLSt‹eBufPosi
 -
p
 - 
gHDLSt‹eBuf
;

1210 
gHDLSètus
 = 
HDL_STATUS_BEGIN
;

1214 
	`mem£t
(
gHDLSt‹eBuf
, 0x00, 
gHDLSt‹eBufPosi
);

1216 
gHDLSt‹eBufPosi
 = 0x00;

1221 
HDL_STATUS_BEGIN
:

1223 
uöt8
 *
p
 = 
NULL
;

1225 if–
gHDLSt‹eBufPosi
 > 
HDL_MAX_DATA_SIZE
 )

1227 
	`mem£t
(
gHDLSt‹eBuf
, 0x00, 
HDL_MAX_DATA_SIZE
);

1228 
gHDLSt‹eBufPosi
 = 0x00;

1232 
p
 = 
	`memchr
(
gHDLSt‹eBuf
 + 1, 0x7E, 
gHDLSt‹eBufPosi
 - 1);

1234 if(
NULL
 !
p
 )

1236 
uöt8
 *
pSídD©a
 = 
	`AT_MALLOC
((
uöt32
)(
p
 - 
gHDLSt‹eBuf
) + 1);

1237 
	`mem£t
(
pSídD©a
, 0x00, (
uöt32
)(
p
 - 
gHDLSt‹eBuf
) + 1);

1238 
	`mem˝y
(
pSídD©a
, 
gHDLSt‹eBuf
, (
uöt32
)(
p
-gHDLStoreBuf) + 1);

1243 
	`CFW_PµSídD©a
(
pSídD©a
, (
uöt32
)(
p
 - 
gHDLSt‹eBuf
) + 1);

1250 
	`memmove
(
gHDLSt‹eBuf
, 
p
 + 1, 
gHDLSt‹eBufPosi
 - ((
uöt32
)(p-gHDLStoreBuf) + 1));

1251 
gHDLSt‹eBufPosi
 -(
uöt32
)(
p
-
gHDLSt‹eBuf
) + 1;

1256 
gHDLSètus
 = 
HDL_STATUS_IDLE
;

1258 
	`AT_FREE
(
pSídD©a
);

1259 
pSídD©a
 = 
NULL
;

1268 
HDL_STATUS_END
:

1276 
	}
}

	@D:\Projects\modem2.5g\branches\l4\navi\baseband\l4\at\engine\src\at_parser.c

20 #ifde‡
_MS_VC_VER_


26 
	~"©.h
"

27 
	~"©_ß.h
"

28 
	~"©_moduÀ.h
"

31 
	~"©_∑r£r.h
"

32 
	~"©_deföe.h
"

36 
AT_CMD_NAME
 
	gg_pBNameLi°
[] =

38 {(
uöt8
*)"a"},

39 {(
uöt8
*)"e"},

40 {(
uöt8
*)"h"},

41 {(
uöt8
*)"i"},

42 {(
uöt8
*)"o"},

43 {(
uöt8
*)"q"},

44 {(
uöt8
*)"s0"},

45 {(
uöt8
*)"s1"},

46 {(
uöt8
*)"s2"},

47 {(
uöt8
*)"s3"},

48 {(
uöt8
*)"s4"},

49 {(
uöt8
*)"s5"},

50 {(
uöt8
*)"v"},

51 {(
uöt8
*)"x"},

52 {(
uöt8
*)"z"},

53 {(
uöt8
*)"&f"},

54 {(
uöt8
*)"&v"},

55 {(
uöt8
*)"&w"},

56 {(
uöt8
*)"\\q"},

63 
AT_CMD_NAME
 
	gg_pTNameLi°
[] =

65 {(
uöt8
*)"d"},

66 {(
uöt8
*)"h"},

67 {(
uöt8
*)"+dlst"},

80 
	$°∫icmp
(
s1
, 
s2
, 
n
)

81 c⁄° * 
s1
;

82 c⁄° * 
s2
;

83 
size_t
 
n
;

85 i‡(
n
 == 0)

89 
c1
 = ()*
s1
++;

90 
c2
 = ()*
s2
++;

92 i‡(
c1
 !
c2
)

94 i‡(
c1
 >'A' && c1 <'Z' && 
c2
 >= 'a' && c2 <= 'z')

95 
c1
 += 'a' - 'A';

96 i‡(
c1
 >'a' && c1 <'z' && 
c2
 >= 'A' && c2 <= 'Z')

97 
c2
 += 'a' - 'A';

98 i‡(
c1
 !
c2
)

99  
c1
 - 
c2
;

101 i‡(
c1
 == 0)

103 } --
n
 != 0);

106 
	}
}

109 
	$lcd_¥e£¡_CS_log
()

112 
	}
}

114 
boﬁ
 
	$AT_IsBa£Cmd
 (
uöt8
* 
pName
)

116 
uöt32
 
uCou¡
;

117 
uöt32
 
i
;

119 
uCou¡
 = 
	`SIZEOF
(
g_pBNameLi°
)/SIZEOF(
AT_CMD_NAME
);

120 
i
 = 0; i < 
uCou¡
; i++)

122 if(
	`AT_SåCa£ÀssCmp
(
pName
,
g_pBNameLi°
[
i
].pName) == 0)

124  
TRUE
;

127  
FALSE
;

128 
	}
}

131 
boﬁ
 
	$AT_IsTîmiCmd
(
uöt8
* 
pName
)

133 
uöt32
 
uCou¡
;

134 
uöt32
 
i
;

136 
uCou¡
 = 
	`SIZEOF
(
g_pTNameLi°
)/SIZEOF(
AT_CMD_NAME
);

137 
i
 = 0; i < 
uCou¡
; i++)

139 if(
	`AT_SåCa£ÀssCmp
(
pName
,
g_pTNameLi°
[
i
].pName) == 0)

141  
TRUE
;

144  
FALSE
;

145 
	}
}

162 
uöt32
 
	$AT_CmdLöeSy¡axP¨£r
(
uöt8
* 
pCmdBuf
, 
uöt32
 
uCmdLí
, 
AT_PARSE_RESULT
 *
pP¨£Resu…
)

164 
uöt32
 
uResu…
;

165 
uöt32
 
uRë
 = 
ERR_SUCCESS
;

166 
uöt8
 
szName
[
AT_CMD_NAME_SIZE
 + 1] = {0,};

167 
uöt8
 
szP¨a
[
AT_CMD_PARA_SIZE
 + 1] = {0,};

168 
uöt8
 
uTy≥
 = 
AT_CMD_EXE
;

169 
uöt8
 
uSèã
 = 
ATP_STATE_INIT
;

170 
uöt8
 
uChA
 = 0;

171 
uöt32
 
i
 = 0;

172 
uöt8
 
uChT
 = 0;

173 
uöt8
 
uChP
 = 0;

175 
uöt8
* 
p
 = 
NULL
;

176 
AT_CMD_NODE
* 
pNodeH
 = 
NULL
;

177 
boﬁ
 
bLo›
 = 
TRUE
;

180 if(
NULL
 =
pCmdBuf
 ||

181 
NULL
 =
pP¨£Resu…
 ||

182 0 =
uCmdLí
 ||

183 
ATP_CMD_LINE_SIZE
 < 
uCmdLí
)

185  
_ERR_ATP_INVALID_PARA
;

189 
	`AT_Utû_TrimBack•a˚
(
pCmdBuf
, 0x08);

192 
p
 = 
pCmdBuf
;

193 
TRUE
 =
bLo›
)

195 if((
uöt32
)((
uöt8
*)
p
 - 
pCmdBuf
Ë> 
uCmdLí
)

197 
uRë
 = 
_ERR_ATP_WITHOUT_CR
;

201 
uSèã
)

203 
ATP_STATE_INIT
 :

204 if(
	`IS_CR
(*
p
))

206 
uSèã
 = 
ATP_STATE_CR_END
;

208 if(
	`AT_IS_SPACING
(*
p
))

210 
p
 ++;

212 if(
	`AT_IS_A
(*
p
))

214 
uChA
 = *
p
;

215 
uSèã
 = 
ATP_STATE_A
;

216 
p
 ++;

219 if(
	`AT_IS_PLUS
(*
p
))

221 
uChA
 = *
p
;

222 
uSèã
 = 
ATP_STATE_PLUS
;

223 
p
 ++;

228 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

229 
uSèã
 = 
ATP_STATE_FAIL_END
;

233 
ATP_STATE_PLUS
:

234 if(
	`AT_IS_PLUS
(*
p
))

236 
uChT
 = *
p
;

237 if(
	`AT_IS_2PLUS
(
uChA
,
uChT
))

239 
p
 ++;

240 
uSèã
 = 
ATP_STATE_2PLUS
;

244 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

245 
uSèã
 = 
ATP_STATE_FAIL_END
;

250 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

251 
uSèã
 = 
ATP_STATE_FAIL_END
;

254 
ATP_STATE_2PLUS
:

255 if(
	`AT_IS_PLUS
(*
p
))

257 
uChP
 = *
p
;

258 if(
	`AT_IS_3PLUS
(
uChA
,
uChT
,
uChP
))

260 
p
 ++;

261 
uSèã
 = 
ATP_STATE_3PLUS
;

265 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

266 
uSèã
 = 
ATP_STATE_FAIL_END
;

271 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

272 
uSèã
 = 
ATP_STATE_FAIL_END
;

275 
ATP_STATE_3PLUS
:

276 if(
	`IS_CR
(*
p
))

278 if(
NULL
 =
pNodeH
)

280 
uTy≥
 = 
AT_CMD_EXE
;

281 
	`AT_SåCpy
(
szName
,"+++");

282 
szP¨a
[0] = '\0';

283 
uResu…
 = 
	`AT_AddNodeToChaö
(
szName
,
szP¨a
,
uTy≥
,&
pNodeH
);

284 if(
ERR_SUCCESS
 =
uResu…
)

286 
uSèã
 = 
ATP_STATE_AT_OK
;

290 
uRë
 = 
_ERR_ATP_NO_MORE_MEMORY
;

291 
uSèã
 = 
ATP_STATE_FAIL_END
;

296 
uSèã
 = 
ATP_STATE_SUCC_END
;

302 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

303 
uSèã
 = 
ATP_STATE_FAIL_END
;

308 
ATP_STATE_A
 :

309 if(
	`AT_IS_T
(*
p
))

311 
uChT
 = *
p
;

312 if(
	`AT_IS_AT
(
uChA
,
uChT
))

314 
p
 ++;

315 
uSèã
 = 
ATP_STATE_T
;

319 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

320 
uSèã
 = 
ATP_STATE_FAIL_END
;

325 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

326 
uSèã
 = 
ATP_STATE_FAIL_END
;

329 
ATP_STATE_T
 :

331 
i
 = 0;

332 if(
	`IS_CR
(*
p
))

334 if(
NULL
 =
pNodeH
)

336 
uTy≥
 = 
AT_CMD_EXE
;

337 
	`AT_SåCpy
(
szName
,"AT");

338 
szP¨a
[0] = '\0';

339 
uResu…
 = 
	`AT_AddNodeToChaö
(
szName
,
szP¨a
,
uTy≥
,&
pNodeH
);

340 if(
ERR_SUCCESS
 =
uResu…
)

342 
uSèã
 = 
ATP_STATE_AT_OK
;

346 
uRë
 = 
_ERR_ATP_NO_MORE_MEMORY
;

347 
uSèã
 = 
ATP_STATE_FAIL_END
;

352 
uSèã
 = 
ATP_STATE_SUCC_END
;

356 if(
	`AT_IsTîmiCmd
(
szName
))

358 
uSèã
 = 
ATP_STATE_SPARE
;

360 if(
	`AT_IS_SPACING
(*
p
))

362 
p
 ++;

364 if(
	`AT_IS_D
(*
p
))

366 
szName
[
i
] = *
p
;

367 
i
 ++;

368 
p
 ++;

369 
uSèã
 = 
ATP_STATE_D
;

371 if(
	`AT_IS_B_PRIFIX
(*
p
))

373 
szName
[
i
] = *
p
;

374 
i
 ++;

375 
p
 ++;

376 
uSèã
 = 
ATP_STATE_BASE
;

378 if(
	`AT_IS_E_PRIFIX
(*
p
))

380 
szName
[
i
] = *
p
;

381 
i
 ++;

382 
p
 ++;

383 
uSèã
 = 
ATP_STATE_EXTENED
;

385 if(
	`AT_IS_LETTER
(*
p
))

387 
szName
[
i
] = *
p
;

388 
i
 ++;

389 
p
 ++;

390 
uSèã
 = 
ATP_STATE_B_NAME
;

394 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

395 
uSèã
 = 
ATP_STATE_FAIL_END
;

398 
ATP_STATE_D
 :

400 
szName
[
i
] = '\0';

403 
i
 = 0;

405 if(
	`AT_IS_SPACING
(*
p
))

407 
p
 ++;

409 if(
	`AT_IS_STAR
(*
p
))

411 
szP¨a
[
i
] = *
p
;

412 
i
++;

413 
p
++;

414 
uSèã
 = 
ATP_STATE_D_PARAM_STAR
;

416 if(
	`AT_IS_DIAL
(*
p
Ë|| 
	`AT_IS_COMMA
(*p))

418 
szP¨a
[
i
] = *
p
;

419 
i
 ++;

420 
p
 ++;

421 
uSèã
 = 
ATP_STATE_D_PARAM
;

423 if(
	`IS_CR
(*
p
))

425 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

426 
uSèã
 = 
ATP_STATE_FAIL_END
;

430 
p
++;

431 
uSèã
 = 
ATP_STATE_D_PARAM
;

434 
ATP_STATE_BASE
 :

435 if(
	`AT_IS_LETTER
(*
p
))

437 
szName
[
i
] = *
p
;

438 
i
 ++;

439 
p
 ++;

440 
uSèã
 = 
ATP_STATE_B_NAME
;

444 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

445 
uSèã
 = 
ATP_STATE_FAIL_END
;

448 
ATP_STATE_EXTENED
 :

449 if(
	`AT_IS_LETTER
(*
p
))

451 
szName
[
i
] = *
p
;

452 
i
 ++;

453 
p
 ++;

454 
uSèã
 = 
ATP_STATE_E_NAME
;

458 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

459 
uSèã
 = 
ATP_STATE_FAIL_END
;

462 
ATP_STATE_D_PARAM
 :

463 if(
	`AT_IS_SPACING
(*
p
))

465 
p
 ++;

467 if(
	`AT_IS_STAR
(*
p
))

469 
szP¨a
[
i
] = *
p
;

470 
i
++;

471 
p
++;

472 
uSèã
 = 
ATP_STATE_D_PARAM_STAR
;

474 if(
	`AT_IS_HASH
(*
p
))

476 if(0 =
i
)

478 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

479 
uSèã
 = 
ATP_STATE_FAIL_END
;

483 
szP¨a
[
i
] = *
p
;

484 
i
++;

485 
p
++;

486 
szP¨a
[
i
] = 0;

488 
uTy≥
 = 
AT_CMD_EXE
;

489 
uResu…
 = 
	`AT_AddNodeToChaö
(
szName
,
szP¨a
,
uTy≥
,&
pNodeH
);

490 if(
ERR_SUCCESS
 =
uResu…
)

492 
uSèã
 = 
ATP_STATE_SUCC_END
;

496 
uRë
 = 
_ERR_ATP_NO_MORE_MEMORY
;

497 
uSèã
 = 
ATP_STATE_FAIL_END
;

499 
uSèã
 = 
ATP_STATE_T
;

503 if(
	`AT_IS_DIAL
(*
p
Ë|| 
	`AT_IS_COMMA
(*p))

505 if(
i
 >
AT_CMD_PARA_SIZE
)

507 
uRë
 = 
_ERR_ATP_PARAM_TOO_LONG
;

508 
uSèã
 = 
ATP_STATE_FAIL_END
;

512 
szP¨a
[
i
] = *
p
;

513 
i
 ++;

514 
p
 ++;

516 if(
	`AT_IS_SEMICOLON
(*
p
Ë|| 
	`IS_CR
(*p))

519 if(0 =
i
)

521 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

522 
uSèã
 = 
ATP_STATE_FAIL_END
;

526 
szP¨a
[
i
] = '\0';

527 
p
 ++;

528 
uTy≥
 = 
AT_CMD_EXE
;

529 
uResu…
 = 
	`AT_AddNodeToChaö
(
szName
,
szP¨a
,
uTy≥
,&
pNodeH
);

530 if(
ERR_SUCCESS
 =
uResu…
)

532 
uSèã
 = 
ATP_STATE_SUCC_END
;

536 
uRë
 = 
_ERR_ATP_NO_MORE_MEMORY
;

537 
uSèã
 = 
ATP_STATE_FAIL_END
;

539 
uSèã
 = 
ATP_STATE_T
;

542 if(
	`IS_CR
(*
p
))

544 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

545 
uSèã
 = 
ATP_STATE_FAIL_END
;

549 
p
++;

552 
ATP_STATE_D_PARAM_STAR
:

553 if(
	`AT_IS_SEMICOLON
(*
p
))

556 if(0 =
i
)

558 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

559 
uSèã
 = 
ATP_STATE_FAIL_END
;

563 
szP¨a
[
i
] = '\0';

564 
p
 ++;

565 
uTy≥
 = 
AT_CMD_EXE
;

566 
uResu…
 = 
	`AT_AddNodeToChaö
(
szName
,
szP¨a
,
uTy≥
,&
pNodeH
);

567 if(
ERR_SUCCESS
 =
uResu…
)

569 
uSèã
 = 
ATP_STATE_SUCC_END
;

573 
uRë
 = 
_ERR_ATP_NO_MORE_MEMORY
;

574 
uSèã
 = 
ATP_STATE_FAIL_END
;

576 
uSèã
 = 
ATP_STATE_T
;

579 if(
	`IS_CR
(*
p
))

581 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

582 
uSèã
 = 
ATP_STATE_FAIL_END
;

584 if(
	`AT_IS_STAR
(*
p
))

586 
szP¨a
[
i
] = *
p
;

587 
i
++;

588 
p
++;

590 if(
	`AT_IS_DIAL
(*
p
Ë|| 
	`AT_IS_COMMA
(*p))

592 
szP¨a
[
i
] = *
p
;

593 
i
++;

594 
p
++;

595 
uSèã
 = 
ATP_STATE_D_PARAM
;

599 
p
++;

600 
uSèã
 = 
ATP_STATE_D_PARAM
;

603 
ATP_STATE_SPARE
 :

604 
uSèã
 = 
ATP_STATE_SUCC_END
;

606 
ATP_STATE_B_NAME
 :

607 
szName
[
i
] = 0;

608 if(
	`AT_IsBa£Cmd
(
szName
))

610 
uSèã
 = 
ATP_STATE_B_NAME_T
;

612 if(
	`AT_IS_NUM
(*
p
Ë|| 
	`AT_IS_LETTER
(*p))

614 if(
i
 >
AT_CMD_NAME_SIZE
)

616 
uRë
 = 
_ERR_ATP_NMAE_TOO_LONG
;

617 
uSèã
 = 
ATP_STATE_FAIL_END
;

620 
szName
[
i
] = *
p
;

621 
i
 ++;

622 
p
 ++;

626 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

627 
uSèã
 = 
ATP_STATE_FAIL_END
;

630 
ATP_STATE_B_NAME_T
 :

632 if(
	`AT_IS_SPACING
(*
p
))

634 
p
 ++;

636 if(
	`AT_IS_QUESTIONMARK
(*
p
))

638 
szName
[
i
] = '\0';

639 
i
 = 0;

640 
p
++;

641 
uSèã
 = 
ATP_STATE_B_READ
;

643 if(
	`AT_IS_DIGIT
(*
p
))

645 
i
 = 0;

646 
szP¨a
[
i
] = *
p
;

647 
i
 ++;

648 
p
 ++;

649 
uTy≥
 = 
AT_CMD_EXE
;

650 
uSèã
 = 
ATP_STATE_B_PARAM
;

652 if(
	`AT_IS_EQUITSIGN
(*
p
))

654 
p
++;

655 
uSèã
 = 
ATP_STATE_B_EQUAL
;

659 
szP¨a
[0] = '\0';

660 
i
 = 0;

661 
uTy≥
 = 
AT_CMD_EXE
;

662 
uResu…
 = 
	`AT_AddNodeToChaö
(
szName
,
szP¨a
,
uTy≥
,&
pNodeH
);

663 if(
ERR_SUCCESS
 =
uResu…
)

665 
uSèã
 = 
ATP_STATE_SUCC_END
;

669 
uRë
 = 
_ERR_ATP_NO_MORE_MEMORY
;

670 
uSèã
 = 
ATP_STATE_FAIL_END
;

673 if(
	`AT_IsTîmiCmd
(
szName
))

675 
uSèã
 = 
ATP_STATE_SPARE
;

677 if(
	`AT_IS_B_PRIFIX
(*
p
))

680 
szName
[
i
] = *
p
;

681 
i
++;

682 
p
++;

683 
uSèã
 = 
ATP_STATE_BASE
;

685 if(
	`AT_IS_D
(*
p
))

688 
szName
[
i
] = *
p
;

689 
i
++;

690 
p
++;

691 
uSèã
 = 
ATP_STATE_D
;

693 if(
	`AT_IS_E_PRIFIX
(*
p
))

696 
szName
[
i
] = *
p
;

697 
i
++;

698 
p
++;

699 
uSèã
 = 
ATP_STATE_EXTENED
;

701 if(
	`AT_IS_LETTER
(*
p
))

704 
szName
[
i
] = *
p
;

705 
i
++;

706 
p
++;

707 
uSèã
 = 
ATP_STATE_B_NAME
;

709 if(
	`AT_IS_SEMICOLON
(*
p
))

711 
p
++;

712 
uSèã
 = 
ATP_STATE_T
;

714 if(
	`IS_CR
(*
p
))

716 
uSèã
 = 
ATP_STATE_SUCC_END
;

720 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

721 
uSèã
 = 
ATP_STATE_FAIL_END
;

725 
ATP_STATE_B_PARAM
 :

726 if(
	`AT_IS_SPACING
(*
p
))

728 
p
++;

730 if(
	`AT_IS_NUM
(*
p
))

732 if(
i
 >
AT_CMD_PARA_SIZE
)

734 
uRë
 = 
_ERR_ATP_PARAM_TOO_LONG
;

735 
uSèã
 = 
ATP_STATE_FAIL_END
;

738 
szP¨a
[
i
] = *
p
;

739 
i
++;

740 
p
++;

744 
szP¨a
[
i
] = '\0';

745 
i
 = 0;

747 
uResu…
 = 
	`AT_AddNodeToChaö
(
szName
,
szP¨a
,
uTy≥
,&
pNodeH
);

748 if(
ERR_SUCCESS
 =
uResu…
)

750 
uSèã
 = 
ATP_STATE_SUCC_END
;

754 
uRë
 = 
_ERR_ATP_NO_MORE_MEMORY
;

755 
uSèã
 = 
ATP_STATE_FAIL_END
;

758 if(
	`AT_IsTîmiCmd
(
szName
))

760 
uSèã
 = 
ATP_STATE_SPARE
;

762 if(
	`AT_IS_B_PRIFIX
(*
p
))

764 
szName
[
i
] = *
p
;

765 
i
++;

766 
p
++;

767 
uSèã
 = 
ATP_STATE_BASE
;

769 if(
	`AT_IS_D
(*
p
))

771 
szName
[
i
] = *
p
;

772 
i
++;

773 
p
++;

774 
uSèã
 = 
ATP_STATE_D
;

776 if(
	`AT_IS_E_PRIFIX
(*
p
))

778 
szName
[
i
] = *
p
;

779 
i
++;

780 
p
++;

781 
uSèã
 = 
ATP_STATE_EXTENED
;

783 if(
	`AT_IS_LETTER
(*
p
))

785 
szName
[
i
] = *
p
;

786 
i
++;

787 
p
++;

788 
uSèã
 = 
ATP_STATE_B_NAME
;

790 if(
	`AT_IS_SEMICOLON
(*
p
))

792 
p
++;

793 
uSèã
 = 
ATP_STATE_T
;

795 if(
	`IS_CR
(*
p
))

797 
uSèã
 = 
ATP_STATE_SUCC_END
;

801 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

802 
uSèã
 = 
ATP_STATE_FAIL_END
;

806 
ATP_STATE_B_EQUAL
 :

807 if(
	`AT_IS_SPACING
(*
p
))

809 
p
++;

811 if(
	`AT_IS_QUESTIONMARK
(*
p
))

813 
szName
[
i
] = '\0';

814 
i
 = 0;

815 
p
++;

816 
uSèã
 = 
ATP_STATE_B_TEST
;

818 if(
	`AT_IS_NUM
(*
p
))

820 
i
 = 0;

821 
szP¨a
[
i
] = *
p
;

822 
i
 ++;

823 
p
 ++;

824 
uTy≥
 = 
AT_CMD_SET
;

825 
uSèã
 = 
ATP_STATE_B_PARAM
;

829 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

830 
uSèã
 = 
ATP_STATE_FAIL_END
;

833 
ATP_STATE_E_NAME
 :

834 if(
	`AT_IS_SPACING
(*
p
))

836 
p
++;

837 
uSèã
 = 
ATP_STATE_E_NAME_T
;

839 if(
	`AT_IS_NAME_CHARACTER
(*
p
Ë|| 
	`AT_IS_DIGIT
(*p))

841 if(
i
 >
AT_CMD_NAME_SIZE
)

843 
uRë
 = 
_ERR_ATP_NMAE_TOO_LONG
;

844 
uSèã
 = 
ATP_STATE_FAIL_END
;

847 
szName
[
i
] = *
p
;

848 
i
++;

849 
p
++;

851 if(
	`AT_IS_QUESTIONMARK
(*
p
))

853 
szName
[
i
] = '\0';

854 
p
++;

855 
uSèã
 = 
ATP_STATE_E_READ
;

857 if(
	`AT_IS_EQUITSIGN
(*
p
))

859 
szName
[
i
] = '\0';

860 
p
++;

861 
uSèã
 = 
ATP_STATE_E_EQUAL
;

863 if(
	`AT_IS_SEMICOLON
(*
p
))

865 
szName
[
i
] = '\0';

866 
szP¨a
[0] = '\0';

867 
uTy≥
 = 
AT_CMD_EXE
;

868 
uResu…
 = 
	`AT_AddNodeToChaö
(
szName
,
szP¨a
,
uTy≥
,&
pNodeH
);

869 if(
ERR_SUCCESS
 =
uResu…
)

871 
uSèã
 = 
ATP_STATE_T
;

875 
uRë
 = 
_ERR_ATP_NO_MORE_MEMORY
;

876 
uSèã
 = 
ATP_STATE_FAIL_END
;

878 
p
++;

879 
uSèã
 = 
ATP_STATE_T
;

881 if(
	`IS_CR
(*
p
))

883 
szName
[
i
] = '\0';

884 
szP¨a
[0] = '\0';

885 
uTy≥
 = 
AT_CMD_EXE
;

886 
uResu…
 = 
	`AT_AddNodeToChaö
(
szName
,
szP¨a
,
uTy≥
,&
pNodeH
);

887 if(
ERR_SUCCESS
 =
uResu…
)

889 
uSèã
 = 
ATP_STATE_SUCC_END
;

893 
uRë
 = 
_ERR_ATP_NO_MORE_MEMORY
;

894 
uSèã
 = 
ATP_STATE_FAIL_END
;

896 
p
++;

897 
uSèã
 = 
ATP_STATE_SUCC_END
;

901 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

902 
uSèã
 = 
ATP_STATE_FAIL_END
;

905 
ATP_STATE_E_NAME_T
 :

906 if(
	`AT_IS_SPACING
(*
p
))

908 
p
++;

910 if(
	`AT_IS_QUESTIONMARK
(*
p
))

912 
szName
[
i
] = '\0';

913 
p
++;

914 
uSèã
 = 
ATP_STATE_E_READ
;

916 if(
	`AT_IS_EQUITSIGN
(*
p
))

918 
szName
[
i
] = '\0';

919 
p
++;

920 
uSèã
 = 
ATP_STATE_E_EQUAL
;

922 if(
	`AT_IS_SEMICOLON
(*
p
))

924 
szName
[
i
] = '\0';

925 
szP¨a
[0] = '\0';

926 
uTy≥
 = 
AT_CMD_EXE
;

927 
uResu…
 = 
	`AT_AddNodeToChaö
(
szName
,
szP¨a
,
uTy≥
,&
pNodeH
);

928 if(
ERR_SUCCESS
 =
uResu…
)

930 
uSèã
 = 
ATP_STATE_T
;

934 
uRë
 = 
_ERR_ATP_NO_MORE_MEMORY
;

935 
uSèã
 = 
ATP_STATE_FAIL_END
;

937 
p
++;

938 
uSèã
 = 
ATP_STATE_T
;

940 if(
	`IS_CR
(*
p
))

942 
szName
[
i
] = '\0';

943 
szP¨a
[0] = '\0';

944 
uTy≥
 = 
AT_CMD_EXE
;

945 
uResu…
 = 
	`AT_AddNodeToChaö
(
szName
,
szP¨a
,
uTy≥
,&
pNodeH
);

946 if(
ERR_SUCCESS
 =
uResu…
)

948 
uSèã
 = 
ATP_STATE_SUCC_END
;

952 
uRë
 = 
_ERR_ATP_NO_MORE_MEMORY
;

953 
uSèã
 = 
ATP_STATE_FAIL_END
;

955 
p
++;

956 
uSèã
 = 
ATP_STATE_SUCC_END
;

960 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

961 
uSèã
 = 
ATP_STATE_FAIL_END
;

964 
ATP_STATE_E_READ
 :

965 if(
	`AT_IS_SEMICOLON
(*
p
))

967 
szP¨a
[0] = '\0';

968 
uTy≥
 = 
AT_CMD_READ
;

969 
uResu…
 = 
	`AT_AddNodeToChaö
(
szName
,
szP¨a
,
uTy≥
,&
pNodeH
);

970 if(
ERR_SUCCESS
 =
uResu…
)

972 
uSèã
 = 
ATP_STATE_T
;

976 
uRë
 = 
_ERR_ATP_NO_MORE_MEMORY
;

977 
uSèã
 = 
ATP_STATE_FAIL_END
;

979 
p
++;

980 
uSèã
 = 
ATP_STATE_T
;

982 if(
	`AT_IS_SPACING
(*
p
))

984 
p
++;

986 if(
	`IS_CR
(*
p
))

988 
szP¨a
[0] = '\0';

989 
uTy≥
 = 
AT_CMD_READ
;

990 
uResu…
 = 
	`AT_AddNodeToChaö
(
szName
,
szP¨a
,
uTy≥
,&
pNodeH
);

991 if(
ERR_SUCCESS
 =
uResu…
)

993 
uSèã
 = 
ATP_STATE_SUCC_END
;

997 
uRë
 = 
_ERR_ATP_NO_MORE_MEMORY
;

998 
uSèã
 = 
ATP_STATE_FAIL_END
;

1000 
p
++;

1001 
uSèã
 = 
ATP_STATE_SUCC_END
;

1005 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

1006 
uSèã
 = 
ATP_STATE_FAIL_END
;

1009 
ATP_STATE_E_EQUAL
 :

1010 
i
 = 0;

1011 if(
	`AT_IS_SPACING
(*
p
))

1013 
p
++;

1015 if(
	`AT_IS_COMMA
(*
p
))

1017 if(
i
 >
AT_CMD_PARA_SIZE
)

1019 
uRë
 = 
_ERR_ATP_PARAM_TOO_LONG
;

1020 
uSèã
 = 
ATP_STATE_FAIL_END
;

1023 
szP¨a
[
i
] = *
p
;

1024 
i
++;

1025 
p
++;

1026 
uSèã
 = 
ATP_STATE_E_NEXTP
;

1028 if(
	`AT_IS_DIAL
(*
p
))

1030 
szP¨a
[
i
] = *
p
;

1031 
i
++;

1032 
p
++;

1033 
uSèã
 = 
ATP_STATE_E_PARAM_NUM
;

1035 if(
	`AT_IS_QUESTIONMARK
(*
p
))

1037 
p
++;

1038 
uSèã
 = 
ATP_STATE_E_TEST
;

1040 if(
	`AT_IS_QUOTATIONMARK
(*
p
))

1042 
szP¨a
[
i
] = *
p
;

1043 
i
++;

1044 
p
++;

1045 
uSèã
 = 
ATP_STATE_E_PARAM_STR_BEGIN
;

1049 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

1050 
uSèã
 = 
ATP_STATE_FAIL_END
;

1053 
ATP_STATE_E_TEST
 :

1054 if(
	`AT_IS_SPACING
(*
p
))

1056 
p
++;

1058 if(
	`AT_IS_SEMICOLON
(*
p
))

1060 
szP¨a
[0] = '\0';

1061 
uTy≥
 = 
AT_CMD_TEST
;

1062 
uResu…
 = 
	`AT_AddNodeToChaö
(
szName
,
szP¨a
,
uTy≥
,&
pNodeH
);

1063 if(
ERR_SUCCESS
 =
uResu…
)

1065 
uSèã
 = 
ATP_STATE_T
;

1069 
uRë
 = 
_ERR_ATP_NO_MORE_MEMORY
;

1070 
uSèã
 = 
ATP_STATE_FAIL_END
;

1072 
p
++;

1073 
uSèã
 = 
ATP_STATE_T
;

1075 if(
	`IS_CR
(*
p
))

1077 
szP¨a
[0] = '\0';

1078 
uTy≥
 = 
AT_CMD_TEST
;

1079 
uResu…
 = 
	`AT_AddNodeToChaö
(
szName
,
szP¨a
,
uTy≥
,&
pNodeH
);

1080 if(
ERR_SUCCESS
 =
uResu…
)

1082 
uSèã
 = 
ATP_STATE_SUCC_END
;

1086 
uRë
 = 
_ERR_ATP_NO_MORE_MEMORY
;

1087 
uSèã
 = 
ATP_STATE_FAIL_END
;

1089 
p
++;

1090 
uSèã
 = 
ATP_STATE_SUCC_END
;

1094 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

1095 
uSèã
 = 
ATP_STATE_FAIL_END
;

1098 
ATP_STATE_E_PARAM_NUM
 :

1099 if(
	`AT_IS_SPACING
(*
p
))

1101 
p
++;

1102 
uSèã
 = 
ATP_STATE_E_PARAM_NUM_T
;

1104 if(
	`AT_IS_DIAL
(*
p
))

1106 if(
i
 >
AT_CMD_PARA_SIZE
)

1108 
uRë
 = 
_ERR_ATP_PARAM_TOO_LONG
;

1109 
uSèã
 = 
ATP_STATE_FAIL_END
;

1112 
szP¨a
[
i
] = *
p
;

1113 
i
++;

1114 
p
++;

1116 if(
	`AT_IS_SEMICOLON
(*
p
))

1118 
szP¨a
[
i
] = '\0';

1119 
uTy≥
 = 
AT_CMD_SET
;

1120 
uResu…
 = 
	`AT_AddNodeToChaö
(
szName
,
szP¨a
,
uTy≥
,&
pNodeH
);

1121 if(
ERR_SUCCESS
 =
uResu…
)

1123 
uSèã
 = 
ATP_STATE_T
;

1127 
uRë
 = 
_ERR_ATP_NO_MORE_MEMORY
;

1128 
uSèã
 = 
ATP_STATE_FAIL_END
;

1130 
p
++;

1131 
uSèã
 = 
ATP_STATE_T
;

1133 if(
	`AT_IS_COMMA
(*
p
))

1135 if(
i
 >
AT_CMD_PARA_SIZE
)

1137 
uRë
 = 
_ERR_ATP_PARAM_TOO_LONG
;

1138 
uSèã
 = 
ATP_STATE_FAIL_END
;

1141 
szP¨a
[
i
] = *
p
;

1142 
i
++;

1143 
p
++;

1144 
uSèã
 = 
ATP_STATE_E_NEXTP
;

1146 if(
	`IS_CR
(*
p
))

1148 
szP¨a
[
i
] = '\0';

1149 
uTy≥
 = 
AT_CMD_SET
;

1150 
uResu…
 = 
	`AT_AddNodeToChaö
(
szName
,
szP¨a
,
uTy≥
,&
pNodeH
);

1151 if(
ERR_SUCCESS
 =
uResu…
)

1153 
uSèã
 = 
ATP_STATE_SUCC_END
;

1157 
uRë
 = 
_ERR_ATP_NO_MORE_MEMORY
;

1158 
uSèã
 = 
ATP_STATE_FAIL_END
;

1160 
uSèã
 = 
ATP_STATE_SUCC_END
;

1164 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

1165 
uSèã
 = 
ATP_STATE_FAIL_END
;

1168 
ATP_STATE_E_PARAM_NUM_T
 :

1169 if(
	`AT_IS_SPACING
(*
p
))

1171 
p
++;

1173 if(
	`AT_IS_SEMICOLON
(*
p
))

1175 
szP¨a
[
i
] = '\0';

1176 
uTy≥
 = 
AT_CMD_SET
;

1177 
uResu…
 = 
	`AT_AddNodeToChaö
(
szName
,
szP¨a
,
uTy≥
,&
pNodeH
);

1178 if(
ERR_SUCCESS
 =
uResu…
)

1180 
uSèã
 = 
ATP_STATE_T
;

1184 
uRë
 = 
_ERR_ATP_NO_MORE_MEMORY
;

1185 
uSèã
 = 
ATP_STATE_FAIL_END
;

1187 
p
++;

1188 
uSèã
 = 
ATP_STATE_T
;

1190 if(
	`AT_IS_COMMA
(*
p
))

1192 if(
i
 >
AT_CMD_PARA_SIZE
)

1194 
uRë
 = 
_ERR_ATP_PARAM_TOO_LONG
;

1195 
uSèã
 = 
ATP_STATE_FAIL_END
;

1198 
szP¨a
[
i
] = *
p
;

1199 
i
++;

1200 
p
++;

1201 
uSèã
 = 
ATP_STATE_E_NEXTP
;

1203 if(
	`IS_CR
(*
p
))

1205 
szP¨a
[
i
] = '\0';

1206 
uTy≥
 = 
AT_CMD_SET
;

1207 
uResu…
 = 
	`AT_AddNodeToChaö
(
szName
,
szP¨a
,
uTy≥
,&
pNodeH
);

1208 if(
ERR_SUCCESS
 =
uResu…
)

1210 
uSèã
 = 
ATP_STATE_SUCC_END
;

1214 
uRë
 = 
_ERR_ATP_NO_MORE_MEMORY
;

1215 
uSèã
 = 
ATP_STATE_FAIL_END
;

1217 
uSèã
 = 
ATP_STATE_SUCC_END
;

1221 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

1222 
uSèã
 = 
ATP_STATE_FAIL_END
;

1225 
ATP_STATE_E_NEXTP
 :

1226 if(
	`AT_IS_SPACING
(*
p
))

1228 
p
++;

1230 if(
	`AT_IS_DIAL
(*
p
))

1232 if(
i
 >
AT_CMD_PARA_SIZE
)

1234 
uRë
 = 
_ERR_ATP_PARAM_TOO_LONG
;

1235 
uSèã
 = 
ATP_STATE_FAIL_END
;

1238 
szP¨a
[
i
] = *
p
;

1239 
i
++;

1240 
p
++;

1241 
uSèã
 = 
ATP_STATE_E_PARAM_NUM
;

1243 if(
	`AT_IS_COMMA
(*
p
))

1245 if(
i
 >
AT_CMD_PARA_SIZE
)

1247 
uRë
 = 
_ERR_ATP_PARAM_TOO_LONG
;

1248 
uSèã
 = 
ATP_STATE_FAIL_END
;

1251 
szP¨a
[
i
] = *
p
;

1252 
i
++;

1253 
p
++;

1255 if(
	`AT_IS_QUOTATIONMARK
(*
p
))

1257 if(
i
 >
AT_CMD_PARA_SIZE
)

1259 
uRë
 = 
_ERR_ATP_PARAM_TOO_LONG
;

1260 
uSèã
 = 
ATP_STATE_FAIL_END
;

1263 
szP¨a
[
i
] = *
p
;

1264 
i
++;

1265 
p
++;

1266 
uSèã
 = 
ATP_STATE_E_PARAM_STR_BEGIN
;

1268 if(
	`AT_IS_SEMICOLON
(*
p
))

1270 
szP¨a
[
i
] = '\0';

1271 
uTy≥
 = 
AT_CMD_SET
;

1272 
uResu…
 = 
	`AT_AddNodeToChaö
(
szName
,
szP¨a
,
uTy≥
,&
pNodeH
);

1273 if(
ERR_SUCCESS
 =
uResu…
)

1275 
uSèã
 = 
ATP_STATE_T
;

1279 
uRë
 = 
_ERR_ATP_NO_MORE_MEMORY
;

1280 
uSèã
 = 
ATP_STATE_FAIL_END
;

1282 
p
++;

1283 
uSèã
 = 
ATP_STATE_T
;

1285 if(
	`IS_CR
(*
p
))

1287 
szP¨a
[
i
] = '\0';

1288 
uTy≥
 = 
AT_CMD_SET
;

1289 
uResu…
 = 
	`AT_AddNodeToChaö
(
szName
,
szP¨a
,
uTy≥
,&
pNodeH
);

1290 if(
ERR_SUCCESS
 =
uResu…
)

1292 
uSèã
 = 
ATP_STATE_SUCC_END
;

1296 
uRë
 = 
_ERR_ATP_NO_MORE_MEMORY
;

1297 
uSèã
 = 
ATP_STATE_FAIL_END
;

1299 
uSèã
 = 
ATP_STATE_SUCC_END
;

1303 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

1304 
uSèã
 = 
ATP_STATE_FAIL_END
;

1307 
ATP_STATE_E_PARAM_STR_BEGIN
:

1308 if(
	`AT_IS_QUOTATIONMARK
(*
p
))

1310 if(
i
 >
AT_CMD_PARA_SIZE
)

1312 
uRë
 = 
_ERR_ATP_PARAM_TOO_LONG
;

1313 
uSèã
 = 
ATP_STATE_FAIL_END
;

1316 
szP¨a
[
i
] = *
p
;

1317 
i
++;

1318 
p
++;

1319 
uSèã
 = 
ATP_STATE_E_PARAM_STR_END
;

1321 if(
	`AT_IS_TRANSMEAN
(*
p
))

1323 
p
++;

1324 
uSèã
 = 
ATP_STATE_E_PARAM_STR_TM
;

1328 if(
i
 >
AT_CMD_PARA_SIZE
)

1330 
uRë
 = 
_ERR_ATP_PARAM_TOO_LONG
;

1331 
uSèã
 = 
ATP_STATE_FAIL_END
;

1334 
szP¨a
[
i
] = *
p
;

1335 
i
++;

1336 
p
++;

1341 
ATP_STATE_E_PARAM_STR_TM
 :

1342 if(
i
 >
AT_CMD_PARA_SIZE
)

1344 
uRë
 = 
_ERR_ATP_PARAM_TOO_LONG
;

1345 
uSèã
 = 
ATP_STATE_FAIL_END
;

1348 
szP¨a
[
i
] = *
p
;

1349 
i
++;

1350 
p
++;

1351 
uSèã
 = 
ATP_STATE_E_PARAM_STR_BEGIN
;

1353 
ATP_STATE_E_PARAM_STR_END
 :

1354 if(
	`AT_IS_SPACING
(*
p
))

1366 
p
++;

1368 if(
	`AT_IS_SEMICOLON
(*
p
))

1370 
szP¨a
[
i
] = '\0';

1371 
uTy≥
 = 
AT_CMD_SET
;

1372 
uResu…
 = 
	`AT_AddNodeToChaö
(
szName
,
szP¨a
,
uTy≥
,&
pNodeH
);

1373 if(
ERR_SUCCESS
 =
uResu…
)

1375 
uSèã
 = 
ATP_STATE_T
;

1379 
uRë
 = 
_ERR_ATP_NO_MORE_MEMORY
;

1380 
uSèã
 = 
ATP_STATE_FAIL_END
;

1382 
p
++;

1383 
uSèã
 = 
ATP_STATE_T
;

1385 if(
	`AT_IS_COMMA
(*
p
))

1387 if(
i
 >
AT_CMD_PARA_SIZE
)

1389 
uRë
 = 
_ERR_ATP_PARAM_TOO_LONG
;

1390 
uSèã
 = 
ATP_STATE_FAIL_END
;

1393 
szP¨a
[
i
] = *
p
;

1394 
i
++;

1395 
p
++;

1396 
uSèã
 = 
ATP_STATE_E_NEXTP
;

1398 if(
	`IS_CR
(*
p
))

1400 
szP¨a
[
i
] = '\0';

1401 
uTy≥
 = 
AT_CMD_SET
;

1402 
uResu…
 = 
	`AT_AddNodeToChaö
(
szName
,
szP¨a
,
uTy≥
,&
pNodeH
);

1403 if(
ERR_SUCCESS
 =
uResu…
)

1405 
uSèã
 = 
ATP_STATE_SUCC_END
;

1409 
uRë
 = 
_ERR_ATP_NO_MORE_MEMORY
;

1410 
uSèã
 = 
ATP_STATE_FAIL_END
;

1412 
uSèã
 = 
ATP_STATE_SUCC_END
;

1428 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

1429 
uSèã
 = 
ATP_STATE_FAIL_END
;

1432 
ATP_STATE_B_READ
:

1433 if(
	`AT_IS_SPACING
(*
p
))

1435 
p
++;

1439 
szP¨a
[0] = '\0';

1440 
uTy≥
 = 
AT_CMD_READ
;

1441 
uResu…
 = 
	`AT_AddNodeToChaö
(
szName
,
szP¨a
,
uTy≥
,&
pNodeH
);

1442 if(
ERR_SUCCESS
 =
uResu…
)

1444 
uSèã
 = 
ATP_STATE_T
;

1448 
uRë
 = 
_ERR_ATP_NO_MORE_MEMORY
;

1449 
uSèã
 = 
ATP_STATE_FAIL_END
;

1452 if(
	`AT_IS_B_PRIFIX
(*
p
))

1454 
szName
[
i
] = *
p
;

1455 
i
++;

1456 
p
++;

1457 
uSèã
 = 
ATP_STATE_BASE
;

1459 if(
	`AT_IS_D
(*
p
))

1461 
szName
[
i
] = *
p
;

1462 
i
++;

1463 
p
++;

1464 
uSèã
 = 
ATP_STATE_D
;

1466 if(
	`AT_IS_E_PRIFIX
(*
p
))

1468 
szName
[
i
] = *
p
;

1469 
i
++;

1470 
p
++;

1471 
uSèã
 = 
ATP_STATE_EXTENED
;

1473 if(
	`AT_IS_LETTER
(*
p
))

1475 
szName
[
i
] = *
p
;

1476 
i
++;

1477 
p
++;

1478 
uSèã
 = 
ATP_STATE_B_NAME
;

1480 if(
	`AT_IS_SEMICOLON
(*
p
))

1482 
p
++;

1483 
uSèã
 = 
ATP_STATE_T
;

1485 if(
	`IS_CR
(*
p
))

1487 
uSèã
 = 
ATP_STATE_SUCC_END
;

1491 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

1492 
uSèã
 = 
ATP_STATE_FAIL_END
;

1496 
ATP_STATE_B_TEST
:

1497 if(
	`AT_IS_SPACING
(*
p
))

1499 
p
++;

1503 
szP¨a
[0] = '\0';

1504 
uTy≥
 = 
AT_CMD_TEST
;

1505 
uResu…
 = 
	`AT_AddNodeToChaö
(
szName
,
szP¨a
,
uTy≥
,&
pNodeH
);

1506 if(
ERR_SUCCESS
 =
uResu…
)

1508 
uSèã
 = 
ATP_STATE_T
;

1512 
uRë
 = 
_ERR_ATP_NO_MORE_MEMORY
;

1513 
uSèã
 = 
ATP_STATE_FAIL_END
;

1516 if(
	`AT_IS_B_PRIFIX
(*
p
))

1518 
szName
[
i
] = *
p
;

1519 
i
++;

1520 
p
++;

1521 
uSèã
 = 
ATP_STATE_BASE
;

1523 if(
	`AT_IS_D
(*
p
))

1525 
szName
[
i
] = *
p
;

1526 
i
++;

1527 
p
++;

1528 
uSèã
 = 
ATP_STATE_D
;

1530 if(
	`AT_IS_E_PRIFIX
(*
p
))

1532 
szName
[
i
] = *
p
;

1533 
i
++;

1534 
p
++;

1535 
uSèã
 = 
ATP_STATE_EXTENED
;

1537 if(
	`AT_IS_LETTER
(*
p
))

1539 
szName
[
i
] = *
p
;

1540 
i
++;

1541 
p
++;

1542 
uSèã
 = 
ATP_STATE_B_NAME
;

1544 if(
	`AT_IS_SEMICOLON
(*
p
))

1546 
p
++;

1547 
uSèã
 = 
ATP_STATE_T
;

1549 if(
	`IS_CR
(*
p
))

1551 
uSèã
 = 
ATP_STATE_SUCC_END
;

1555 
uRë
 = 
_ERR_ATP_SYNTAX_ERROR
;

1556 
uSèã
 = 
ATP_STATE_FAIL_END
;

1560 
ATP_STATE_SUCC_END
 :

1561 
bLo›
 = 
FALSE
;

1563 
ATP_STATE_FAIL_END
 :

1564 
bLo›
 = 
FALSE
;

1566 
ATP_STATE_AT_OK
 :

1567 
bLo›
 = 
FALSE
;

1569 
ATP_STATE_CR_END
 :

1570 
bLo›
 = 
FALSE
;

1573 
bLo›
 = 
FALSE
;

1579 if(
ERR_SUCCESS
 =
uRë
)

1581 
pP¨£Resu…
->
pNodeHód
 = 
pNodeH
;

1582 
pP¨£Resu…
->
uNodeCou¡
 = 
	`AT_GëNodeCou¡
’P¨£Resu…->
pNodeHód
);

1587 
	`AT_CÀ¨Node
(
pNodeH
);

1589  
uRë
;

1590 
	}
}

1608 
uöt32
 
	$AT_AddNode
(
uöt8
* 
pName
, uöt8* 
pP¨am
, uöt8 
uTy≥
, 
AT_CMD_NODE
* 
pNodeChaö
)

1610 
uöt32
 
uRë
 = 
ERR_SUCCESS
;

1611 
AT_CMD_NODE
* 
pNode
 = 
NULL
;

1612 
boﬁ
 
bChót
 = 
TRUE
;

1615 if(
NULL
 =
pName
 ||

1616 
NULL
 =
pP¨am
 ||

1617 
NULL
 =
pNodeChaö
)

1619  
_ERR_ATP_INVALID_PARA
;

1622 if(
AT_CMD_SET
 !
uTy≥
 &&

1623 
AT_CMD_TEST
 !
uTy≥
 &&

1624 
AT_CMD_READ
 !
uTy≥
 &&

1625 
AT_CMD_EXE
 !
uTy≥
)

1627  
_ERR_ATP_INVALID_PARA
;

1631 
pNode
 = 
pNodeChaö
;

1634 if(
NULL
 !
pNode
->
pNext
)

1636 
pNode
 =ÖNode->
pNext
;

1642 }
TRUE
 =
bChót
);

1645 
pNode
->
pNext
 = 
	`AT_Cª©eNode
(
pName
,
pP¨am
,
uTy≥
);

1646 if(
NULL
 !
pNode
->
pNext
)

1648 
uRë
 = 
ERR_SUCCESS
;

1652 
uRë
 = 
_ERR_ATP_NO_MORE_MEMORY
;

1655  
uRë
;

1657 
	}
}

1672 
AT_CMD_NODE
* 
	$AT_Cª©eNode
(
uöt8
* 
pName
, uöt8* 
pP¨am
, uöt8 
uTy≥
)

1674 
AT_CMD_NODE
* 
pNode
 = 
NULL
;

1677 if(
NULL
 =
pName
 ||

1678 
NULL
 =
pP¨am
)

1680  
NULL
;

1683 if(
AT_CMD_SET
 !
uTy≥
 &&

1684 
AT_CMD_TEST
 !
uTy≥
 &&

1685 
AT_CMD_READ
 !
uTy≥
 &&

1686 
AT_CMD_EXE
 !
uTy≥
)

1689  
NULL
;

1693 
pNode
 = 
	`AT_MALLOC
(
	`SIZEOF
(
AT_CMD_NODE
));

1694 if(
NULL
 !
pNode
)

1696 
	`AT_SåCpy
(
pNode
->
szName
,
pName
);

1697 
	`AT_SåCpy
(
pNode
->
szP¨am
,
pP¨am
);

1698 
pNode
->
uTy≥
 = uType;

1699 
pNode
->
pNext
 = 
NULL
;

1706  
pNode
;

1708 
	}
}

1719 
uöt32
 
	$AT_CÀ¨Node
(
AT_CMD_NODE
* 
pNodeChaö
)

1721 
AT_CMD_NODE
* 
pNodeN
 = 
NULL
;

1723 
pNodeN
 = 
pNodeChaö
;

1724 
NULL
 !
pNodeN
)

1726 
pNodeChaö
 = 
pNodeN
->
pNext
;

1727 
	`AT_FREE
(
pNodeN
);

1728 
pNodeN
 = 
pNodeChaö
;

1730  
ERR_SUCCESS
;

1731 
	}
}

1748 
uöt32
 
	$AT_AddNodeToChaö
(
uöt8
* 
pName
, uöt8* 
pP¨am
, uöt8 
uTy≥
, 
AT_CMD_NODE
** 
µHódî
)

1750 
uöt32
 
iResu…
;

1752 if(
NULL
 !
pName
)

1754 
	`AT_SåU¥
(
pName
);

1756 if(
NULL
 =*
µHódî
)

1758 *
µHódî
 = 
	`AT_Cª©eNode
(
pName
,
pP¨am
,
uTy≥
);

1759 if(
NULL
 =*
µHódî
)

1761  
_ERR_ATP_NO_MORE_MEMORY
;

1765  
_ERR_ATP_SUCCESS
;

1770 
iResu…
 = 
	`AT_AddNode
(
pName
,
pP¨am
,
uTy≥
,*
µHódî
);

1771 if(
ERR_SUCCESS
 =
iResu…
)

1773  
_ERR_ATP_SUCCESS
;

1777  
_ERR_ATP_NO_MORE_MEMORY
;

1780 
	}
}

1790 
uöt32
 
	$AT_GëNodeCou¡
(
AT_CMD_NODE
* 
pNodeChaö
)

1792 
uöt32
 
uCou¡
 = 0;

1794 
NULL
 !
pNodeChaö
)

1796 
pNodeChaö
 =ÖNodeChaö->
pNext
;

1797 
uCou¡
 ++;

1799  
uCou¡
;

1800 
	}
}

	@D:\Projects\modem2.5g\branches\l4\navi\baseband\l4\at\engine\src\at_sa.c

13 
	~"©.h
"

14 
	~"©_cmd_gc.h
"

15 
	~"©_moduÀ.h
"

16 
	~"©_ß.h
"

17 
	~"©_u¨t.h
"

18 
	~"©_mux.h
"

23 
	#FSM_STATUS_MASK_POWER_DOWN
 0x00000001

	)

24 
	#FSM_STATUS_MASK_NORMAL
 0x00000002

	)

25 
	#FSM_STATUS_MASK_CHGR_NORMAL
 0x00000004

	)

26 
	#FSM_STATUS_MASK_CHGR_ONLY
 0x00000008

	)

27 
	#FSM_STATUS_MASK_ALARM_NORMAL
 0x00000010

	)

28 
	#FSM_STATUS_MASK_ALARM_ONLY
 0x00000020

	)

29 
	#FSM_STATUS_MASK_SLEEP
 0x00000040

	)

31 
	#PROC_MODE_MASK_COMMAND
 0x00000001

	)

32 
	#PROC_MODE_MASK_ONLINE_CMD
 0x00000002

	)

34 
	#PROC_MODE_MASK_CS
 0x00000004

	)

35 
	#PROC_MODE_MASK_PS
 0x00000008

	)

42 
	e_ß_fsm_°©e_t


44 
	mSA_FSM_STATE_POWER_DOWN
,

45 
	mSA_FSM_STATE_NORMAL
,

46 
	mSA_FSM_STATE_CHGR_NORMAL
,

47 
	mSA_FSM_STATE_CHGR_ONLY
,

48 
	mSA_FSM_STATE_ALARM_NORMAL
,

49 
	mSA_FSM_STATE_ALARM_ONLY
,

50 
	mSA_FSM_STATE_SLEEP
,

51 
	mSA_FSM_STATE_COUNT_
,

52 
	mSA_FSM_STATE_INVALID_
,

53 } 
	tß_fsm_°©e_t
;

60 
	e¥oc_mode_hi°‹y_t
 {

61 
	mPROC_INVALID_STATE
,

62 
	mPROC_CMD_MODE_STATE
,

63 
	mPROC_ONLINE_CMD_STATE
,

64 
	mPROC_GPRS_STATE
,

65 
	mPROC_KEEP_CURRENT_STATE
,

66 } 
	tPROC_MODE_HISTORY_T
;

68 
	s_ß_öfo_t


70 
uöt32
 
	mpowî_⁄_mode
;

71 
uöt32
 
	m©cmd_smso_ªsu…
;

72 
uöt32
 
	m©cmd_cfun_ªsu…
;

73 
uöt32
 
	m©cmd_©o_ªsu…
;

74 
uöt32
 
	m©cmd_3∂us_ªsu…
;

75 
uöt32
 
	m©cmd_©h_ªsu…
;

76 
uöt32
 
	m©cmd_©a_ªsu…
;

77 
uöt32
 
	m©cmd_©d_ªsu…
;

78 
uöt32
 
	m©cmd_cgd©a_ªsu…
;

79 
uöt32
 
	möô_°©us
;

80 
uöt32
 
	msim_°©us
;

81 
uöt32
 
	m©s_öô_°©us
;

82 
uöt32
 
	mnw_ªg_°©us
;

83 
ß_fsm_°©e_t
 
	mfsm_°©
;

84 
ß_¥oc_mode_t
 
	m¥oc_mode
;

85 
uöt32
 
	mhas_node_ö_cmdli°
;

86 
PROC_MODE_HISTORY_T
 
	m¥oc_mode_hi°‹y
;

87 } 
	tß_öfo_t
;

93 
ß_öfo_t
 
	gg_SaInfo
 = {0};

94 
ß_öfo_t
 
	gg_SaInfoMux
[
MAX_DLC_NUM
] = { {0}, };

96 
AT_ModuÀInfo
 
g_AtModuÀ
;

107 
AT_D©aModePPPPro˚ss
(
COS_EVENT
 *);

108 
AT_D©aModeTCPIPPro˚ss
(
COS_EVENT
 *);

109 
AT_D©aModeWAPPro˚ss
(
COS_EVENT
 *);

117 
boﬁ
 
	$SA_InôFsm
()

119 
	`mem£t
(&
g_SaInfo
, 0, (g_SaInfo));

120 
g_SaInfo
.
fsm_°©
 = 
SA_FSM_STATE_NORMAL
;

121 
g_SaInfo
.
¥oc_mode
 = 
SA_PROC_MODE_COMMAND
;

122  
TRUE
;

123 
	}
}

125 
boﬁ
 
	$SA_InôFsmMux
()

127 
uöt8
 
i
 = 0;

129 
i
 < 
MAX_DLC_NUM
)

131 
	`mem£t
(&
g_SaInfoMux
[
i
], 0, (g_SaInfoMux[i]));

132 
g_SaInfoMux
[
i
].
fsm_°©
 = 
SA_FSM_STATE_NORMAL
;

133 
g_SaInfoMux
[
i
].
¥oc_mode
 = 
SA_PROC_MODE_COMMAND
;

134 
i
++;

136  
TRUE
;

137 
	}
}

138 
boﬁ
 
	$SA_SëSysSètusMux
(
SA_STAT_CLASS
 
°©_˛ass
, 
uöt32
 
°©_mask
, 
uöt8
 
nDLCI
)

150 
°©_˛ass
)

153 
AT_EVENT
:

155 
°©_mask
)

158 
EV_CFW_CC_RELEASE_CALL_IND
:

162 
EV_CFW_CC_RELEASE_CALL_RSP
:

164 i‡((
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 =
SA_PROC_MODE_ONLINE_CMD
)

165 && (
g_SaInfoMux
[
nDLCI
].
¥oc_mode_hi°‹y
 =
PROC_INVALID_STATE
))

168 
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 = 
SA_PROC_MODE_ONLINE_CMD
;

172 i‡((
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 =
SA_PROC_MODE_ONLINE_CMD
)

173 && (
g_SaInfoMux
[
nDLCI
].
¥oc_mode_hi°‹y
 =
PROC_GPRS_STATE
))

175 
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 = 
SA_PROC_MODE_PS
;

176 
g_SaInfoMux
[
nDLCI
].
¥oc_mode_hi°‹y
 = 
PROC_INVALID_STATE
;

177 
	`u¨t_Re›í
(
ds_high
);

179 i‡((
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 =
SA_PROC_MODE_ONLINE_CMD
)

180 && (
g_SaInfoMux
[
nDLCI
].
¥oc_mode_hi°‹y
 =
PROC_KEEP_CURRENT_STATE
))

182 
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 = 
SA_PROC_MODE_ONLINE_CMD
;

183 
g_SaInfoMux
[
nDLCI
].
¥oc_mode_hi°‹y
 = 
PROC_INVALID_STATE
;

185 i‡((
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 =
SA_PROC_MODE_CS
)

186 && (
g_SaInfoMux
[
nDLCI
].
¥oc_mode_hi°‹y
 =
PROC_CMD_MODE_STATE
))

189 
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 = 
SA_PROC_MODE_COMMAND
;

190 
g_SaInfoMux
[
nDLCI
].
¥oc_mode_hi°‹y
 = 
PROC_INVALID_STATE
;

192 i‡((
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 =
SA_PROC_MODE_CS
)

193 && (
g_SaInfoMux
[
nDLCI
].
¥oc_mode_hi°‹y
 =
PROC_ONLINE_CMD_STATE
))

195 
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 = 
SA_PROC_MODE_ONLINE_CMD
;

196 
g_SaInfoMux
[
nDLCI
].
¥oc_mode_hi°‹y
 = 
PROC_INVALID_STATE
;

198 i‡((
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 =
SA_PROC_MODE_CS
)

199 && (
g_SaInfoMux
[
nDLCI
].
¥oc_mode_hi°‹y
 =
PROC_GPRS_STATE
))

202 
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 = 
SA_PROC_MODE_PS
;

203 
g_SaInfoMux
[
nDLCI
].
¥oc_mode_hi°‹y
 = 
PROC_INVALID_STATE
;

204 
	`u¨t_Re›í
(
ds_high
);

213 
EV_CFW_CC_SPEECH_CALL_IND
:

215 i‡(
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 =
SA_PROC_MODE_PS
)

217 
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 = 
SA_PROC_MODE_ONLINE_CMD
;

218 
g_SaInfoMux
[
nDLCI
].
¥oc_mode_hi°‹y
 = 
PROC_GPRS_STATE
;

219 
	`u¨t_Re›í
(
ds_low
);

221 i‡((
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 =
SA_PROC_MODE_ONLINE_CMD
Ë&& (g_SaInfoMux[nDLCI].
¥oc_mode_hi°‹y
 =
PROC_INVALID_STATE
))

223 
g_SaInfoMux
[
nDLCI
].
¥oc_mode_hi°‹y
 = 
PROC_KEEP_CURRENT_STATE
;

234 
EV_CFW_CC_ACCEPT_SPEECH_CALL_RSP
:

236 
EV_CFW_CC_INITIATE_SPEECH_CALL_RSP
:

238 i‡((
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 =
SA_PROC_MODE_ONLINE_CMD
Ë&& (g_SaInfoMux[nDLCI].
¥oc_mode_hi°‹y
 =
PROC_GPRS_STATE
))

241 
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 = 
SA_PROC_MODE_CS
;

243 i‡(((
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 =
SA_PROC_MODE_ONLINE_CMD
Ë&& (g_SaInfoMux[nDLCI].
¥oc_mode_hi°‹y
 =
PROC_INVALID_STATE
))

244 || ((
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 =
SA_PROC_MODE_ONLINE_CMD
)

245 && (
g_SaInfoMux
[
nDLCI
].
¥oc_mode_hi°‹y
 =
PROC_KEEP_CURRENT_STATE
)))

247 
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 = 
SA_PROC_MODE_CS
;

248 
g_SaInfoMux
[
nDLCI
].
¥oc_mode_hi°‹y
 = 
PROC_ONLINE_CMD_STATE
;

250 i‡((
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 =
SA_PROC_MODE_COMMAND
)

251 && (
g_SaInfoMux
[
nDLCI
].
¥oc_mode_hi°‹y
 =
PROC_INVALID_STATE
))

253 
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 = 
SA_PROC_MODE_CS
;

254 
g_SaInfoMux
[
nDLCI
].
¥oc_mode_hi°‹y
 = 
PROC_CMD_MODE_STATE
;

265 
g_SaInfoMux
[
nDLCI
].
¥oc_mode_hi°‹y
 = 
PROC_INVALID_STATE
;

271 
SA_POWER_ON_MODE
:

272 
g_SaInfoMux
[
nDLCI
].
powî_⁄_mode
 &= 0xFFFFFFF0;

273 
g_SaInfoMux
[
nDLCI
].
powî_⁄_mode
 |
°©_mask
;

275 
g_SaInfoMux
[
nDLCI
].
powî_⁄_mode
)

278 
SA_POWRN_ON_CAUSE_KEY
:

280 i‡(
g_SaInfoMux
[
nDLCI
].
fsm_°©
 !
SA_FSM_STATE_NORMAL
)

283 
g_SaInfoMux
[
nDLCI
].
fsm_°©
 = 
SA_FSM_STATE_NORMAL
;

286 
g_SaInfoMux
[
nDLCI
].
powî_⁄_mode
 = 
SA_PROC_MODE_COMMAND
;

291 
SA_POWRN_ON_CAUSE_CHARGE
:

293 i‡(
g_SaInfoMux
[
nDLCI
].
fsm_°©
 !
SA_FSM_STATE_CHGR_ONLY
)

296 
g_SaInfoMux
[
nDLCI
].
fsm_°©
 = 
SA_FSM_STATE_CHGR_ONLY
;

301 
SA_POWRN_ON_CAUSE_ALARM
:

303 i‡(
g_SaInfoMux
[
nDLCI
].
fsm_°©
 !
SA_FSM_STATE_ALARM_ONLY
)

306 
g_SaInfoMux
[
nDLCI
].
fsm_°©
 = 
SA_FSM_STATE_ALARM_ONLY
;

311 
SA_POWRN_ON_CAUSE_EXCEPTION
:

313 i‡(
g_SaInfoMux
[
nDLCI
].
fsm_°©
 !
SA_FSM_STATE_NORMAL
)

316 
g_SaInfoMux
[
nDLCI
].
fsm_°©
 = 
SA_FSM_STATE_NORMAL
;

319 
g_SaInfoMux
[
nDLCI
].
powî_⁄_mode
 = 
SA_PROC_MODE_COMMAND
;

324 
SA_POWRN_ON_CAUSE_RESET
:

326 i‡(
g_SaInfoMux
[
nDLCI
].
fsm_°©
 !
SA_FSM_STATE_NORMAL
)

329 
g_SaInfoMux
[
nDLCI
].
fsm_°©
 = 
SA_FSM_STATE_NORMAL
;

332 
g_SaInfoMux
[
nDLCI
].
powî_⁄_mode
 = 
SA_PROC_MODE_COMMAND
;

340 
SA_ATCMD_SMSO_RESULT
:

341 
g_SaInfoMux
[
nDLCI
].
©cmd_smso_ªsu…
 &= 0xFFFFFFFE;

342 
g_SaInfoMux
[
nDLCI
].
©cmd_smso_ªsu…
 |
°©_mask
;

344 i‡((
g_SaInfoMux
[
nDLCI
].
©cmd_smso_ªsu…
 & 
SA_ATCMD_SMSO_OK
) == SA_ATCMD_SMSO_OK)

347 
g_SaInfoMux
[
nDLCI
].
fsm_°©
 = 
SA_FSM_STATE_POWER_DOWN
;

352 
SA_ATCMD_CFUN_RESULT
:

353 
g_SaInfoMux
[
nDLCI
].
©cmd_cfun_ªsu…
 &= 0xFFFFFFFC;

354 
g_SaInfoMux
[
nDLCI
].
©cmd_cfun_ªsu…
 |
°©_mask
;

356 i‡((
g_SaInfoMux
[
nDLCI
].
©cmd_cfun_ªsu…
 & 
SA_ATCMD_CFUN_5
) == SA_ATCMD_CFUN_5)

359 
g_SaInfoMux
[
nDLCI
].
fsm_°©
 = 
SA_FSM_STATE_POWER_DOWN
;

364 
g_SaInfoMux
[
nDLCI
].
fsm_°©
 = 
SA_FSM_STATE_NORMAL
;

367 
g_SaInfoMux
[
nDLCI
].
powî_⁄_mode
 = 
SA_PROC_MODE_COMMAND
;

372 
SA_ATCMD_ATO_RESULT
:

373 
g_SaInfoMux
[
nDLCI
].
©cmd_©o_ªsu…
 &= 0xFFFFFFFE;

374 
g_SaInfoMux
[
nDLCI
].
©cmd_©o_ªsu…
 |
°©_mask
;

376 i‡(((
g_SaInfoMux
[
nDLCI
].
©cmd_©o_ªsu…
 & 
SA_ATCMD_ATO_OK
) == SA_ATCMD_ATO_OK)

377 && (
g_SaInfoMux
[
nDLCI
].
¥oc_mode_hi°‹y
 =
PROC_INVALID_STATE
))

380 
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 = 
SA_PROC_MODE_PS
;

381 
g_SaInfoMux
[
nDLCI
].
¥oc_mode_hi°‹y
 = 
PROC_INVALID_STATE
;

384 
g_AtModuÀ
.
ps_3∂us_°©
 = 
pssm_W_PFX
;

385 
	`START_3PLUS_TIMERMUX
(
nDLCI
);

389 
	`u¨t_Re›í
(
ds_high
);

398 
SA_ATCMD_ATD_RESULT
:

399 
g_SaInfoMux
[
nDLCI
].
©cmd_©d_ªsu…
 &= 0xFFFFFFFE;

400 
g_SaInfoMux
[
nDLCI
].
©cmd_©d_ªsu…
 |
°©_mask
;

402 i‡(((
g_SaInfoMux
[
nDLCI
].
©cmd_©d_ªsu…
 & 
SA_ATCMD_ATD_OK
) == SA_ATCMD_ATD_OK)

403 && (
g_SaInfoMux
[
nDLCI
].
¥oc_mode_hi°‹y
 =
PROC_INVALID_STATE
))

406 
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 = 
SA_PROC_MODE_PS
;

407 
g_SaInfoMux
[
nDLCI
].
¥oc_mode_hi°‹y
 = 
PROC_CMD_MODE_STATE
;

408 
g_SaInfoMux
[
nDLCI
].
©cmd_©d_ªsu…
 = 0;

409 
g_AtModuÀMux
[
nDLCI
].
ps_3∂us_°©
 = 
pssm_W_PFX
;

410 
	`START_3PLUS_TIMERMUX
(
nDLCI
);

412 i‡(((
g_SaInfoMux
[
nDLCI
].
©cmd_©d_ªsu…
 & 
SA_ATCMD_ATD_PS_OK
) == SA_ATCMD_ATD_PS_OK)

413 && (
g_SaInfoMux
[
nDLCI
].
¥oc_mode_hi°‹y
 =
PROC_INVALID_STATE
))

415 
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 = 
SA_PROC_MODE_PS
;

416 
g_SaInfoMux
[
nDLCI
].
¥oc_mode_hi°‹y
 = 
PROC_CMD_MODE_STATE
;

417 
g_SaInfoMux
[
nDLCI
].
©cmd_©d_ªsu…
 = 0;

418 
g_AtModuÀMux
[
nDLCI
].
ps_3∂us_°©
 = 
pssm_W_PFX
;

419 
	`START_3PLUS_TIMERMUX
(
nDLCI
);

428 
SA_ATCMD_3PLUS_RESULT
:

429 
g_SaInfoMux
[
nDLCI
].
©cmd_3∂us_ªsu…
 &= 0xFFFFFFFE;

430 
g_SaInfoMux
[
nDLCI
].
©cmd_3∂us_ªsu…
 |
°©_mask
;

432 i‡((
g_SaInfoMux
[
nDLCI
].
©cmd_3∂us_ªsu…
 & 
SA_ATCMD_3PLUS_OK
) == SA_ATCMD_3PLUS_OK)

435 
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 = 
SA_PROC_MODE_ONLINE_CMD
;

436 
	`u¨t_Re›í
(
ds_low
);

442 
SA_ATCMD_ATH_RESULT
:

443 
g_SaInfoMux
[
nDLCI
].
©cmd_©h_ªsu…
 &= 0xFFFFFFFE;

444 
g_SaInfoMux
[
nDLCI
].
©cmd_©h_ªsu…
 |
°©_mask
;

446 i‡((
g_SaInfoMux
[
nDLCI
].
©cmd_©h_ªsu…
 & 
SA_ATCMD_ATH_OK
) == SA_ATCMD_ATH_OK)

449 
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 = 
SA_PROC_MODE_COMMAND
;

455 
SA_ATCMD_CGDATA_RESULT
:

456 
g_SaInfoMux
[
nDLCI
].
©cmd_cgd©a_ªsu…
 &= 0xFFFFFFFE;

457 
g_SaInfoMux
[
nDLCI
].
©cmd_cgd©a_ªsu…
 |
°©_mask
;

459 i‡((
g_SaInfoMux
[
nDLCI
].
©cmd_cgd©a_ªsu…
 & 
SA_ATCMD_CGDATA_OK
) == SA_ATCMD_CGDATA_OK)

462 
g_SaInfoMux
[
nDLCI
].
¥oc_mode
 = 
SA_PROC_MODE_PS
;

463 
g_AtModuÀMux
[
nDLCI
].
ps_3∂us_°©
 = 
pssm_W_PFX
;

464 
	`START_3PLUS_TIMERMUX
(
nDLCI
);

468 
	`u¨t_Re›í
(
ds_high
);

474 
SA_INIT_STATUS
:

475 
g_SaInfoMux
[
nDLCI
].
öô_°©us
 &= 0xFFFFFFFC;

476 
g_SaInfoMux
[
nDLCI
].
öô_°©us
 |
°©_mask
;

479 
SA_SIM_STATUS
:

480 
g_SaInfoMux
[
nDLCI
].
sim_°©us
 &= 0xFFFF0000;

481 
g_SaInfoMux
[
nDLCI
].
sim_°©us
 |
°©_mask
;

484 
SA_ATS_INIT_STATUS
:

485 
g_SaInfoMux
[
nDLCI
].
©s_öô_°©us
 &= 0xFFFFFFF0;

486 
g_SaInfoMux
[
nDLCI
].
©s_öô_°©us
 |
°©_mask
;

489 
SA_NW_REG_STATUS
:

490 
g_SaInfoMux
[
nDLCI
].
nw_ªg_°©us
 &= 0xFFFFFFFE;

491 
g_SaInfoMux
[
nDLCI
].
nw_ªg_°©us
 |
°©_mask
;

494 
SA_INNER_RUNCOMMAND_STATE_
:

495 
g_SaInfoMux
[
nDLCI
].
has_node_ö_cmdli°
 = 
°©_mask
;

502  
TRUE
;

503 
	}
}

506 
boﬁ
 
	$SA_SëSysSètus
(
SA_STAT_CLASS
 
°©_˛ass
, 
uöt32
 
°©_mask
)

518 
°©_˛ass
)

521 
AT_EVENT
:

523 
°©_mask
)

526 
EV_CFW_CC_RELEASE_CALL_IND
:

530 
EV_CFW_CC_RELEASE_CALL_RSP
:

532 i‡((
g_SaInfo
.
¥oc_mode
 =
SA_PROC_MODE_ONLINE_CMD
)

533 && (
g_SaInfo
.
¥oc_mode_hi°‹y
 =
PROC_INVALID_STATE
))

536 
g_SaInfo
.
¥oc_mode
 = 
SA_PROC_MODE_ONLINE_CMD
;

539 i‡((
g_SaInfo
.
¥oc_mode
 =
SA_PROC_MODE_ONLINE_CMD
)

540 && (
g_SaInfo
.
¥oc_mode_hi°‹y
 =
PROC_GPRS_STATE
))

542 
g_SaInfo
.
¥oc_mode
 = 
SA_PROC_MODE_PS
;

543 
g_SaInfo
.
¥oc_mode_hi°‹y
 = 
PROC_INVALID_STATE
;

544 
	`u¨t_Re›í
(
ds_high
);

546 i‡((
g_SaInfo
.
¥oc_mode
 =
SA_PROC_MODE_ONLINE_CMD
)

547 && (
g_SaInfo
.
¥oc_mode_hi°‹y
 =
PROC_KEEP_CURRENT_STATE
))

549 
g_SaInfo
.
¥oc_mode
 = 
SA_PROC_MODE_ONLINE_CMD
;

550 
g_SaInfo
.
¥oc_mode_hi°‹y
 = 
PROC_INVALID_STATE
;

552 i‡((
g_SaInfo
.
¥oc_mode
 =
SA_PROC_MODE_CS
)

553 && (
g_SaInfo
.
¥oc_mode_hi°‹y
 =
PROC_CMD_MODE_STATE
))

556 
g_SaInfo
.
¥oc_mode
 = 
SA_PROC_MODE_COMMAND
;

557 
g_SaInfo
.
¥oc_mode_hi°‹y
 = 
PROC_INVALID_STATE
;

559 i‡((
g_SaInfo
.
¥oc_mode
 =
SA_PROC_MODE_CS
)

560 && (
g_SaInfo
.
¥oc_mode_hi°‹y
 =
PROC_ONLINE_CMD_STATE
))

562 
g_SaInfo
.
¥oc_mode
 = 
SA_PROC_MODE_ONLINE_CMD
;

563 
g_SaInfo
.
¥oc_mode_hi°‹y
 = 
PROC_INVALID_STATE
;

565 i‡((
g_SaInfo
.
¥oc_mode
 =
SA_PROC_MODE_CS
)

566 && (
g_SaInfo
.
¥oc_mode_hi°‹y
 =
PROC_GPRS_STATE
))

569 
g_SaInfo
.
¥oc_mode
 = 
SA_PROC_MODE_PS
;

570 
g_SaInfo
.
¥oc_mode_hi°‹y
 = 
PROC_INVALID_STATE
;

571 
	`u¨t_Re›í
(
ds_high
);

580 
EV_CFW_CC_SPEECH_CALL_IND
:

582 i‡(
g_SaInfo
.
¥oc_mode
 =
SA_PROC_MODE_PS
)

584 
g_SaInfo
.
¥oc_mode
 = 
SA_PROC_MODE_ONLINE_CMD
;

585 
g_SaInfo
.
¥oc_mode_hi°‹y
 = 
PROC_GPRS_STATE
;

586 
	`u¨t_Re›í
(
ds_low
);

588 i‡((
g_SaInfo
.
¥oc_mode
 =
SA_PROC_MODE_ONLINE_CMD
)

589 && (
g_SaInfo
.
¥oc_mode_hi°‹y
 =
PROC_INVALID_STATE
))

591 
g_SaInfo
.
¥oc_mode_hi°‹y
 = 
PROC_KEEP_CURRENT_STATE
;

601 
EV_CFW_CC_ACCEPT_SPEECH_CALL_RSP
:

603 
EV_CFW_CC_INITIATE_SPEECH_CALL_RSP
:

605 i‡((
g_SaInfo
.
¥oc_mode
 =
SA_PROC_MODE_ONLINE_CMD
Ë&& (g_SaInfo.
¥oc_mode_hi°‹y
 =
PROC_GPRS_STATE
))

608 
g_SaInfo
.
¥oc_mode
 = 
SA_PROC_MODE_CS
;

610 i‡(((
g_SaInfo
.
¥oc_mode
 =
SA_PROC_MODE_ONLINE_CMD
Ë&& (g_SaInfo.
¥oc_mode_hi°‹y
 =
PROC_INVALID_STATE
))

611 || ((
g_SaInfo
.
¥oc_mode
 =
SA_PROC_MODE_ONLINE_CMD
Ë&& (g_SaInfo.
¥oc_mode_hi°‹y
 =
PROC_KEEP_CURRENT_STATE
)))

613 
g_SaInfo
.
¥oc_mode
 = 
SA_PROC_MODE_CS
;

614 
g_SaInfo
.
¥oc_mode_hi°‹y
 = 
PROC_ONLINE_CMD_STATE
;

616 i‡((
g_SaInfo
.
¥oc_mode
 =
SA_PROC_MODE_COMMAND
Ë&& (g_SaInfo.
¥oc_mode_hi°‹y
 =
PROC_INVALID_STATE
))

618 
g_SaInfo
.
¥oc_mode
 = 
SA_PROC_MODE_CS
;

619 
g_SaInfo
.
¥oc_mode_hi°‹y
 = 
PROC_CMD_MODE_STATE
;

630 
g_SaInfo
.
¥oc_mode_hi°‹y
 = 
PROC_INVALID_STATE
;

636 
SA_POWER_ON_MODE
:

637 
g_SaInfo
.
powî_⁄_mode
 &= 0xFFFFFFF0;

638 
g_SaInfo
.
powî_⁄_mode
 |
°©_mask
;

640 
g_SaInfo
.
powî_⁄_mode
)

643 
SA_POWRN_ON_CAUSE_KEY
:

645 i‡(
g_SaInfo
.
fsm_°©
 !
SA_FSM_STATE_NORMAL
)

648 
g_SaInfo
.
fsm_°©
 = 
SA_FSM_STATE_NORMAL
;

650 
g_SaInfo
.
powî_⁄_mode
 = 
SA_PROC_MODE_COMMAND
;

655 
SA_POWRN_ON_CAUSE_CHARGE
:

657 i‡(
g_SaInfo
.
fsm_°©
 !
SA_FSM_STATE_CHGR_ONLY
)

660 
g_SaInfo
.
fsm_°©
 = 
SA_FSM_STATE_CHGR_ONLY
;

665 
SA_POWRN_ON_CAUSE_ALARM
:

667 i‡(
g_SaInfo
.
fsm_°©
 !
SA_FSM_STATE_ALARM_ONLY
)

670 
g_SaInfo
.
fsm_°©
 = 
SA_FSM_STATE_ALARM_ONLY
;

675 
SA_POWRN_ON_CAUSE_EXCEPTION
:

677 i‡(
g_SaInfo
.
fsm_°©
 !
SA_FSM_STATE_NORMAL
)

680 
g_SaInfo
.
fsm_°©
 = 
SA_FSM_STATE_NORMAL
;

682 
g_SaInfo
.
powî_⁄_mode
 = 
SA_PROC_MODE_COMMAND
;

687 
SA_POWRN_ON_CAUSE_RESET
:

689 i‡(
g_SaInfo
.
fsm_°©
 !
SA_FSM_STATE_NORMAL
)

692 
g_SaInfo
.
fsm_°©
 = 
SA_FSM_STATE_NORMAL
;

694 
g_SaInfo
.
powî_⁄_mode
 = 
SA_PROC_MODE_COMMAND
;

702 
SA_ATCMD_SMSO_RESULT
:

703 
g_SaInfo
.
©cmd_smso_ªsu…
 &= 0xFFFFFFFE;

704 
g_SaInfo
.
©cmd_smso_ªsu…
 |
°©_mask
;

706 i‡((
g_SaInfo
.
©cmd_smso_ªsu…
 & 
SA_ATCMD_SMSO_OK
) == SA_ATCMD_SMSO_OK)

709 
g_SaInfo
.
fsm_°©
 = 
SA_FSM_STATE_POWER_DOWN
;

714 
SA_ATCMD_CFUN_RESULT
:

715 
g_SaInfo
.
©cmd_cfun_ªsu…
 &= 0xFFFFFFFC;

716 
g_SaInfo
.
©cmd_cfun_ªsu…
 |
°©_mask
;

718 i‡((
g_SaInfo
.
©cmd_cfun_ªsu…
 & 
SA_ATCMD_CFUN_5
) == SA_ATCMD_CFUN_5)

721 
g_SaInfo
.
fsm_°©
 = 
SA_FSM_STATE_POWER_DOWN
;

726 
g_SaInfo
.
fsm_°©
 = 
SA_FSM_STATE_NORMAL
;

728 
g_SaInfo
.
powî_⁄_mode
 = 
SA_PROC_MODE_COMMAND
;

734 
SA_ATCMD_ATO_RESULT
:

735 
g_SaInfo
.
©cmd_©o_ªsu…
 &= 0xFFFFFFFE;

736 
g_SaInfo
.
©cmd_©o_ªsu…
 |
°©_mask
;

738 i‡(((
g_SaInfo
.
©cmd_©o_ªsu…
 & 
SA_ATCMD_ATO_OK
Ë=SA_ATCMD_ATO_OKË&& (g_SaInfo.
¥oc_mode_hi°‹y
 =
PROC_INVALID_STATE
))

741 
g_SaInfo
.
¥oc_mode
 = 
SA_PROC_MODE_PS
;

742 
g_SaInfo
.
¥oc_mode_hi°‹y
 = 
PROC_INVALID_STATE
;

744 
g_AtModuÀ
.
ps_3∂us_°©
 = 
pssm_W_PFX
;

745 
	`START_3PLUS_TIMER
();

748 
	`u¨t_Re›í
(
ds_high
);

757 
SA_ATCMD_ATD_RESULT
:

758 
g_SaInfo
.
©cmd_©d_ªsu…
 &= 0xFFFFFFFE;

759 
g_SaInfo
.
©cmd_©d_ªsu…
 |
°©_mask
;

761 i‡(((
g_SaInfo
.
©cmd_©d_ªsu…
 & 
SA_ATCMD_ATD_OK
Ë=SA_ATCMD_ATD_OKË&& (g_SaInfo.
¥oc_mode_hi°‹y
 =
PROC_INVALID_STATE
))

764 
g_SaInfo
.
¥oc_mode
 = 
SA_PROC_MODE_PS
;

765 
g_SaInfo
.
¥oc_mode_hi°‹y
 = 
PROC_CMD_MODE_STATE
;

766 
g_SaInfo
.
©cmd_©d_ªsu…
 = 0;

767 
g_AtModuÀ
.
ps_3∂us_°©
 = 
pssm_W_PFX
;

768 
	`START_3PLUS_TIMER
();

770 i‡(((
g_SaInfo
.
©cmd_©d_ªsu…
 & 
SA_ATCMD_ATD_PS_OK
Ë=SA_ATCMD_ATD_PS_OKË&& (g_SaInfo.
¥oc_mode_hi°‹y
 =
PROC_INVALID_STATE
))

772 
g_SaInfo
.
¥oc_mode
 = 
SA_PROC_MODE_PS
;

773 
g_SaInfo
.
¥oc_mode_hi°‹y
 = 
PROC_CMD_MODE_STATE
;

774 
g_SaInfo
.
©cmd_©d_ªsu…
 = 0;

775 
g_AtModuÀ
.
ps_3∂us_°©
 = 
pssm_W_PFX
;

776 
	`START_3PLUS_TIMER
();

785 
SA_ATCMD_3PLUS_RESULT
:

786 
g_SaInfo
.
©cmd_3∂us_ªsu…
 &= 0xFFFFFFFE;

787 
g_SaInfo
.
©cmd_3∂us_ªsu…
 |
°©_mask
;

789 i‡((
g_SaInfo
.
©cmd_3∂us_ªsu…
 & 
SA_ATCMD_3PLUS_OK
) == SA_ATCMD_3PLUS_OK)

792 
g_SaInfo
.
¥oc_mode
 = 
SA_PROC_MODE_ONLINE_CMD
;

793 
	`u¨t_Re›í
(
ds_low
);

799 
SA_ATCMD_ATH_RESULT
:

800 
g_SaInfo
.
©cmd_©h_ªsu…
 &= 0xFFFFFFFE;

801 
g_SaInfo
.
©cmd_©h_ªsu…
 |
°©_mask
;

803 i‡((
g_SaInfo
.
©cmd_©h_ªsu…
 & 
SA_ATCMD_ATH_OK
) == SA_ATCMD_ATH_OK)

806 
g_SaInfo
.
¥oc_mode
 = 
SA_PROC_MODE_COMMAND
;

812 
SA_ATCMD_CGDATA_RESULT
:

813 
g_SaInfo
.
©cmd_cgd©a_ªsu…
 &= 0xFFFFFFFE;

814 
g_SaInfo
.
©cmd_cgd©a_ªsu…
 |
°©_mask
;

815 i‡((
g_SaInfo
.
©cmd_cgd©a_ªsu…
 & 
SA_ATCMD_CGDATA_OK
) == SA_ATCMD_CGDATA_OK)

818 
g_SaInfo
.
¥oc_mode
 = 
SA_PROC_MODE_PS
;

819 
g_AtModuÀ
.
ps_3∂us_°©
 = 
pssm_W_PFX
;

820 
	`START_3PLUS_TIMER
();

823 
	`u¨t_Re›í
(
ds_high
);

829 
SA_INIT_STATUS
:

830 
g_SaInfo
.
öô_°©us
 &= 0xFFFFFFFC;

831 
g_SaInfo
.
öô_°©us
 |
°©_mask
;

834 
SA_SIM_STATUS
:

835 
g_SaInfo
.
sim_°©us
 &= 0xFFFF0000;

836 
g_SaInfo
.
sim_°©us
 |
°©_mask
;

839 
SA_ATS_INIT_STATUS
:

840 
g_SaInfo
.
©s_öô_°©us
 &= 0xFFFFFFF0;

841 
g_SaInfo
.
©s_öô_°©us
 |
°©_mask
;

844 
SA_NW_REG_STATUS
:

845 
g_SaInfo
.
nw_ªg_°©us
 &= 0xFFFFFFFE;

846 
g_SaInfo
.
nw_ªg_°©us
 |
°©_mask
;

849 
SA_INNER_RUNCOMMAND_STATE_
:

850 
g_SaInfo
.
has_node_ö_cmdli°
 = 
°©_mask
;

857  
TRUE
;

858 
	}
}

860 
uöt32
 
	$SA_GëSysSètusMUX
(
SA_STAT_CLASS
 
°©_˛ass
, 
uöt8
 
nDLCI
)

862 
°©_˛ass
)

865 
SA_POWER_ON_MODE
:

866  
g_SaInfoMux
[
nDLCI
].
powî_⁄_mode
;

868 
SA_ATCMD_SMSO_RESULT
:

869  
g_SaInfoMux
[
nDLCI
].
©cmd_smso_ªsu…
;

871 
SA_ATCMD_CFUN_RESULT
:

872  
g_SaInfoMux
[
nDLCI
].
©cmd_cfun_ªsu…
;

874 
SA_ATCMD_ATO_RESULT
:

875  
g_SaInfoMux
[
nDLCI
].
©cmd_©o_ªsu…
;

877 
SA_ATCMD_3PLUS_RESULT
:

878  
g_SaInfoMux
[
nDLCI
].
©cmd_3∂us_ªsu…
;

880 
SA_ATCMD_ATH_RESULT
:

881  
g_SaInfoMux
[
nDLCI
].
©cmd_©h_ªsu…
;

883 
SA_ATCMD_ATA_RESULT
:

884  
g_SaInfoMux
[
nDLCI
].
©cmd_©a_ªsu…
;

886 
SA_ATCMD_CGDATA_RESULT
:

887  
g_SaInfoMux
[
nDLCI
].
©cmd_cgd©a_ªsu…
;

889 
SA_INIT_STATUS
:

890  
g_SaInfoMux
[
nDLCI
].
öô_°©us
;

892 
SA_SIM_STATUS
:

893  
g_SaInfoMux
[
nDLCI
].
sim_°©us
;

895 
SA_ATS_INIT_STATUS
:

896  
g_SaInfoMux
[
nDLCI
].
©s_öô_°©us
;

898 
SA_NW_REG_STATUS
:

899  
g_SaInfoMux
[
nDLCI
].
nw_ªg_°©us
;

901 
SA_INNER_FSM_STATUS_
:

902  
g_SaInfoMux
[
nDLCI
].
fsm_°©
;

904 
SA_INNER_PROC_MODE_
:

905  
g_SaInfoMux
[
nDLCI
].
¥oc_mode
;

907 
SA_INNER_RUNCOMMAND_STATE_
:

908  
g_SaInfoMux
[
nDLCI
].
has_node_ö_cmdli°
;

915 
	}
}

917 
uöt32
 
	$SA_GëSysSètus
(
SA_STAT_CLASS
 
°©_˛ass
)

919 
°©_˛ass
)

922 
SA_POWER_ON_MODE
:

923  
g_SaInfo
.
powî_⁄_mode
;

925 
SA_ATCMD_SMSO_RESULT
:

926  
g_SaInfo
.
©cmd_smso_ªsu…
;

928 
SA_ATCMD_CFUN_RESULT
:

929  
g_SaInfo
.
©cmd_cfun_ªsu…
;

931 
SA_ATCMD_ATO_RESULT
:

932  
g_SaInfo
.
©cmd_©o_ªsu…
;

934 
SA_ATCMD_3PLUS_RESULT
:

935  
g_SaInfo
.
©cmd_3∂us_ªsu…
;

937 
SA_ATCMD_ATH_RESULT
:

938  
g_SaInfo
.
©cmd_©h_ªsu…
;

940 
SA_ATCMD_ATA_RESULT
:

941  
g_SaInfo
.
©cmd_©a_ªsu…
;

943 
SA_ATCMD_CGDATA_RESULT
:

944  
g_SaInfo
.
©cmd_cgd©a_ªsu…
;

946 
SA_INIT_STATUS
:

947  
g_SaInfo
.
öô_°©us
;

949 
SA_SIM_STATUS
:

950  
g_SaInfo
.
sim_°©us
;

952 
SA_ATS_INIT_STATUS
:

953  
g_SaInfo
.
©s_öô_°©us
;

955 
SA_NW_REG_STATUS
:

956  
g_SaInfo
.
nw_ªg_°©us
;

958 
SA_INNER_FSM_STATUS_
:

959  
g_SaInfo
.
fsm_°©
;

961 
SA_INNER_PROC_MODE_
:

962  
g_SaInfo
.
¥oc_mode
;

964 
SA_INNER_RUNCOMMAND_STATE_
:

965  
g_SaInfo
.
has_node_ö_cmdli°
;

972 
	}
}

975 
boﬁ
 
	$is_cmd_íabÀd
(
uöt32
 
ödex
, 
uöt8
 
nDLCI
)

977 
uöt32
 
sys_°©
 = 0;

978 i‡(
g_Comm™dTabÀ
[
ödex
].
chõf_íabÀ_Êag
 != 1)

979  
FALSE
;

982 if(
bMuxA˘iveSètus
)

983 
sys_°©
 = 
	`SA_GëSysSètusMUX
(
SA_INNER_FSM_STATUS_
, 
nDLCI
);

985 
sys_°©
 = 
	`SA_GëSysSètus
(
SA_INNER_FSM_STATUS_
);

986 
sys_°©
)

989 
SA_FSM_STATE_POWER_DOWN
:

990  
FALSE
;

992 
SA_FSM_STATE_NORMAL
:

994 i‡((
g_Comm™dTabÀ
[
ödex
].
íabÀ_mask
.
fsm_°©us_mask
 & 
FSM_STATUS_MASK_NORMAL
) != FSM_STATUS_MASK_NORMAL)

995  
FALSE
;

999 
SA_FSM_STATE_CHGR_NORMAL
:

1000 i‡((
g_Comm™dTabÀ
[
ödex
].
íabÀ_mask
.
fsm_°©us_mask
 & 
FSM_STATUS_MASK_CHGR_NORMAL
) != FSM_STATUS_MASK_CHGR_NORMAL)

1001  
FALSE
;

1005 
SA_FSM_STATE_CHGR_ONLY
:

1006 i‡((
g_Comm™dTabÀ
[
ödex
].
íabÀ_mask
.
fsm_°©us_mask
 & 
FSM_STATUS_MASK_CHGR_ONLY
) != FSM_STATUS_MASK_CHGR_ONLY)

1007  
FALSE
;

1011 
SA_FSM_STATE_ALARM_NORMAL
:

1012 i‡((
g_Comm™dTabÀ
[
ödex
].
íabÀ_mask
.
fsm_°©us_mask
 & 
FSM_STATUS_MASK_ALARM_NORMAL
) != FSM_STATUS_MASK_ALARM_NORMAL)

1013  
FALSE
;

1017 
SA_FSM_STATE_ALARM_ONLY
:

1018 i‡((
g_Comm™dTabÀ
[
ödex
].
íabÀ_mask
.
fsm_°©us_mask
 & 
FSM_STATUS_MASK_ALARM_ONLY
) != FSM_STATUS_MASK_ALARM_ONLY)

1019  
FALSE
;

1023 
SA_FSM_STATE_SLEEP
:

1024  
FALSE
;

1027  
FALSE
;

1031 if(
bMuxA˘iveSètus
)

1032 
sys_°©
 = 
	`SA_GëSysSètusMUX
(
SA_INNER_PROC_MODE_
, 
nDLCI
);

1034 
sys_°©
 = 
	`SA_GëSysSètus
(
SA_INNER_PROC_MODE_
);

1037 
sys_°©
)

1040 
SA_PROC_MODE_COMMAND
:

1042 i‡((
g_Comm™dTabÀ
[
ödex
].
íabÀ_mask
.
¥oc_mode_mask
 & 
PROC_MODE_MASK_COMMAND
) != PROC_MODE_MASK_COMMAND)

1043  
FALSE
;

1047 
SA_PROC_MODE_ONLINE_CMD
:

1048 i‡((
g_Comm™dTabÀ
[
ödex
].
íabÀ_mask
.
¥oc_mode_mask
 & 
PROC_MODE_MASK_ONLINE_CMD
) != PROC_MODE_MASK_ONLINE_CMD)

1049  
FALSE
;

1055 
SA_PROC_MODE_PS
:

1056 i‡((
g_Comm™dTabÀ
[
ödex
].
íabÀ_mask
.
¥oc_mode_mask
 & 
PROC_MODE_MASK_PS
) != PROC_MODE_MASK_PS)

1057  
FALSE
;

1061 
SA_PROC_MODE_CS
:

1062 i‡((
g_Comm™dTabÀ
[
ödex
].
íabÀ_mask
.
¥oc_mode_mask
 & 
PROC_MODE_MASK_CS
) != PROC_MODE_MASK_CS)

1063  
FALSE
;

1070  
FALSE
;

1073  
TRUE
;

1074 
	}
}

1077 
boﬁ
 
	$is_cmd_ªady
(
uöt32
 
ödex
, 
uöt8
 
nDLCI
)

1079 
SA_CMD_CLASS_T
 
cmd_˛s
 = 
g_Comm™dTabÀ
[
ödex
].
cmd_˛ass
;

1080 
uöt32
 
sys_°©
 = 0;

1082 if(
bMuxA˘iveSètus
)

1083 
sys_°©
 = 
	`SA_GëSysSètusMUX
(
SA_ATS_INIT_STATUS
, 
nDLCI
);

1085 
sys_°©
 = 
	`SA_GëSysSètus
(
SA_ATS_INIT_STATUS
);

1088 
cmd_˛s
)

1091 
SA_CMDCLS_SYS
:

1093 
SA_CMDCLS_CC
:

1096 
SA_CMDCLS_SMS
:

1098 i‡((
sys_°©
 & 
SA_ATS_SMS_READY
) != SA_ATS_SMS_READY)

1099  
FALSE
;

1103 
SA_CMDCLS_NW
:

1105 
SA_CMDCLS_SS
:

1108 
SA_CMDCLS_PBK
:

1109 i‡((
sys_°©
 & 
SA_ATS_PBK_READY
) != SA_ATS_PBK_READY)

1110  
FALSE
;

1114 
SA_CMDCLS_SAT
:

1116 
SA_CMDCLS_ID
:

1118 
SA_CMDCLS_SIM
:

1120 
SA_CMDCLS_HW
:

1122 
SA_CMDCLS_DS
:

1124 
SA_CMDCLS_GC
:

1126 
SA_CMDCLS_EX
:

1132  
TRUE
;

1133 
	}
}

1135 
p‚_AtCmdH™dÀr
 
	$SA_GëCmdH™dÀr
(
uöt8
 *
cmd_«me
 , uöt8 
nDLCI
)

1137 
ödex
 = -1;

1139 
p‚_AtCmdH™dÀr
 
p‚
 = 
SA_DeÁu…CmdH™dÀr_NŸSuµŸãd
;

1141 
g_Comm™dTabÀ
[++
ödex
].
pName
 !
NULL
)

1143 i‡(
	`AT_SåCmp
(
cmd_«me
, 
g_Comm™dTabÀ
[
ödex
].
pName
) == 0)

1145 i‡(
	`is_cmd_íabÀd
(
ödex
, 
nDLCI
Ë=
TRUE
 && 
	`is_cmd_ªady
(index,ÇDLCI) == TRUE)

1147 
p‚
 = 
g_Comm™dTabÀ
[
ödex
].
pFunc
;

1151 
p‚
 = 
SA_DeÁu…CmdH™dÀr_Eº‹
;

1157 i‡(
p‚
 =
SA_DeÁu…CmdH™dÀr_NŸSuµŸãd
)

1162  
p‚
;

1163 
	}
}

1173 
HANDLE
 
	gg_hAtTask
 = 
HNULL
;

1179 
	#AT_TASK_STACK_SIZE
 2048

	)

1189 
	#AT_TASK_STACK_SIZE
 (2048 * 2)

	)

1191 
	#AT_TASK_PRIORITY
 
COS_MMI_TASKS_PRIORITY_BASE


	)

1193 
	#GET_COSMSG
(
≥v
Ë
	`COS_WaôEvít
(
g_hAtTask
, (≥v), 
COS_WAIT_FOREVER
)

	)

1195 
boﬁ
 
	$SA_GëI¡î«lMsg
(
COS_EVENT
 *
≥v
)

1216 i‡(
g_SaInfo
.
has_node_ö_cmdli°
 == 1)

1218 
g_SaInfo
.
has_node_ö_cmdli°
 = 0;

1219 
≥v
->
nEvítId
 = 
EV_AT_RUN_NEXT_COMMAND
;

1220 
≥v
->
nP¨am1
 = 0;

1221 
≥v
->
nP¨am2
 = 0;

1222 
≥v
->
nP¨am3
 = 0;

1223  
TRUE
;

1227  
FALSE
;

1231 
	}
}

1277 
	$©_Di•©chMesßge
(
Msg_t
 * 
≥v
)

1356 
Msg
->
H
.
Id
)

1359 
EV_DM_UART_RECEIVE_DATA_IND
:

1361 
uöt8
 
mode
 = 0;

1362 
	`AT_GC_CfgGëEchoMode
(&
mode
);

1363 i‡(
mode
 =
GC_COMMANDECHO_MODE_ENABLE
)

1365 
uöt32
 
i
 = 0;

1366 
uöt8
* 
p
 = (uöt8 *)
≥v
->
nP¨am1
;

1367 
≥v
->
nP¨am2
 - 
i
 > 0)

1369 
i
 +
	`hÆ_U¨tSídD©a
(
HAL_UART_CH1
, 
p
 + i, 
≥v
->
nP¨am2
 - i);

1385 
uöt32
 
d˚_îr
 = 
CMD_RC_ERROR
;

1386 
uöt8
 
uiSètus
 = 0xFF;

1387 
AT_CMD_BUF
 *
pCmdBuf
 = 
NULL
;

1396 i‡(
bMuxA˘iveSètus
)

1398 i‡(
g_SaInfoMux
[0xFF & 
	`HIUINT16
(
≥v
->
nP¨am3
)].
öô_°©us
 !
SA_INIT_COMPLETED
)

1400 i‡(
	`AT_InôCfw
(
≥v
Ë=
TRUE
)

1406 i‡(
g_SaInfo
.
öô_°©us
 !
SA_INIT_COMPLETED
)

1408 i‡(
	`AT_InôCfw
(
≥v
Ë=
TRUE
)

1417 
≥v
->
nEvítId
)

1420 
EV_AT_RUN_NEXT_COMMAND
:

1421 i‡(
bMuxA˘iveSètus
)

1422 
	`AT_RunNextComm™dMux
(0xFF & 
	`HIUINT16
(
≥v
->
nP¨am3
));

1424 
	`AT_RunNextComm™d
();

1427 
EV_DM_UART_RECEIVE_DATA_IND
:

1429 
PUART_DATA
 
pU¨tD©a
 = (PUART_DATA)
≥v
->
nP¨am1
;

1430 
uöt8
 
nDLCI
 = 0x00;

1431 
uöt8
 
nCålTy≥
 = 0x00;

1433 i‡(
bMuxA˘iveSètus
)

1435 
nCålTy≥
 = (
≥v
->
nP¨am2
) & 0xFF;

1436 
nDLCI
 = (
≥v
->
nP¨am2
) >> 8;

1439 i‡(
CTRL_FIELD_UIH
 =(
nCålTy≥
 | 
SET_PF_MASK
))

1449 i‡(
CTRL_FIELD_SABM
 =(
nCålTy≥
 | 
SET_PF_MASK
))

1452 
	`SídUA
(
nDLCI
 << 2);

1456 i‡(
CTRL_FIELD_UA
 =(
nCålTy≥
 | 
SET_PF_MASK
))

1459 
	`SídUA
(
nDLCI
 << 2);

1461 i‡(
CTRL_FIELD_DM
 =(
nCålTy≥
 | 
SET_PF_MASK
))

1464 
	`SídDM
(
nDLCI
 << 2);

1466 i‡(
CTRL_FIELD_DISC
 =(
nCålTy≥
 | 
SET_PF_MASK
))

1469 
	`SídDISC
(
nDLCI
 << 2);

1476 
uiSètus
 = 
	`AT_GëSètus
();

1478 i‡(
bMuxA˘iveSètus
)

1480 
uiSètus
 = 
	`AT_GëSètusMUX
(
nDLCI
);

1481 
	`AT_SëLPTimîMux
(
ATE_LP_TIME_ELAPSE
, 
nDLCI
);

1486 
uiSètus
 = 
	`AT_GëSètus
();

1492 i‡(
bMuxA˘iveSètus
)

1494 i‡(
	`IS_PS_MODE_MUX
(
nDLCI
Ë=
TRUE
)

1496 
	`ATE_RódU∂ökD©aMux
(
pU¨tD©a
->
D©aBuf
,pU¨tD©a->
D©aLí
, 
DATA_FULL
, 
nDLCI
);

1499 
pCmdBuf
 = (
AT_CMD_BUF
 *)
	`AT_GëCmdBufMux
(
nDLCI
);

1504 i‡(
	`IS_PS_MODE
(Ë=
TRUE
)

1506 
	`ATE_RódU∂ökD©a
(
DATA_FULL
);

1511 
pCmdBuf
 = 
	`AT_GëCmdBuf
();

1514 i‡(
uiSètus
 =
AT_STATUS_CMD_LINE
)

1516 i‡((
	`AT_SåCmp
((
pU¨tD©a
->
D©aBuf
), "A/") == 0)||

1517 (
	`AT_SåCmp
((
pU¨tD©a
->
D©aBuf
), "a/") == 0) )

1519 i‡(
bMuxA˘iveSètus
)

1521 i‡(
g_AtModuÀMux
[
nDLCI
].
cmd_buf_bak
.
D©aLí
 != 0)

1522 
	`Re°‹eCmdBuf„rMux
(
nDLCI
);

1528 i‡(
g_AtModuÀ
.
cmd_buf_bak
.
D©aLí
 != 0)

1529 
	`Re°‹eCmdBuf„r
();

1537 
	`AT_CÀ™CmdBuf
(
pCmdBuf
);

1538 
	`mem˝y
(
pCmdBuf
->
D©aBuf
, 
pU¨tD©a
->D©aBuf,ÖU¨tD©a->
D©aLí
);

1539 
pCmdBuf
->
D©aLí
 = 
pU¨tD©a
->DataLen;

1544 
	`mem˝y
(
pCmdBuf
->
D©aBuf
, 
pU¨tD©a
->D©aBuf,ÖU¨tD©a->
D©aLí
);

1545 
pCmdBuf
->
D©aLí
 = 
pU¨tD©a
->DataLen;

1549 
	`AT_FREE
((
PVOID
)
≥v
->
nP¨am1
);

1551 
≥v
->
nP¨am1
 = 0;

1553 
uiSètus
)

1556 
AT_STATUS_CMD_LINE
:

1558 
öt32
 
ªt
 = 0;

1560 
œb_ª∑r£
:

1561 i‡(
bMuxA˘iveSètus
)

1564 
ªt
 = 
	`AT_Comm™dLöePro˚ssMux
(
pCmdBuf
->
D©aBuf
,ÖCmdBuf->
D©aLí
, 
nDLCI
);

1567 
ªt
 = 
	`AT_Comm™dLöePro˚ss
(
pCmdBuf
->
D©aBuf
,ÖCmdBuf->
D©aLí
);

1569 i‡(
ERR_SUCCESS
 =
ªt
)

1572 i‡(
	`Fú°CmdIsBSœsh
(
nDLCI
Ë=
TRUE
)

1575 i‡(
bMuxA˘iveSètus
)

1577 
	`AT_CÀ¨Comm™dLi°Mux
(
nDLCI
);

1581 i‡(
g_AtModuÀMux
[
nDLCI
].
cmd_buf_bak
.
D©aLí
 != 0)

1583 
	`Re°‹eCmdBuf„rMux
(
nDLCI
);

1584 
œb_ª∑r£
;

1591 
	`AT_CÀ¨Comm™dLi°
();

1593 i‡(
g_AtModuÀ
.
cmd_buf_bak
.
D©aLí
 != 0)

1595 
	`Re°‹eCmdBuf„r
();

1596 
œb_ª∑r£
;

1604 i‡(
bMuxA˘iveSètus
)

1605 
	`BackupCmdBuf„rMux
(
nDLCI
);

1607 
	`BackupCmdBuf„r
();

1611 i‡(
bMuxA˘iveSètus
)

1612 
	`AT_RunNextComm™dMux
(
nDLCI
);

1614 
	`AT_RunNextComm™d
();

1618 
d˚_îr
 = 
CMD_RC_INVCMDLINE
;

1621 
œbñ_Áûed
;

1628 
AT_STATUS_SMS_DATA
:

1629 
AT_STATUS_IP_DATA
:

1633 i‡(
bMuxA˘iveSètus
)

1636 i‡(
ERR_SUCCESS
 =
	`AT_SmsD©aPro˚ssMux
(
pU¨tD©a
->
D©aBuf
,ÖU¨tD©a->
D©aLí
, 
nDLCI
))

1638 
	`AT_RunNextComm™dMux
(
nDLCI
);

1639 
	`AT_SëSètusMux
(
AT_STATUS_CMD_LINE
, 
nDLCI
);

1646 i‡(
ERR_SUCCESS
 =
	`AT_SmsD©aPro˚ss
(
pU¨tD©a
->
D©aBuf
,ÖU¨tD©a->
D©aLí
))

1648 
	`AT_RunNextComm™d
();

1649 
	`AT_SëSètus
(
AT_STATUS_CMD_LINE
);

1658 
œbñ_Áûed
:

1659 
	`ATE_H™dÀEx˚±i⁄
(
d˚_îr
, 
nDLCI
);

1661 i‡(
bMuxA˘iveSètus
)

1663 
	`AT_SëSètusMux
(
AT_STATUS_CMD_LINE
, 
nDLCI
);

1668 
	`AT_SëSètus
(
AT_STATUS_CMD_LINE
);

1674 i‡(
pU¨tD©a
 !
NULL
)

1685 
EV_TIMER
:

1688 if(
bMuxA˘iveSètus
)

1690 
uöt8
 
nDLCI
 = 0;

1696 i‡((
≥v
->
nP¨am1
 > 
ATE_ASYNC_TIMER
Ë&&’ev->nP¨am1 <(ATE_ASYNC_TIMER + 
MAX_DLC_NUM
)))

1698 
nDLCI
 = 
≥v
->
nP¨am1
 - 
ATE_ASYNC_TIMER
;

1700 if(
	`AT_GëSètusMUX
(
nDLCI
)==
AT_STATUS_IP_DATA
)

1702 
	`Ip_d©a_TimeOutMux
(
nDLCI
);

1706 
	`ATE_H™dÀTimeoutMux
(
nDLCI
);

1711 i‡(
≥v
->
nP¨am1
 =
UART_PS_RX_TIMER_ID
 && 
	`IS_PS_MODE_MUX
(
nDLCI
))

1714 
	`ATE_RódU∂ökD©aMux
(
NULL
, 0, 
TIMEOUT
, 
nDLCI
);

1716 i‡(
≥v
->
nP¨am1
 > 
UART_PS_3PLUS_TIMER_ID
 &&Öev->nP¨am1 <(UART_PS_3PLUS_TIMER_ID+
MAX_DLC_NUM
))

1718 
nDLCI
 = 
≥v
->
nP¨am1
 - 
UART_PS_3PLUS_TIMER_ID
;

1719 if(
	`IS_PS_MODE_MUX
(
nDLCI
))

1722 
	`ATE_H™dÀ3PlusTimîEvMux
(
nDLCI
);

1725 i‡(
≥v
->
nP¨am1
 =
ATE_LP_TIMER
)

1727 
	`AT_SëLPMode
(
TRUE
);

1729 #ifde‡
AT_USER_DBS


1730 i‡(
≥v
->
nP¨am1
 =
ATE_RING_TIMER
)

1732 
	`AT_Re£ndRögMux
(
nDLCI
);

1736 
	`AT_AsyncEvítPro˚ss
(
≥v
);

1740 i‡(
≥v
->
nP¨am1
 =
ATE_ASYNC_TIMER
)

1743 if(
	`AT_GëSètus
()==
AT_STATUS_IP_DATA
)

1745 
	`Ip_d©a_TimeOut
();

1749 
	`ATE_H™dÀTimeout
();

1754 i‡(
≥v
->
nP¨am1
 =
UART_PS_RX_TIMER_ID
 && 
	`IS_PS_MODE
())

1756 
	`ATE_RódU∂ökD©a
(
TIMEOUT
);

1758 i‡(
≥v
->
nP¨am1
 =
UART_PS_3PLUS_TIMER_ID
 && 
	`IS_PS_MODE
())

1761 
	`ATE_H™dÀ3PlusTimîEv
();

1763 i‡(
≥v
->
nP¨am1
 =
ATE_LP_TIMER
)

1765 
	`AT_SëLPMode
(
TRUE
);

1767 #ifde‡
AT_USER_DBS


1768 i‡(
≥v
->
nP¨am1
 =
ATE_RING_TIMER
)

1770 
	`AT_Re£ndRög
();

1774 
	`AT_AsyncEvítPro˚ss
(
≥v
);

1782 
	`AT_AsyncEvítPro˚ss
(
≥v
);

1788 
	}
}

1790 
	$SA_DeÁu…CmdH™dÀr_NŸSuµŸãd
(
AT_CMD_PARA
* 
pP¨am
 )

1792 
PAT_CMD_RESULT
 
pResu…
 = 
NULL
;

1796 
pResu…
 = 
	`AT_Cª©eRC
(
CMD_FUNC_FAIL
, 
CMD_RC_NOTSUPPORT
, 
ERR_AT_CME_OPERATION_NOT_SUPPORTED
,

1797 
CMD_ERROR_CODE_TYPE_CME
, 0, 
NULL
, 0, 
pP¨am
->
nDLCI
);

1799 
	`AT_NŸify2ATM
(
pResu…
, 
pP¨am
->
nDLCI
);

1801 i‡(
pResu…
 !
NULL
)

1803 
	`AT_FREE
(
pResu…
);

1804 
pResu…
 = 
NULL
;

1808 
	}
}

1810 
	$SA_DeÁu…CmdH™dÀr_CR
(
AT_CMD_PARA
* 
pP¨am
 )

1812 
PAT_CMD_RESULT
 
pResu…
 = 
NULL
;

1816 
pResu…
 = 
	`AT_Cª©eRC
(
CMD_FUNC_SUCC
, 
CMD_RC_CR
, 
ERR_AT_OK
, (
uöt8
)
CMD_ERROR_CODE_OK
, 0, 
NULL
, 0, 
pP¨am
->
nDLCI
);

1818 
	`AT_NŸify2ATM
(
pResu…
, 
pP¨am
->
nDLCI
);

1820 i‡(
pResu…
 !
NULL
)

1822 
	`AT_FREE
(
pResu…
);

1823 
pResu…
 = 
NULL
;

1827 
	}
}

1829 
	$SA_DeÁu…CmdH™dÀr_Eº‹
(
AT_CMD_PARA
* 
pP¨am
 )

1831 
PAT_CMD_RESULT
 
pResu…
 = 
NULL
;

1835 
pResu…
 = 
	`AT_Cª©eRC
(
CMD_FUNC_SUCC
, 
CMD_RC_ERROR
, 
ERR_AT_UNKNOWN
, 
CMD_ERROR_CODE_TYPE_CME
, 0, 
NULL
, 0, 
pP¨am
->
nDLCI
);

1837 
	`AT_NŸify2ATM
(
pResu…
, 
pP¨am
->
nDLCI
);

1839 i‡(
pResu…
 !
NULL
)

1841 
	`AT_FREE
(
pResu…
);

1842 
pResu…
 = 
NULL
;

1846 
	}
}

1848 
	$SA_DeÁu…CmdH™dÀr_AT
(
AT_CMD_PARA
* 
pP¨am
 )

1850 
PAT_CMD_RESULT
 
pResu…
 = 
NULL
;

1851 
uöt8
 
msg
[80];

1853 
pResu…
 = 
	`AT_Cª©eRC
(
CMD_FUNC_SUCC
, 
CMD_RC_OK
, 
ERR_AT_OK
, 
CMD_ERROR_CODE_OK
, 0, (
uöt8
*)
msg
, 0, 
pP¨am
->
nDLCI
);

1855 
	`AT_NŸify2ATM
(
pResu…
, 
pP¨am
->
nDLCI
);

1857 i‡(
pResu…
 !
NULL
)

1859 
	`AT_FREE
(
pResu…
);

1860 
pResu…
 = 
NULL
;

1864 
	}
}

	@D:\Projects\modem2.5g\branches\l4\navi\baseband\l4\at\engine\src\at_ta.c

13 
	~"©.h
"

14 
	~"©_cmd_gc.h
"

15 
	~"©_è.h
"

18 
pbk_ch£t_¥oc_way_t
 
cfg_GëPbkCh£tProcWay
();

19 
cfg_GëPbkCh£tProcWay
(
pbk_ch£t_¥oc_way_t
 
cs_pw
);

22 
boﬁ
 
ch¨£t_gsm2ascii
(
uöt8
 *
§c
, 
uöt16
 
¶í
, uöt8 *
d°
, uöt16 *
dÀn
);

23 
boﬁ
 
ch¨£t_gsm2ucs2
(
uöt8
 *
§c
, 
uöt16
 
¶í
, uöt8 *
d°
, uöt16 *
dÀn
);

24 
boﬁ
 
ch¨£t_gsm2gbk
(
uöt8
 *
§c
, 
uöt16
 
¶í
, uöt8 *
d°
, uöt16 *
dÀn
);

25 
boﬁ
 
ch¨£t_ascii2ucs2
(
uöt8
 *
§c
, 
uöt16
 
¶í
, uöt8 *
d°
, uöt16 *
dÀn
);

26 
boﬁ
 
ch¨£t_ucs2togbk
(
uöt8
 *
§c
, 
uöt16
 
¶í
, uöt8 *
d°
, uöt16 *
dÀn
);

27 
boﬁ
 
ch¨£t_gbk2ucs2
(
uöt8
 *
§c
, 
uöt16
 
¶í
, uöt8 *
d°
, uöt16 *
dÀn
);

31 
è_ch£t_c⁄vît_ªsu…_t
 
	$©e_TaC⁄vît
(
è_c⁄vît_mode_t
 
ds
, 
uöt8
 *
§c
, 
uöt16
 
¶í
, uöt8 *
d°
, uöt16 *
p_dÀn
)

33 
©_ch£t_t
 
ã_cs
, 
mt_cs
;

34  
cs_cvt_√edÀss
;

35 
ã_cs
 = 
	`cfg_GëTeCh£t
();

36 
mt_cs
 = 
	`cfg_GëMtCh£t
();

42 i‡(
ds
 =
mode_ã2mt
)

44 
ã_cs
)

47 
cs_gsm
:

49 
mt_cs
)

52 
cs_gsm
:

53  
cs_cvt_√edÀss
;

55 
cs_hex
:

56 
	`ch¨£t_gsm2ascii
(
§c
, 
¶í
, 
d°
, 
p_dÀn
);

57  
cs_cvt_okay
;

59 
cs_ucs2
:

60 
	`ch¨£t_gsm2ucs2
(
§c
, 
¶í
, 
d°
, 
p_dÀn
);

61  
cs_cvt_okay
;

63 
cs_gbk
:

64 
	`ch¨£t_gsm2gbk
(
§c
, 
¶í
, 
d°
, 
p_dÀn
);

65  
cs_cvt_okay
;

67 
cs_COUNT_
:

69 
cs_INVALID_
:

72  
cs_cvt_Áûed
;

77 
cs_hex
:

79 
mt_cs
)

82 
cs_gsm
:

83  
cs_cvt_Áûed
;

85 
cs_hex
:

86  
cs_cvt_√edÀss
;

88 
cs_ucs2
:

89 
	`ch¨£t_ascii2ucs2
(
§c
, 
¶í
, 
d°
, 
p_dÀn
);

90  
cs_cvt_okay
;

92 
cs_gbk
:

93  
cs_cvt_√edÀss
;

95 
cs_COUNT_
:

97 
cs_INVALID_
:

100  
cs_cvt_Áûed
;

105 
cs_ucs2
:

107 
mt_cs
)

110 
cs_gsm
:

111  
cs_cvt_Áûed
;

113 
cs_hex
:

114  
cs_cvt_Áûed
;

116 
cs_ucs2
:

117  
cs_cvt_√edÀss
;

119 
cs_gbk
:

120 
	`ch¨£t_ucs2togbk
(
§c
, 
¶í
, 
d°
, 
p_dÀn
);

121  
cs_cvt_okay
;

123 
cs_COUNT_
:

125 
cs_INVALID_
:

128  
cs_cvt_Áûed
;

133 
cs_gbk
:

135 
mt_cs
)

138 
cs_gsm
:

139  
cs_cvt_Áûed
;

141 
cs_hex
:

142  
cs_cvt_Áûed
;

144 
cs_ucs2
:

145 
	`ch¨£t_gbk2ucs2
(
§c
, 
¶í
, 
d°
, 
p_dÀn
);

146  
cs_cvt_okay
;

148 
cs_gbk
:

149  
cs_cvt_√edÀss
;

151 
cs_COUNT_
:

153 
cs_INVALID_
:

156  
cs_cvt_Áûed
;

161 
cs_COUNT_
:

163 
cs_INVALID_
:

166  
cs_cvt_Áûed
;

171 i‡(
ds
 =
mode_mt2ã
)

174 
mt_cs
)

177 
cs_gbk
:

179 
ã_cs
)

182 
cs_gsm
:

184 
cs_hex
:

185  
cs_cvt_Áûed
;

187 
cs_ucs2
:

188 
	`ch¨£t_gbk2ucs2
(
§c
, 
¶í
, 
d°
, 
p_dÀn
);

189  
cs_cvt_okay
;

191 
cs_gbk
:

192  
cs_cvt_√edÀss
;

194 
cs_COUNT_
:

196 
cs_INVALID_
:

199  
cs_cvt_Áûed
;

204 
cs_COUNT_
:

206 
cs_INVALID_
:

209  
cs_cvt_Áûed
;

213  
cs_cvt_INVALID_
;

214 
	}
}

216 
boﬁ
 
	$ch¨£t_gsm2ascii
(
uöt8
 *
§c
, 
uöt16
 
¶í
, uöt8 *
d°
, uöt16 *
dÀn
)

218 
öt32
 
r
 = 
	`SUL_GSM2ASCII
(
§c
, 
¶í
, 
d°
);

220 i‡(
r
 == -1)

222 *
dÀn
 = 0;

224  
FALSE
;

228 *
dÀn
 = (
uöt16
)
r
;

229  
TRUE
;

231 
	}
}

233 
boﬁ
 
	$ch¨£t_gsm2ucs2
(
uöt8
 *
§c
, 
uöt16
 
¶í
, uöt8 *
d°
, uöt16 *
dÀn
)

235 *
dÀn
 = 
	`SUL_GSM2UCS2
(
§c
, 
d°
, 
¶í
);

237 i‡(*
dÀn
 =0 || *dÀ¿=(
uöt16
) - 1)

240  
FALSE
;

243  
TRUE
;

244 
	}
}

246 
boﬁ
 
	$ch¨£t_gsm2gbk
(
uöt8
 *
§c
, 
uöt16
 
¶í
, uöt8 *
d°
, uöt16 *
dÀn
)

248 
öt32
 
r
 = 
	`SUL_GSM2ASCII
(
§c
, 
¶í
, 
d°
);

250 i‡(
r
 == -1)

252 *
dÀn
 = 0;

254  
FALSE
;

258 *
dÀn
 = (
uöt16
)
r
;

259  
TRUE
;

261 
	}
}

263 
boﬁ
 
	$ch¨£t_ascii2ucs2
(
uöt8
 *
§c
, 
uöt16
 
¶í
, uöt8 *
d°
, uöt16 *
dÀn
)

265 *
dÀn
 = 
	`SUL_GSM2UCS2
(
§c
, 
d°
, 
¶í
);

267 i‡(*
dÀn
 =0 || *dÀ¿=(
uöt16
) - 1)

270  
FALSE
;

273  
TRUE
;

274 
	}
}

276 
boﬁ
 
	$ch¨£t_ucs2togbk
(
uöt8
 *
§c
, 
uöt16
 
¶í
, uöt8 *
d°
, uöt16 *
dÀn
)

278 *
dÀn
 = 
	`AT_UtûUcs2ToGbk
(
§c
, 
¶í
, 
d°
);

280 i‡(*
dÀn
 == 0)

283  
FALSE
;

286  
TRUE
;

287 
	}
}

289 
boﬁ
 
	$ch¨£t_gbk2ucs2
(
uöt8
 *
§c
, 
uöt16
 
¶í
, uöt8 *
d°
, uöt16 *
dÀn
)

291 *
dÀn
 = 
	`AT_UtûGbk2Ucs2
(
§c
, 
¶í
, 
d°
);

293 i‡(*
dÀn
 == 0)

296  
FALSE
;

299  
TRUE
;

300 
	}
}

	@D:\Projects\modem2.5g\branches\l4\navi\baseband\l4\at\engine\src\at_uart.c

26 
	~"©.h
"

27 
	~"©_ß.h
"

28 
	~"©_u¨t.h
"

29 
	~"©_mux.h
"

30 
	~"©_moduÀ.h
"

31 
	~"cswty≥.h
"

32 
	~"cmn_defs.h
"

35 
	#LEAST_LEN1
 0x03

36 
	#LEAST_LEN2
 0x04

37 

	)

39 
	#SCM_REQ_CMD
 0x05

40 
	#SCM_REQ_SMS
 0x06

41 
	#SCM_GPRS_DATA
 0x07

42 
	#ERR_SCM_UNKNOWN_TYPE
 0x08

43 

	)

45 
	#AT_CMD_A
 0x41

46 
	#AT_CMD_a
 0x61

47 
	#AT_CMD_T
 0x54

48 
	#AT_CMD_t
 0x74

49 
	#AT_CMD_ThªePlus
 0x2B

50 
	#AT_CMD_SLASH
 0x2F

51 

	)

52 
	#HDLC_SYN_BYTE
 0x7E

53 

	)

55 
	#DATA_TO_AT_CL
 0x00

56 
	#DATA_TO_ATE
 0x01

57 

	)

59 
	#DATA_TO_PPP_CL
 0x00

60 
	#DATA_TO_PPP
 0x01

61 

	)

62 
	#DATA_TO_COM
 0x01

63 
	#DATA_TO_COM_CL
 0x00

64 

	)

65 
	#SCM_STATUS_READ_PREMIT
 0x01

66 
	#SCM_STATUS_WRITE_PREMIT
 (0x01 << 1)

67 
	#SCM_STATUS_BUSY
 (0x01 << 2)

68 
	#SCM_STATUS_CLOSE
 (0x01 << 3)

69 

	)

70 
	#CHECK_DATA_OF_GPRS
 0x01

	)

71 
	#CHECK_DATA_OF_FAX
 (0x01<<1)

	)

74 
	#UART_SEND_SUCCESS
 1

	)

75 
	#UART_SEND_FAIL
 2

	)

80 
	#RB_DATA_LEN
(
buff
, 
Àn
, 
r
, 
w
Ë((wË>‘Ë? (w )- (rË: (÷íË- (r)Ë+ (w))

	)

81 
	#RB_INC_IDX
(
Àn
, 
i
Ë((iË((iË=÷íË- 1 ? 0 : (iË+ 1))

	)

82 
	#RB_DEC_IDX
(
Àn
, 
i
Ë((iË((iË=0 ?Üí - 1 : (iË- 1))

	)

84 
	#MOD_BUFF_LEN
(
_vÆ
Ë((_vÆË& (
UART_PS_RX_BUFF_LEN
-1))

	)

85 
	#GET_DATA_BLOCK_LEN
(
_°¨t
,
_íd
,
_cy˛e
Ë((_°¨t<=_íd)?(_íd-_°¨t):(_íd+_cy˛ê- _°¨tË)

	)

87 
	s_UART_SEND_RESULE
 {

88 
uöt32
 
	muSídSètus
;

89 } 
	tUART_SEND_RESULE
, *
	tPUART_SEND_RESULE
, **
	tPPUART_SEND_RESULE
;

92 
	#UART_BAUDRATE_MAX_NUM
 6

	)

93 
HAL_UART_BAUD_RATE_T
 
	gg_UART_Cuºít_Baudøã
[
UART_BAUDRATE_MAX_NUM
] = { 
HAL_UART_BAUD_RATE_9600
,

94 
HAL_UART_BAUD_RATE_14400
,

95 
HAL_UART_BAUD_RATE_19200
,

96 
HAL_UART_BAUD_RATE_38400
,

97 
HAL_UART_BAUD_RATE_57600
,

98 
HAL_UART_BAUD_RATE_115200
};

99 
uöt8
 
	gg_u¨t_baudøã_ödex
 = 
UART_BAUDRATE_MAX_NUM
 - 1;

100 
boﬁ
 
	gg_u¨t_baudøã_check_ok
 = 
FALSE
;

101 
boﬁ
 
	grcv_Êow_hﬁd
 = 
FALSE
;

105 
UART_INFO_T
 
	gg_U¨tInfo
;

107 
uöt8
 
gInLPMode
;

112 
uöt8
 
	mTX_CúcuœrBuf
[
UART_PS_RX_BUFF_LEN
];

113 
uöt8
 
	mTX_Buf
[
UART_PS_RX_BUFF_LEN
];

114 
uöt16
 
	mGë
;

115 
uöt16
 
	mPut
;

116 
uöt8
 
	mNŸEm±y
;

117 }
	gg_Cúcuœr_Buf
;

121 
uöt8
 
	mCúcuBuf
[
UART_PS_RX_BUFF_LEN
];

122 
uöt8
 
	mFifoBuf
[
UART_MAX_FIFO_LEVEL
];

123 
uöt16
 
	mGë
;

124 
uöt16
 
	mPut
;

125 
uöt8
 
	mNŸEm±y
;

126 }
	gg_RxBuff
;

128 
UART_CFG
 
	gg_U¨tCfg
 = {

129 
UART_BAUD_RATE_115200
, 
UART_8_DATA_BITS
, 
UART_1_STOP_BIT
, 
UART_NO_PARITY
, 
UART_AFC_MODE_RX_FULL


133 
	#CSW_AT_TASK_HANDLE
 
	`COS_GëDeÁu…MmiTaskH™dÀ
()

	)

135 
	#START_RX_TIMER
() \

137 
	`COS_KûlTimî
(
g_hAtTask
, 
UART_PS_RX_TIMER_ID
); \

138 
	`COS_SëTimî
(
g_hAtTask
, 
UART_PS_RX_TIMER_ID
, 
COS_TIMER_MODE_SINGLE
, 
UART_PS_TIMER_ELPASE
); \

139 
g_U¨tInfo
.
fPsRxTimî
 = 
TRUE
; \

140 } 0)

	)

143 
	#STOP_RX_TIMER
() \

145 
	`COS_KûlTimî
(
g_hAtTask
, 
UART_PS_RX_TIMER_ID
); \

146 
g_U¨tInfo
.
fPsRxTimî
 = 
FALSE
; \

147 } 0)

	)

155 
check_cmd_suffix
();

156 
check_sms_d©a_èû
();

157 
uöt32
 
AT_GC_CfgGëEchoMode
(
uöt8
* 
pMode
);

158 
uöt16
 
ªad_d©a
();

159 
d©a_check_¥oc
();

161 #ifde‡
TEST_STUB_1


162 
°ub_ps_SídD©a2Aã
();

164 
PUBLIC
 
UINT32
 
HÆU¨tSídD©a
(
HAL_UART_ID_T
 
id
, 
CONST
 
UINT8
* 
d©a
, UINT32 
Àngth
);

165 
PUBLIC
 
UINT32
 
HÆU¨tGëD©a
(
HAL_UART_ID_T
 
id
, 
UINT8
* 
de°Addªss
, UINT32 
Àngth
);

166 
PUBLIC
 
hÆ_U¨tSëRts
(
HAL_UART_ID_T
 
id
, 
BOOL
 
ªady
);

167 
PUBLIC
 
BOOL
 
hÆ_u¨t_TxFöished
(
HAL_UART_ID_T
 
id
);

168 
PUBLIC
 
hÆ_U¨tFifoFlush
(
HAL_UART_ID_T
 
id
);

169 
PUBLIC
 
hÆ_U¨tCÀ¨Eº‹Sètus
(
HAL_UART_ID_T
 
id
);

170 
PUBLIC
 
hÆ_U¨tIrqSëMask
(
HAL_UART_ID_T
 
id
, 
HAL_UART_IRQ_STATUS_T
 
mask
);

171 
PUBLIC
 
hÆ_U¨tIrqSëH™dÀr
(
HAL_UART_ID_T
 
id
, 
HAL_UART_IRQ_HANDLER_T
 
h™dÀr
);

172 
PUBLIC
 
UINT8
 
hÆ_u¨t_RxFifoLevñ
(
HAL_UART_ID_T
 
id
);

173 
PUBLIC
 
hÆ_u¨t_PurgeFifo
(
HAL_UART_ID_T
 
id
);

180 
PUBLIC
 
UINT32
 
	$HÆU¨tSídD©a
(
HAL_UART_ID_T
 
id
, 
CONST
 
UINT8
* 
d©a
, 
UINT32
 
Àngth
)

182  
	`hÆ_U¨tSídD©a
(
HAL_UART_CH1
, 
d©a
, 
Àngth
);

183 
	}
}

186 
PUBLIC
 
UINT32
 
	$HÆU¨tGëD©a
(
HAL_UART_ID_T
 
id
, 
UINT8
* 
de°Addªss
, 
UINT32
 
Àngth
)

188  
	`hÆ_U¨tGëD©a
(
HAL_UART_CH1
, 
de°Addªss
, 
Àngth
);

189 
	}
}

191 
PUBLIC
 
	$hÆ_U¨tSëRts
(
HAL_UART_ID_T
 
id
, 
BOOL
 
ªady
)

194 
	}
}

196 
PUBLIC
 
BOOL
 
	$hÆ_u¨t_TxFöished
(
HAL_UART_ID_T
 
id
)

199  
TRUE
;

200 
	}
}

203 
PUBLIC
 
	$hÆ_U¨tFifoFlush
(
HAL_UART_ID_T
 
id
)

206 
	}
}

208 
PUBLIC
 
	$hÆ_U¨tCÀ¨Eº‹Sètus
(
HAL_UART_ID_T
 
id
)

211 
	}
}

214 
PUBLIC
 
	$hÆ_U¨tIrqSëMask
(
HAL_UART_ID_T
 
id
, 
HAL_UART_IRQ_STATUS_T
 
mask
)

217 
	}
}

220 
PUBLIC
 
	$hÆ_U¨tIrqSëH™dÀr
(
HAL_UART_ID_T
 
id
, 
HAL_UART_IRQ_HANDLER_T
 
h™dÀr
)

223 
	}
}

226 
PUBLIC
 
UINT8
 
	$hÆ_u¨t_RxFifoLevñ
(
HAL_UART_ID_T
 
id
)

229  
	`hÆ_U¨tGëRxBufLevñ
(
HAL_UART_CH1
);

230 
	}
}

232 
PUBLIC
 
	$hÆ_u¨t_PurgeFifo
(
HAL_UART_ID_T
 
id
)

235 
	}
}

253 
	#TC_RING_BUFF_INFO
(
rb
) \

256 } 0)

	)

284 
	$Pro˚ssLöeEdôögCh¨
(*
s
)

286 
ch
 = 0;

287 
öt32
 
i
 = 0, 
j
 = 0;

288 
size_t
 
n
 = 0;

289 
size_t
 
Àn
 = 0;

293 i‡(
s
 =
NULL
 || 
	`°æí
((const *)s) == 0)

296 
ch
 = 
	`AT_GC_CfgGëS5VÆue
();

299 
Àn
 = 
	`°æí
((c⁄° *)
s
);

302 
i
 = 
Àn
 - 1; i >= 0; i--)

307 i‡(
s
[
i
] =
ch
)

308 
n
++;

311 i‡(
n
 > 0)

313 
s
[
i
] = 
ch
;

314 
n
--;

320 
i
 = 0, 
j
 = 0;

322 
s
[
i
] != 0)

324 i‡(
s
[
i
] =
ch
)

325 
i
++;

327 
s
[
j
++] = s[
i
++];

331 
s
[
j
] = 0;

332 
	}
}

335 
HAL_UART_IRQ_STATUS_T
 
	m°
;

336 
uöt32
 
	msui
;

337 } 
	t°_ty≥
;

338 
°_ty≥
 
	gúq_°©us
;

339 
u8
 
hÆ_u¨t_RxFifoLevñ
(
HAL_UART_ID_T
 
u¨tId
);

340 #ifde‡
__2UART_SHARE_AT__


351 
uöt16
 
	$ªad_d©a_‰om_u¨t
(
HAL_UART_ID_T
 
pU¨t
)

353 
uöt8
 
rcvbuf„r
[
UART_MAX_FIFO_LEVEL
] = {0};

354 
uöt8
 
rcvÀn
 = 0;

355 
uöt16
 
rcvedÀn
 = 0;

356 
uöt16
 
tŸÆ_Àn
 = 0;

357 
uöt8
 
mode
 = 0;

364 
rcvÀn
 = 
	`hÆ_u¨t_RxFifoLevñ
(
pU¨t
);

366 i‡(
rcvÀn
 == 0)

369  
tŸÆ_Àn
;

373 
rcvedÀn
 = 
	`HÆU¨tGëD©a
(
pU¨t
, 
rcvbuf„r
, 16);

375 if((
g_u¨t_baudøã_check_ok
 =
FALSE
Ë&& (
rcvÀn
 > 2))

377 if(0x00 !
	`°r°r
(
rcvbuf„r
,"at") ||0x00 != strstr(rcvbuffer,"AT") )

380 
g_u¨t_baudøã_check_ok
 = 
TRUE
;

384 if(
g_u¨t_baudøã_ödex
 == 0)

386 
g_u¨t_baudøã_ödex
 = 
UART_BAUDRATE_MAX_NUM
;

389 
g_u¨t_baudøã_ödex
--;

390 
	`u¨t_Re›í
(
ds_low
);

395 
tŸÆ_Àn
 +
rcvedÀn
;

400 
	`AT_GC_CfgGëEchoMode
(&
mode
);

402 i‡(
mode
 == 1)

404 
uöt16
 
n
 = 
rcvedÀn
;

405 
uöt16
 
i
 = 0;

406 
uöt8
* 
p
 = 
rcvbuf„r
;

407 
n
 > 0)

409 
i
 = 
	`HÆU¨tSídD©a
(
pU¨t
, 
p
, 
n
);

410 
n
 -
i
;

411 
p
 +
i
;

420 i‡(
	`°æí
((c⁄° *)
g_U¨tInfo
.
rx_buff
Ë+ 
rcvedÀn
 >= (g_UartInfo.rx_buff))

422 
	`mem£t
(
g_U¨tInfo
.
rx_buff
, 0, (g_UartInfo.rx_buff));

423 
g_U¨tInfo
.
rx_buff_p
 = 0;

429 
	`mem˝y
(
g_U¨tInfo
.
rx_buff
 + g_U¨tInfo.
rx_buff_p
, 
rcvbuf„r
, 
rcvedÀn
);

431 
g_U¨tInfo
.
rx_buff_p
 +
rcvedÀn
;

433 
g_U¨tInfo
.
rx_buff
[g_U¨tInfo.
rx_buff_p
] = 0;

438 
	}
}

441 
	$úq_U¨t1Pro˚ss‹
(
HAL_UART_IRQ_STATUS_T
 
°©us
, 
HAL_UART_ERROR_STATUS_T
 
îr‹
)

443 
úq_°©us
.
sui
 = 0x00;

444 
úq_°©us
.
°
 = 
°©us
;

447 i‡(
°©us
.
rxD©aAvaûabÀ
 || sètus.
rxTimeout
)

449 
ªad_d©a_Àn
 = 
	`ªad_d©a_‰om_u¨t
(
HAL_UART_1
);

450 i‡(
ªad_d©a_Àn
 > 0)

452 if(
bMuxA˘iveSètus
)

456 
	`MUX_P¨£RecByãs
(
g_U¨tInfo
.
rx_buff
, 
ªad_d©a_Àn
, g_U¨tInfo.
d©a_Mode
);

457 
	`mem£t
(
g_U¨tInfo
.
rx_buff
, 0, (g_UartInfo.rx_buff));

458 
g_U¨tInfo
.
rx_buff_p
 = 0;

461 i‡(
g_U¨tInfo
.
d©a_Mode
 =
AT_STATUS_CMD_LINE
)

463 
g_U¨tInfo
.
rx_buff_p
 = 
	`°æí
((c⁄° *)g_U¨tInfo.
rx_buff
);

466 
	`d©a_check_¥oc
();

473 
	}
}

475 
	$úq_U¨t2Pro˚ss‹
(
HAL_UART_IRQ_STATUS_T
 
°©us
, 
HAL_UART_ERROR_STATUS_T
 
îr‹
)

477 
úq_°©us
.
sui
 = 0x00;

478 
úq_°©us
.
°
 = 
°©us
;

481 i‡(
°©us
.
rxD©aAvaûabÀ
 || sètus.
rxTimeout
)

483 i‡(
	`ªad_d©a_‰om_u¨t
(
HAL_UART_2
) > 0)

486 i‡(
g_U¨tInfo
.
d©a_Mode
 =
AT_STATUS_CMD_LINE
)

488 
g_U¨tInfo
.
rx_buff_p
 = 
	`°æí
((c⁄° *)g_U¨tInfo.
rx_buff
);

490 
	`d©a_check_¥oc
();

497 
	}
}

499 
uöt16
 
	$ªad_d©a_‰om_u¨t
(
HAL_UART_ID_T
 
pU¨t
)

501 
uöt8
 
rcvbuf„r
[
UART_MAX_FIFO_LEVEL
] = {0};

502 
uöt8
 
rcvÀn
 = 0;

503 
uöt16
 
rcvedÀn
 = 0;

504 
uöt16
 
tŸÆ_Àn
 = 0;

505 
uöt8
 
mode
 = 0;

512 
rcvÀn
 = 
	`hÆ_u¨t_RxFifoLevñ
(
pU¨t
);

514 i‡(
rcvÀn
 == 0)

519  
tŸÆ_Àn
;

523 
rcvedÀn
 = 
	`HÆU¨tGëD©a
(
pU¨t
, 
rcvbuf„r
, 16);

525 if((
g_u¨t_baudøã_check_ok
 =
FALSE
Ë&& (
rcvÀn
 > 2))

528 if(0x00 !
	`°r°r
(
rcvbuf„r
,"at") ||0x00 != strstr(rcvbuffer,"AT") )

531 
g_u¨t_baudøã_check_ok
 = 
TRUE
;

535 if(
g_u¨t_baudøã_ödex
 == 0)

537 
g_u¨t_baudøã_ödex
 = 
UART_BAUDRATE_MAX_NUM
;

540 
g_u¨t_baudøã_ödex
--;

541 
	`u¨t_Re›í
(
ds_low
);

546 
tŸÆ_Àn
 +
rcvedÀn
;

551 
	`AT_GC_CfgGëEchoMode
(&
mode
);

553 i‡(
mode
 == 1)

555 
uöt16
 
n
 = 
rcvedÀn
;

556 
uöt16
 
i
 = 0;

557 
uöt8
* 
p
 = 
rcvbuf„r
;

558 
n
 > 0)

560 
i
 = 
	`HÆU¨tSídD©a
(
pU¨t
, 
p
, 
n
);

561 
n
 -
i
;

562 
p
 +
i
;

571 i‡(
	`°æí
((c⁄° *)
g_U¨tInfo
.
rx_buff
Ë+ 
rcvedÀn
 >= (g_UartInfo.rx_buff))

573 
	`mem£t
(
g_U¨tInfo
.
rx_buff
, 0, (g_UartInfo.rx_buff));

574 
g_U¨tInfo
.
rx_buff_p
 = 0;

580 
	`mem˝y
(
g_U¨tInfo
.
rx_buff
 + g_U¨tInfo.
rx_buff_p
, 
rcvbuf„r
, 
rcvedÀn
);

582 
g_U¨tInfo
.
rx_buff_p
 +
rcvedÀn
;

584 
g_U¨tInfo
.
rx_buff
[g_U¨tInfo.
rx_buff_p
] = 0;

590 
	}
}

592 
uöt16
 
	$ªad_d©a
()

594 
uöt8
 
rcvbuf„r
[
UART_MAX_FIFO_LEVEL
] = {0};

595 
uöt8
 
rcvÀn
 = 0;

596 
uöt16
 
rcvedÀn
 = 0;

597 
uöt16
 
tŸÆ_Àn
 = 0;

598 
uöt8
 
mode
 = 0;

605 
rcvÀn
 = 
	`hÆ_u¨t_RxFifoLevñ
((
HAL_UART_ID_T
 )
g_U¨tInfo
.
Scom_U¨tId
);

607 i‡(
rcvÀn
 == 0)

610 
g_U¨tInfo
.
rx_buff
[g_U¨tInfo.
rx_buff_p
] = 0;

612  
tŸÆ_Àn
;

616 
rcvedÀn
 = 
	`HÆU¨tGëD©a
(
g_U¨tInfo
.
Scom_U¨tId
, 
rcvbuf„r
, 16);

617 if(
g_u¨t_baudøã_check_ok
 =
FALSE
)

619 if((
rcvbuf„r
[0] == 0x41 &&Ñcvbuffer[1] == 0x54) || (rcvbuffer[0] == 0x61 &&Ñcvbuffer[1] == 0x74))

621 
g_u¨t_baudøã_check_ok
 = 
TRUE
;

625 if(
g_u¨t_baudøã_ödex
 == 0)

626 
g_u¨t_baudøã_ödex
 = 
UART_BAUDRATE_MAX_NUM
;

627 
g_u¨t_baudøã_ödex
--;

628 
	`u¨t_Re›í
(
ds_low
);

633 
tŸÆ_Àn
 +
rcvedÀn
;

637 if(!
bMuxA˘iveSètus
)

640 
	`AT_GC_CfgGëEchoMode
(&
mode
);

642 i‡(
mode
 == 1)

644 
	`HÆU¨tSídD©a
(
g_U¨tInfo
.
Scom_U¨tId
, 
rcvbuf„r
, 
rcvedÀn
);

653 i‡(
	`°æí
((c⁄° *)
g_U¨tInfo
.
rx_buff
Ë+ 
rcvedÀn
 >= (g_UartInfo.rx_buff))

655 
	`mem£t
(
g_U¨tInfo
.
rx_buff
, 0, (g_UartInfo.rx_buff));

656 
g_U¨tInfo
.
rx_buff_p
 = 0;

662 
	`mem˝y
(
g_U¨tInfo
.
rx_buff
 + g_U¨tInfo.
rx_buff_p
, 
rcvbuf„r
, 
rcvedÀn
);

664 
g_U¨tInfo
.
rx_buff_p
 +
rcvedÀn
;

670 
	}
}

672 
	$úq_¥o˚ss‹
(
HAL_UART_IRQ_STATUS_T
 
°©us
, 
HAL_UART_ERROR_STATUS_T
 
îr‹
)

679 if(
°©us
.
rxD©aAvaûabÀ
 || sètus.
rxTimeout
)

680 
°©us
 = (°©u†& 0xFFË| (
	`hÆ_U¨tGëEº‹Sètus
(
g_U¨tInfo
.
Scom_U¨tId
) & 0xFF00);

681 i‡((
°©us
 & 
HAL_UART_MASK_RX
Ë!0 || (°©u†& 
HAL_UART_MASK_TIMEOUT
) != 0)

682 i‡((
°©us
 & 
HAL_UART_MASK_RX
Ë!0 || (°©u†& 
HAL_UART_IRQ_STATUS_RXTIMEOUT
) != 0)

683 if–
°©us
.
rxTimeout
)

686 i‡(
°©us
.
rxD©aAvaûabÀ
 || sètus.
rxTimeout
)

689 if(
	`ªad_d©a_‰om_u¨t
(
HAL_UART_CH1
) > 0)

691 
	`Pro˚ssLöeEdôögCh¨
(
g_U¨tInfo
.
rx_buff
);

695 i‡(
g_U¨tInfo
.
d©a_Mode
 =
AT_STATUS_CMD_LINE
)

697 
g_U¨tInfo
.
rx_buff_p
 = 
	`°æí
((c⁄° *)g_U¨tInfo.
rx_buff
);

701 
	`d©a_check_¥oc
();

712 
	}
}

721 #i‡(
LF_PATCH
 == 1)

732 
	$DisˇrdSuffixLF
()

734 i‡(
	`°æí
((c⁄° *)
g_U¨tInfo
.
rx_buff
Ë=1 && g_U¨tInfo.rx_buff[0] =
AT_CMD_LF
)

736 
	`mem£t
(
g_U¨tInfo
.
rx_buff
, 0, 
AT_CMD_LINE_BUFF_LEN
);

737 
g_U¨tInfo
.
rx_buff_p
 = 0;

739 
	}
}

744 
	$d©a_check_¥oc
()

746 if(!
bMuxA˘iveSètus
)

749 #i‡(
LF_PATCH
 == 1)

750 
	`DisˇrdSuffixLF
();

753 i‡(
g_U¨tInfo
.
d©a_Mode
 =
AT_STATUS_CMD_LINE
)

755 
	`Pro˚ssLöeEdôögCh¨
(
g_U¨tInfo
.
rx_buff
);

769 if(
g_U¨tInfo
.
d©a_Mode
 =
AT_STATUS_CMD_LINE
)

772 
	`check_cmd_suffix
();

776 
	`check_sms_d©a_èû
();

781 
	}
}

783 
	$Ip_d©a_TimeOut
()

785 
PUART_DATA
 
pU¨tD©a
 = 
NULL
;

786 
uöt16
 
D©a_Lí
;

787 
COS_EVENT
 
evít
 = {0};

788 
boﬁ
 
r
 = 
FALSE
;

791 if(
g_U¨tInfo
.
rx_buff_p
==0)

793 
D©a_Lí
=
g_U¨tInfo
.
rx_buff_p
 + 1;

794 
pU¨tD©a
 = 
	`AT_MALLOC
((
UART_DATA
Ë+
D©a_Lí
 );

795 
	`mem£t
(
pU¨tD©a
, 0, (
UART_DATA
Ë+ 
D©a_Lí
);

797 
pU¨tD©a
->
D©aLí
 = (
uöt32
)
D©a_Lí
;

798 
	`mem˝y
(
pU¨tD©a
->
D©aBuf
, 
g_U¨tInfo
.
rx_buff
, g_U¨tInfo.
rx_buff_p
);

799 
pU¨tD©a
->
D©aBuf
[
g_U¨tInfo
.
rx_buff_p
]=
AT_CMD_CTRL_Z
;

800 
evít
.
nEvítId
 = 
EV_DM_UART_RECEIVE_DATA_IND
;

801 
evít
.
nP¨am1
 = (
uöt32
)(
pU¨tD©a
);

802 
evít
.
nP¨am2
 = 0;

803 
evít
.
nP¨am3
 = 0;

805 
r
 = 
	`COS_SídEvít
(
CSW_AT_TASK_HANDLE
, &
evít
, 
COS_WAIT_FOREVER
, 
COS_EVENT_PRI_NORMAL
);

807 i‡(
r
 =
TRUE
)

816 
	`mem£t
(
g_U¨tInfo
.
rx_buff
, 0, (g_UartInfo.rx_buff));

818 
g_U¨tInfo
.
rx_buff_p
 = 0;

819 
	}
}

821 
	$Ip_d©a_TimeOutMux
(
uöt8
 
nDLCI
)

823 
PUART_DATA
 
pU¨tD©a
 = 
NULL
;

824 
uöt16
 
D©a_Lí
;

825 
COS_EVENT
 
evít
 = {0};

826 
boﬁ
 
r
 = 
FALSE
;

829 if(
g_U¨tInfo
.
rx_buff_p
==0)

831 
D©a_Lí
=
g_U¨tInfo
.
rx_buff_p
 + 1;

832 
pU¨tD©a
 = 
	`AT_MALLOC
((
UART_DATA
Ë+
D©a_Lí
 );

833 
	`mem£t
(
pU¨tD©a
, 0, (
UART_DATA
Ë+ 
D©a_Lí
);

835 
pU¨tD©a
->
D©aLí
 = (
uöt32
)
D©a_Lí
;

836 
	`mem˝y
(
pU¨tD©a
->
D©aBuf
, 
g_U¨tInfo
.
rx_buff
, g_U¨tInfo.
rx_buff_p
);

837 
pU¨tD©a
->
D©aBuf
[
g_U¨tInfo
.
rx_buff_p
]=
AT_CMD_CTRL_Z
;

838 
evít
.
nEvítId
 = 
EV_DM_UART_RECEIVE_DATA_IND
;

839 
evít
.
nP¨am1
 = (
uöt32
)(
pU¨tD©a
);

840 
evít
.
nP¨am2
 = 
nDLCI
 << 8|
CTRL_FIELD_UIH
;

841 
evít
.
nP¨am3
 = 0;

843 
r
 = 
	`COS_SídEvít
(
CSW_AT_TASK_HANDLE
, &
evít
, 
COS_WAIT_FOREVER
, 
COS_EVENT_PRI_NORMAL
);

845 i‡(
r
 =
TRUE
)

854 
	`mem£t
(
g_U¨tInfo
.
rx_buff
, 0, (g_UartInfo.rx_buff));

856 
g_U¨tInfo
.
rx_buff_p
 = 0;

857 
	}
}

866 
boﬁ
 
	$födchr
(c⁄° *
p
, 
c
)

868 c⁄° *
¥
 = 
p
;

869 *
¥
 !=0x00)

871 i‡(*
¥
 =
c
)

873  
TRUE
;

875 
¥
++;

879  
FALSE
;

881 
	}
}

886 
	$check_cmd_suffix
()

888 
PUART_DATA
 
pU¨tD©a
 = 
NULL
;

889 
COS_EVENT
 
evít
 = {0};

890 
boﬁ
 
r
 = 
FALSE
;

891 
uöt8
 
S3Së
 = 0;

901 
S3Së
 = 
	`AT_GC_CfgGëS3VÆue
();

910 i‡(
	`födchr
((c⁄° *)
g_U¨tInfo
.
rx_buff
, ()
S3Së
Ë=
FALSE
 &&

911 
	`°r°r
((c⁄° *)
g_U¨tInfo
.
rx_buff
, (const *)"A/") == 0 &&

912 
	`°r°r
((c⁄° *)
g_U¨tInfo
.
rx_buff
, (const *)"a/") == 0)

921 i‡(
	`°æí
((c⁄° *)
g_U¨tInfo
.
rx_buff
Ë=1 && g_U¨tInfo.rx_buff[0] =
S3Së
)

923 
œb_CÀ¨RxBuf„r
;

927 
pU¨tD©a
 = 
	`AT_MALLOC
((
UART_DATA
Ë+ 
	`°æí
((c⁄° *)
g_U¨tInfo
.
rx_buff
) + 1);

929 
	`mem£t
(
pU¨tD©a
, 0, (
UART_DATA
Ë+ 
	`°æí
((c⁄° *)
g_U¨tInfo
.
rx_buff
) + 1);

931 
pU¨tD©a
->
D©aLí
 = (
uöt32
)
	`°æí
((c⁄° *)
g_U¨tInfo
.
rx_buff
);

933 
	`mem˝y
(
pU¨tD©a
->
D©aBuf
, 
g_U¨tInfo
.
rx_buff
,ÖU¨tD©a->
D©aLí
);

935 
evít
.
nEvítId
 = 
EV_DM_UART_RECEIVE_DATA_IND
;

937 
evít
.
nP¨am1
 = (
uöt32
)(
pU¨tD©a
);

939 
evít
.
nP¨am2
 = 0;

941 
evít
.
nP¨am3
 = 0;

944 
	`sxr_Síd
(&
evít
, 
CMN_AT
, 
SXR_SEND_MSG
);

946 i‡(
r
 =
TRUE
)

955 
œb_CÀ¨RxBuf„r
:

958 
	`mem£t
(
g_U¨tInfo
.
rx_buff
, 0, (g_UartInfo.rx_buff));

959 
g_U¨tInfo
.
rx_buff_p
 = 0;

960 
	}
}

964 
	$check_sms_d©a_èû
()

966 
uöt8
 *
p
 = 
NULL
;

968 
	`AT_TC_ENTER_FUNC
(
g_sw_UART
);

977 
p
 = 
g_U¨tInfo
.
rx_buff
;

979 
p
 < 
g_U¨tInfo
.
rx_buff
 + g_U¨tInfo.
rx_buff_p
)

982 i‡(*
p
 =
AT_CMD_CTRL_Z
 || *∞=
AT_CMD_ESC
 || *∞=
AT_CMD_CR
)

984 
PUART_DATA
 
pU¨tD©a
 = 
NULL
;

985 
COS_EVENT
 
evít
 = { 0 };

986 
boﬁ
 
r
 = 
FALSE
;

988 
	`AT_TC
(
g_sw_UART
, "Found ^Z/ESC character in Rx buffer.");

990 
pU¨tD©a
 = 
	`AT_MALLOC
((
UART_DATA
Ë+ 
p
 - 
g_U¨tInfo
.
rx_buff
 + 1);

991 
	`mem£t
(
pU¨tD©a
, 0, (
UART_DATA
Ë+ 
p
 - 
g_U¨tInfo
.
rx_buff
 + 1);

993 
pU¨tD©a
->
D©aLí
 = (
uöt32
)(
p
 - 
g_U¨tInfo
.
rx_buff
 + 1);

994 
	`mem˝y
(
pU¨tD©a
->
D©aBuf
, 
g_U¨tInfo
.
rx_buff
, 
p
 - g_UartInfo.rx_buff + 1);

996 
evít
.
nEvítId
 = 
EV_DM_UART_RECEIVE_DATA_IND
;

997 
evít
.
nP¨am1
 = (
uöt32
)(
pU¨tD©a
);

998 
evít
.
nP¨am2
 = 0;

999 
evít
.
nP¨am3
 = 0;

1004 
r
 = 
	`COS_SídEvít
(
CSW_AT_TASK_HANDLE
, &
evít
, 
COS_WAIT_FOREVER
, 
COS_EVENT_PRI_NORMAL
);

1006 i‡(
r
 =
TRUE
)

1008 
	`AT_TC
(
g_sw_UART
, "Sent dataÅo ATE by sendingán COS messageÅoÅhe ATEÅask; .nEventId=%u,nParam1=%u",

1009 
evít
.
nEvítId
,Évít.
nP¨am1
);

1013 
	`AT_TC
(
g_sw_UART
, "CÆ»COS_SídEvít(ËÁûed,Üa°Éº‹=0x%08x.", 
	`COS_GëLa°Eº‹
());

1016 
	`mem£t
(
g_U¨tInfo
.
rx_buff
, 0, (g_UartInfo.rx_buff));

1018 
g_U¨tInfo
.
rx_buff_p
 = 0;

1021 
p
++;

1023 
	}
}

1026 
uöt8
 
gIPSídFœg
;

1027 
uöt16
 
gIPSídLí
;

1028 
	$check_sms_d©a_èû
()

1030 
uöt8
* 
p
 = 
NULL
;

1031 
PUART_DATA
 
pU¨tD©a
 = 
NULL
;

1032 
COS_EVENT
 
evít
 = { 0 };

1033 
boﬁ
 
r
 = 
FALSE
;

1044 
p
 = 
g_U¨tInfo
.
rx_buff
;

1046 
p
 < 
g_U¨tInfo
.
rx_buff
 + g_U¨tInfo.
rx_buff_p
)

1049 i‡((
gIPSídFœg
 =1Ë&& ((
p
 - 
g_U¨tInfo
.
rx_buff
 + 1Ë=
gIPSídLí
))

1053 
pU¨tD©a
 = 
	`AT_MALLOC
((
UART_DATA
Ë+ 
p
 - 
g_U¨tInfo
.
rx_buff
 + 1 + 1);

1054 
	`mem£t
(
pU¨tD©a
, 0, (
UART_DATA
Ë+ 
p
 - 
g_U¨tInfo
.
rx_buff
 + 1 + 1);

1056 
pU¨tD©a
->
D©aLí
 = (
uöt32
)(
p
 - 
g_U¨tInfo
.
rx_buff
 + 1 + 1);

1057 
	`mem˝y
(
pU¨tD©a
->
D©aBuf
, 
g_U¨tInfo
.
rx_buff
, 
p
 - g_UartInfo.rx_buff + 1);

1060 
pU¨tD©a
->
D©aBuf
[
p
 - 
g_U¨tInfo
.
rx_buff
 + 1] = 
AT_CMD_CR
;

1062 
evít
.
nEvítId
 = 
EV_DM_UART_RECEIVE_DATA_IND
;

1063 
evít
.
nP¨am1
 = (
uöt32
)(
pU¨tD©a
);

1064 
evít
.
nP¨am2
 = 0;

1065 
evít
.
nP¨am3
 = 0;

1068 
	`sxr_Síd
(&
evít
, 
CMN_AT
, 
SXR_SEND_MSG
);

1070 i‡(
r
 =
TRUE
)

1079 
	`mem£t
(
g_U¨tInfo
.
rx_buff
, 0, (g_UartInfo.rx_buff));

1081 
g_U¨tInfo
.
rx_buff_p
 = 0;

1087 #i‚de‡
AT_USER_DBS


1088 i‡(*
p
 =
AT_CMD_CTRL_Z
 || *∞=
AT_CMD_ESC
|| *∞=
AT_CMD_CR
)

1093 
pU¨tD©a
 = 
	`AT_MALLOC
((
UART_DATA
Ë+ 
p
 - 
g_U¨tInfo
.
rx_buff
 + 1);

1094 
	`mem£t
(
pU¨tD©a
, 0, (
UART_DATA
Ë+ 
p
 - 
g_U¨tInfo
.
rx_buff
 + 1);

1096 
pU¨tD©a
->
D©aLí
 = (
uöt32
)(
p
 - 
g_U¨tInfo
.
rx_buff
 + 1);

1097 
	`mem˝y
(
pU¨tD©a
->
D©aBuf
, 
g_U¨tInfo
.
rx_buff
, 
p
 - g_UartInfo.rx_buff + 1);

1099 
evít
.
nEvítId
 = 
EV_DM_UART_RECEIVE_DATA_IND
;

1100 
evít
.
nP¨am1
 = (
uöt32
)(
pU¨tD©a
);

1101 
evít
.
nP¨am2
 = 0;

1102 
evít
.
nP¨am3
 = 0;

1104 
r
 = 
	`COS_SídEvít
(
CSW_AT_TASK_HANDLE
, &
evít
, 
COS_WAIT_FOREVER
, 
COS_EVENT_PRI_NORMAL
);

1106 i‡(
r
 =
TRUE
)

1115 
	`mem£t
(
g_U¨tInfo
.
rx_buff
, 0, (g_UartInfo.rx_buff));

1117 
g_U¨tInfo
.
rx_buff_p
 = 0;

1121 
p
++;

1123 
	}
}

1131 
	$u¨t_DmaSídD©a_to_HÆ
(
ö
)

1133 
uöt16
 
Block_Lí
, 
Fú°_hÆf
, 
Sec⁄d_hÆf
, 
ªÆ_Àn
, 
ªÆ_£¡_Àn
, 
tmp_Gë
;

1134 
ªÆ_£¡_Àn
 = 0;

1135 
Block_Lí
 = 
	`GET_DATA_BLOCK_LEN
(
g_Cúcuœr_Buf
.
Gë
, g_Cúcuœr_Buf.
Put
, 
UART_PS_RX_BUFF_LEN
);

1137 i‡((
Block_Lí
 =0Ë&& (
g_Cúcuœr_Buf
.
NŸEm±y
))

1139 
Block_Lí
 = 
UART_PS_RX_BUFF_LEN
;

1142 
ªÆ_Àn
 = (
Block_Lí
 < 
UART_MAX_ONE_DMA_LEN
) ? Block_Len : UART_MAX_ONE_DMA_LEN;

1144 i‡(
ªÆ_Àn
 > 0)

1147 i‡(
g_Cúcuœr_Buf
.
Gë
 < g_Cúcuœr_Buf.
Put
)

1149 
	`mem˝y
(
g_Cúcuœr_Buf
.
TX_Buf
, &g_Cúcuœr_Buf.
TX_CúcuœrBuf
[g_Cúcuœr_Buf.
Gë
], 
ªÆ_Àn
);

1150 
tmp_Gë
 = 
	`MOD_BUFF_LEN
(
g_Cúcuœr_Buf
.
Gë
 + 
ªÆ_Àn
);

1155 
Fú°_hÆf
 = 
UART_PS_RX_BUFF_LEN
 - 
g_Cúcuœr_Buf
.
Gë
;

1157 i‡(
ªÆ_Àn
 < 
Fú°_hÆf
)

1159 
	`mem˝y
(
g_Cúcuœr_Buf
.
TX_Buf
, &g_Cúcuœr_Buf.
TX_CúcuœrBuf
[g_Cúcuœr_Buf.
Gë
], 
ªÆ_Àn
);

1160 
tmp_Gë
 = 
	`MOD_BUFF_LEN
(
g_Cúcuœr_Buf
.
Gë
 + 
ªÆ_Àn
);

1164 
	`mem˝y
(
g_Cúcuœr_Buf
.
TX_Buf
, &g_Cúcuœr_Buf.
TX_CúcuœrBuf
[g_Cúcuœr_Buf.
Gë
], 
Fú°_hÆf
);

1165 
Sec⁄d_hÆf
 = 
ªÆ_Àn
 - 
Fú°_hÆf
;

1166 
tmp_Gë
 = 
	`MOD_BUFF_LEN
(
g_Cúcuœr_Buf
.
Gë
 + 
Fú°_hÆf
);

1168 
	`mem˝y
(&
g_Cúcuœr_Buf
.
TX_Buf
[
Fú°_hÆf
], &g_Cúcuœr_Buf.
TX_CúcuœrBuf
[
tmp_Gë
], 
Sec⁄d_hÆf
);

1169 
tmp_Gë
 = 
	`MOD_BUFF_LEN
—mp_Gë + 
Sec⁄d_hÆf
);

1172 #ifde‡
__2UART_SHARE_AT__


1173 
ªÆ_£¡_Àn
 = 
	`HÆU¨tSídD©a
(
HAL_UART_1
, 
g_Cúcuœr_Buf
.
TX_Buf
, 
ªÆ_Àn
);

1174 
ªÆ_£¡_Àn
 = 
	`HÆU¨tSídD©a
(
HAL_UART_2
, 
g_Cúcuœr_Buf
.
TX_Buf
, 
ªÆ_Àn
);

1177 
ªÆ_£¡_Àn
 = 
	`HÆU¨tSídD©a
(
g_U¨tInfo
.
Scom_U¨tId
, 
g_Cúcuœr_Buf
.
TX_Buf
, 
ªÆ_Àn
);

1179 
g_Cúcuœr_Buf
.
Gë
 = 
tmp_Gë
;

1181 i‡(
g_Cúcuœr_Buf
.
Gë
 =g_Cúcuœr_Buf.
Put
)

1182 
g_Cúcuœr_Buf
.
NŸEm±y
 = 0;

1187 
	}
}

1189 #ifde‡
__2UART_SHARE_AT__


1190 
	$u¨t_id_Re˚iveD©a_‰om_HÆ
(
HAL_UART_ID_T
 
id
)

1192 
uöt16
 
Block_Lí
, 
Remaö_Lí
, 
ªÆ_Lí
, 
Fú°_hÆf
, 
Sec⁄d_hÆf
, 
uD©aSize
;

1194 
uD©aSize
 = 
	`HÆU¨tGëD©a
(
id
, 
g_RxBuff
.
FifoBuf
, 
UART_MAX_FIFO_LEVEL
);

1195 
Block_Lí
 = 
	`GET_DATA_BLOCK_LEN
(
g_RxBuff
.
Gë
, g_RxBuff.
Put
, 
UART_PS_RX_BUFF_LEN
);

1197 i‡((
Block_Lí
 =0Ë&& (
g_RxBuff
.
NŸEm±y
))

1199 
Block_Lí
 = 
UART_PS_RX_BUFF_LEN
;

1202 
Remaö_Lí
 = 
UART_PS_RX_BUFF_LEN
 - 
Block_Lí
;

1203 
ªÆ_Lí
 = (
uD©aSize
 < 
Remaö_Lí
) ? uDataSize : Remain_Len;

1205 i‡(
ªÆ_Lí
 != 0)

1207 i‡(
g_RxBuff
.
Put
 < g_RxBuff.
Gë
)

1209 
	`mem˝y
(&
g_RxBuff
.
CúcuBuf
[g_RxBuff.
Put
], g_RxBuff.
FifoBuf
, 
ªÆ_Lí
);

1210 
g_RxBuff
.
Put
 = 
	`MOD_BUFF_LEN
(g_RxBuff.Puà+ 
ªÆ_Lí
);

1214 
Fú°_hÆf
 = 
UART_PS_RX_BUFF_LEN
 - 
g_RxBuff
.
Put
;

1216 i‡(
ªÆ_Lí
 < 
Fú°_hÆf
)

1218 
	`mem˝y
(&
g_RxBuff
.
CúcuBuf
[g_RxBuff.
Put
], g_RxBuff.
FifoBuf
, 
ªÆ_Lí
);

1219 
g_RxBuff
.
Put
 = 
	`MOD_BUFF_LEN
(g_RxBuff.Puà+ 
ªÆ_Lí
);

1223 
	`mem˝y
(&
g_RxBuff
.
CúcuBuf
[g_RxBuff.
Put
], g_RxBuff.
FifoBuf
, 
Fú°_hÆf
);

1224 
Sec⁄d_hÆf
 = 
ªÆ_Lí
 - 
Fú°_hÆf
;

1225 
g_RxBuff
.
Put
 = 
	`MOD_BUFF_LEN
(g_RxBuff.Puà+ 
Fú°_hÆf
);

1227 
	`mem˝y
(&
g_RxBuff
.
CúcuBuf
[g_RxBuff.
Put
], &g_RxBuff.
FifoBuf
[
Fú°_hÆf
], 
Sec⁄d_hÆf
);

1228 
g_RxBuff
.
Put
 = 
	`MOD_BUFF_LEN
(g_RxBuff.Puà+ 
Sec⁄d_hÆf
);

1234 
g_RxBuff
.
NŸEm±y
 = 1;

1241 
	}
}

1243 
	$úq_U¨t1PsMode
(
HAL_UART_IRQ_STATUS_T
 
°©us
, 
HAL_UART_ERROR_STATUS_T
 
îr‹
)

1245 
úq_°©us
.
sui
 = 0x00;

1246 
úq_°©us
.
°
 = 
°©us
;

1248 i‡(
°©us
.
rxD©aAvaûabÀ
 || sètus.
rxTimeout
)

1250 
öt16
 
Block_Lí
;

1252 
	`u¨t_id_Re˚iveD©a_‰om_HÆ
(
HAL_UART_1
);

1253 
Block_Lí
 = 
	`GET_DATA_BLOCK_LEN
(
g_RxBuff
.
Gë
, g_RxBuff.
Put
, 
UART_PS_RX_BUFF_LEN
);

1255 i‡((
Block_Lí
 =0Ë&& (
g_RxBuff
.
NŸEm±y
))

1257 
Block_Lí
 = 
UART_PS_RX_BUFF_LEN
;

1259 if(
Block_Lí
 > 0 && 
bMuxA˘iveSètus
)

1261 
uöt8
 *
pBuff
 = 
NULL
;

1262 
uöt16
 
uSize
 = 0;

1265 
uSize
 = 
	`u¨t_PsRódRxD©a
(
NULL
, 0);

1268 
pBuff
 = 
	`AT_MALLOC
(
uSize
);

1270 
	`mem£t
(
pBuff
, 0, 
uSize
);

1273 
uSize
 = 
	`u¨t_PsRódRxD©a
(
pBuff
, uSize);

1275 i‡(
uSize
 == 0)

1277 
	`AT_FREE
(
pBuff
);

1280 
	`MUX_P¨£RecByãs
(
pBuff
, 
uSize
, 0xFF);

1281 
	`AT_FREE
(
pBuff
);

1286 i‡(
Block_Lí
 > 
UART_PS_RX_BUFF_LEN
 / 2)

1288 
COS_EVENT
 
evít
 = {0};

1290 
	`STOP_RX_TIMER
();

1291 
evít
.
nEvítId
 = 
EV_DM_UART_RECEIVE_DATA_IND
;

1292 i‡(
rcv_Êow_hﬁd
 =
FALSE
)

1294 
	`hÆ_U¨tSëRts
(
HAL_UART_1
, 
FALSE
);

1295 
rcv_Êow_hﬁd
 = 
TRUE
;

1297 i‡(
	`COS_SídEvít
(
CSW_AT_TASK_HANDLE
, &
evít
, 
COS_WAIT_FOREVER
, 
COS_EVENT_PRI_NORMAL
Ë=
FALSE
)

1305 i‡(
g_U¨tInfo
.
fPsRxTimî
 =
FALSE
)

1306 
	`START_RX_TIMER
();

1310 i‡(
°©us
.
txDmaD⁄e
)

1316 
	`u¨t_DmaSídD©a_to_HÆ
(0);

1320 
	}
}

1321 
	$úq_U¨t2PsMode
(
HAL_UART_IRQ_STATUS_T
 
°©us
, 
HAL_UART_ERROR_STATUS_T
 
îr‹
)

1323 
úq_°©us
.
sui
 = 0x00;

1324 
úq_°©us
.
°
 = 
°©us
;

1326 i‡(
°©us
.
rxD©aAvaûabÀ
 || sètus.
rxTimeout
)

1328 
öt16
 
Block_Lí
;

1330 
	`u¨t_id_Re˚iveD©a_‰om_HÆ
(
HAL_UART_2
);

1331 
Block_Lí
 = 
	`GET_DATA_BLOCK_LEN
(
g_RxBuff
.
Gë
, g_RxBuff.
Put
, 
UART_PS_RX_BUFF_LEN
);

1333 i‡((
Block_Lí
 =0Ë&& (
g_RxBuff
.
NŸEm±y
))

1335 
Block_Lí
 = 
UART_PS_RX_BUFF_LEN
;

1338 i‡(
Block_Lí
 > 
UART_PS_RX_BUFF_LEN
 / 2)

1340 
COS_EVENT
 
evít
 = { 0 };

1342 
	`STOP_RX_TIMER
();

1344 
evít
.
nEvítId
 = 
EV_DM_UART_RECEIVE_DATA_IND
;

1345 i‡(
rcv_Êow_hﬁd
 =
FALSE
)

1347 
	`hÆ_U¨tSëRts
(
HAL_UART_2
, 
FALSE
);

1348 
rcv_Êow_hﬁd
 = 
TRUE
;

1350 i‡(
	`COS_SídEvít
(
CSW_AT_TASK_HANDLE
, &
evít
, 
COS_WAIT_FOREVER
, 
COS_EVENT_PRI_NORMAL
Ë=
FALSE
)

1358 i‡(
g_U¨tInfo
.
fPsRxTimî
 =
FALSE
)

1359 
	`START_RX_TIMER
();

1363 i‡(
°©us
.
txDmaD⁄e
)

1366 
	`u¨t_DmaSídD©a_to_HÆ
(0);

1371 
	}
}

1374 
	$u¨t_Re˚iveD©a_‰om_HÆ
()

1378 
uöt16
 
Block_Lí
, 
Remaö_Lí
, 
ªÆ_Lí
, 
Fú°_hÆf
, 
Sec⁄d_hÆf
, 
uD©aSize
;

1380 
uD©aSize
 = 
	`HÆU¨tGëD©a
(
g_U¨tInfo
.
Scom_U¨tId
, 
g_RxBuff
.
FifoBuf
, 
UART_MAX_FIFO_LEVEL
);

1383 
Block_Lí
 = 
	`GET_DATA_BLOCK_LEN
(
g_RxBuff
.
Gë
, g_RxBuff.
Put
, 
UART_PS_RX_BUFF_LEN
);

1385 i‡((
Block_Lí
 =0Ë&& (
g_RxBuff
.
NŸEm±y
))

1387 
Block_Lí
 = 
UART_PS_RX_BUFF_LEN
;

1390 
Remaö_Lí
 = 
UART_PS_RX_BUFF_LEN
 - 
Block_Lí
;

1391 
ªÆ_Lí
 = (
uD©aSize
 < 
Remaö_Lí
) ? uDataSize : Remain_Len;

1392 i‡(
ªÆ_Lí
 != 0)

1394 i‡(
g_RxBuff
.
Put
 < g_RxBuff.
Gë
)

1396 
	`mem˝y
(&
g_RxBuff
.
CúcuBuf
[g_RxBuff.
Put
], g_RxBuff.
FifoBuf
, 
ªÆ_Lí
);

1397 
g_RxBuff
.
Put
 = 
	`MOD_BUFF_LEN
(g_RxBuff.Puà+ 
ªÆ_Lí
);

1401 
Fú°_hÆf
 = 
UART_PS_RX_BUFF_LEN
 - 
g_RxBuff
.
Put
;

1403 i‡(
ªÆ_Lí
 < 
Fú°_hÆf
)

1405 
	`mem˝y
(&
g_RxBuff
.
CúcuBuf
[g_RxBuff.
Put
], g_RxBuff.
FifoBuf
, 
ªÆ_Lí
);

1406 
g_RxBuff
.
Put
 = 
	`MOD_BUFF_LEN
(g_RxBuff.Puà+ 
ªÆ_Lí
);

1410 
	`mem˝y
(&
g_RxBuff
.
CúcuBuf
[g_RxBuff.
Put
], g_RxBuff.
FifoBuf
, 
Fú°_hÆf
);

1411 
Sec⁄d_hÆf
 = 
ªÆ_Lí
 - 
Fú°_hÆf
;

1412 
g_RxBuff
.
Put
 = 
	`MOD_BUFF_LEN
(g_RxBuff.Puà+ 
Fú°_hÆf
);

1414 
	`mem˝y
(&
g_RxBuff
.
CúcuBuf
[g_RxBuff.
Put
], &g_RxBuff.
FifoBuf
[
Fú°_hÆf
], 
Sec⁄d_hÆf
);

1415 
g_RxBuff
.
Put
 = 
	`MOD_BUFF_LEN
(g_RxBuff.Puà+ 
Sec⁄d_hÆf
);

1421 
g_RxBuff
.
NŸEm±y
 = 1;

1430 
	}
}

1432 
öt16
 
	gbuf_Block_Lí
 =0;

1434 
	$úq_PsMode
(
HAL_UART_IRQ_STATUS_T
 
°©us
, 
HAL_UART_ERROR_STATUS_T
 
îr‹
)

1436 
úq_°©us
.
sui
 = 0x00;

1437 
úq_°©us
.
°
 = 
°©us
;

1443 i‡(
°©us
.
rxD©aAvaûabÀ
 || sètus.
rxTimeout
)

1445 
öt16
 
Block_Lí
;

1447 
	`u¨t_Re˚iveD©a_‰om_HÆ
();

1450 
Block_Lí
 = 
	`GET_DATA_BLOCK_LEN
(
g_RxBuff
.
Gë
, g_RxBuff.
Put
, 
UART_PS_RX_BUFF_LEN
);

1453 i‡((
Block_Lí
 =0Ë&& (
g_RxBuff
.
NŸEm±y
))

1455 
Block_Lí
 = 
UART_PS_RX_BUFF_LEN
;

1459 
buf_Block_Lí
 = 
Block_Lí
;

1460 i‡(
Block_Lí
 > 
UART_PS_RX_BUFF_LEN
 / 2)

1462 
COS_EVENT
 
evít
 = { 0 };

1464 
	`STOP_RX_TIMER
();

1466 
evít
.
nEvítId
 = 
EV_DM_UART_RECEIVE_DATA_IND
;

1467 i‡(
rcv_Êow_hﬁd
 =
FALSE
)

1469 
	`hÆ_U¨tSëRts
((
HAL_UART_ID_T
Ë
g_U¨tInfo
.
Scom_U¨tId
, 
FALSE
);

1470 
rcv_Êow_hﬁd
 = 
TRUE
;

1472 i‡(
	`COS_SídEvít
(
CSW_AT_TASK_HANDLE
, &
evít
, 
COS_WAIT_FOREVER
, 
COS_EVENT_PRI_NORMAL
Ë=
FALSE
)

1480 i‡(
g_U¨tInfo
.
fPsRxTimî
 =
FALSE
)

1481 
	`START_RX_TIMER
();

1485 i‡(
°©us
.
txDmaD⁄e
)

1490 
	`u¨t_DmaSídD©a_to_HÆ
(0);

1515 
	}
}

1521 
uöt16
 
	$u¨t_PsRódRxD©a
(
uöt8
 *
pBuff
, 
uöt16
 
uBuffSize
)

1524 
uöt16
 
Block_Lí
, 
Fú°_hÆf
, 
Sec⁄d_hÆf
;

1525 
uöt16
 
ªÆ_Àn
 = 0;

1526 
HANDLE
 
h
 = 0;

1529 
Block_Lí
 = 
	`GET_DATA_BLOCK_LEN
(
g_RxBuff
.
Gë
, g_RxBuff.
Put
, 
UART_PS_RX_BUFF_LEN
);

1531 i‡((
Block_Lí
 =0Ë&& (
g_RxBuff
.
NŸEm±y
))

1533 
Block_Lí
 = 
UART_PS_RX_BUFF_LEN
;

1535 i‡(
pBuff
 =
NULL
)

1537  
Block_Lí
;

1540 
h
 = 
	`COS_E¡îCrôiˇlSe˘i⁄
();

1542 
	`STOP_RX_TIMER
();

1544 
ªÆ_Àn
 = (
uBuffSize
 <
Block_Lí
) ? uBuffSize : Block_Len;

1546 i‡(
ªÆ_Àn
 > 0)

1549 i‡(
g_RxBuff
.
Gë
 < g_RxBuff.
Put
)

1551 
	`mem˝y
(
pBuff
, &
g_RxBuff
.
CúcuBuf
[g_RxBuff.
Gë
], 
ªÆ_Àn
);

1552 
g_RxBuff
.
Gë
 = 
	`MOD_BUFF_LEN
(g_RxBuff.Gë + 
ªÆ_Àn
);

1557 
Fú°_hÆf
 = 
UART_PS_RX_BUFF_LEN
 - 
g_RxBuff
.
Gë
;

1559 i‡(
ªÆ_Àn
 < 
Fú°_hÆf
)

1561 
	`mem˝y
(
pBuff
, &
g_RxBuff
.
CúcuBuf
[g_RxBuff.
Gë
], 
ªÆ_Àn
);

1562 
g_RxBuff
.
Gë
 = 
	`MOD_BUFF_LEN
(g_RxBuff.Gë + 
ªÆ_Àn
);

1566 
	`mem˝y
(
pBuff
, &
g_RxBuff
.
CúcuBuf
[g_RxBuff.
Gë
], 
Fú°_hÆf
);

1567 
Sec⁄d_hÆf
 = 
ªÆ_Àn
 - 
Fú°_hÆf
;

1568 
g_RxBuff
.
Gë
 = 
	`MOD_BUFF_LEN
(g_RxBuff.Gë + 
Fú°_hÆf
);

1570 
	`mem˝y
(&
pBuff
[
Fú°_hÆf
], &
g_RxBuff
.
CúcuBuf
[g_RxBuff.
Gë
], 
Sec⁄d_hÆf
);

1572 
g_RxBuff
.
Gë
 = 
	`MOD_BUFF_LEN
(g_RxBuff.Gë + 
Sec⁄d_hÆf
);

1576 i‡(
g_RxBuff
.
Gë
 =g_RxBuff.
Put
)

1577 
g_RxBuff
.
NŸEm±y
 = 0;

1579 if((
UART_PS_RX_BUFF_LEN
/8 > 
	`GET_DATA_BLOCK_LEN
(
g_RxBuff
.
Gë
, g_RxBuff.
Put
, UART_PS_RX_BUFF_LEN))&&(
rcv_Êow_hﬁd
 =
TRUE
))

1581 
	`hÆ_U¨tSëRts
(–
HAL_UART_ID_T
)
g_U¨tInfo
.
Scom_U¨tId
, 
TRUE
);

1582 
rcv_Êow_hﬁd
 = 
FALSE
;

1585 
	`COS_ExôCrôiˇlSe˘i⁄
(
h
);

1587 
h
 = 0;

1588  
ªÆ_Àn
;

1589 
	}
}

1591 
	$u¨t_SëWaôSmsD©aFœg
(
uöt8
 
f
)

1593 
HANDLE
 
h
 = 0;

1595 i‡(
f
 =
g_U¨tInfo
.
d©a_Mode
)

1602 
h
 = 
	`COS_E¡îCrôiˇlSe˘i⁄
();

1604 
	`mem£t
(
g_U¨tInfo
.
rx_buff
, 0, (g_UartInfo.rx_buff));

1606 
g_U¨tInfo
.
rx_buff_p
 = 0;

1608 
g_U¨tInfo
.
d©a_Mode
 = 
f
;

1610 
	`COS_ExôCrôiˇlSe˘i⁄
(
h
);

1611 
	}
}

1615 
uöt16
 
	$u¨t_SídD©aToTeNoSÀï
(
uöt8
* 
pBuf
, 
uöt16
 
Àn
)

1617 
uöt16
 
n
 = 
Àn
;

1618 
uöt16
 
i
 = 0;

1619 
uöt8
* 
p
 = 
pBuf
;

1620 
uöt32
 
°©us
;

1623 
	`AT_CP_ENTRY
(
CPID_UART_PT
);

1625 i‡(!
g_U¨tInfo
.
CommO≥√d
)

1627 
boﬁ
 
bRë
 = 
FALSE
;

1628 
bRë
 = 
	`u¨t_O≥n
(
UART_1
,
ds_low
);

1629 if(
FALSE
 =
bRë
)

1631 
g_U¨tInfo
.
CommO≥√d
 = 
TRUE
;

1637 i‡(
pBuf
 =
NULL
 || 
Àn
 == 0)

1639 
	`AT_CP_EXIT
(
CPID_UART_PR
);

1643 
°©us
 = 
	`hÆ_E¡îCrôiˇlSe˘i⁄
();

1644 #ifde‡
__2UART_SHARE_AT__


1645 !(
	`hÆ_u¨t_TxFöished
(
HAL_UART_1
)))

1647 
	`COS_SÀï
(10);

1649 !(
	`hÆ_u¨t_TxFöished
(
HAL_UART_2
)))

1651 
	`COS_SÀï
(10);

1654 !(
	`hÆ_u¨t_TxFöished
(
g_U¨tInfo
.
Scom_U¨tId
)))

1656 
	`COS_SÀï
(10);

1661 #ifde‡
__2UART_SHARE_AT__


1663 
n
 > 0)

1668 
i
 = 
	`HÆU¨tSídD©a
(
HAL_UART_1
, 
p
, 
n
);

1669 
n
 -
i
;

1670 
p
 +
i
;

1671 
	`COS_SÀï
(10);

1675 
n
 = 
Àn
;

1676 
i
 = 0;

1677 
p
 = 
pBuf
;

1678 
	`COS_SÀï
(10);

1679 
n
 > 0)

1685 
i
 = 
	`HÆU¨tSídD©a
(
HAL_UART_2
, 
p
, 
n
);

1686 
n
 -
i
;

1687 
p
 +
i
;

1688 
	`COS_SÀï
(10);

1702 
n
 > 0)

1707 
i
 = 
	`HÆU¨tSídD©a
(
g_U¨tInfo
.
Scom_U¨tId
, 
p
, 
n
);

1708 
n
 -
i
;

1709 
p
 +
i
;

1714 
	`hÆ_ExôCrôiˇlSe˘i⁄
(
°©us
);

1717 
	`AT_CP_EXIT
(
CPID_UART_PR
);

1719  (
Àn
 - 
n
);

1720 
	}
}

1722 
uöt16
 
	$u¨t_SídD©aToTe
(
uöt8
* 
pBuf
, 
uöt16
 
Àn
)

1724 
uöt16
 
n
 = 
Àn
;

1725 
uöt16
 
i
 = 0;

1726 
uöt8
* 
p
 = 
pBuf
;

1727 
uöt32
 
°©us
;

1730 
	`AT_CP_ENTRY
(
CPID_UART_PT
);

1732 i‡(!
g_U¨tInfo
.
CommO≥√d
)

1734 
boﬁ
 
bRë
 = 
FALSE
;

1736 
bRë
 = 
	`u¨t_O≥n
(
UART_1
, 
ds_low
);

1737 i‡(
FALSE
 =
bRë
)

1739 
g_U¨tInfo
.
CommO≥√d
 = 
TRUE
;

1743 i‡(
pBuf
 =
NULL
 || 
Àn
 == 0)

1745 
	`AT_CP_EXIT
(
CPID_UART_PR
);

1749 
°©us
 = 
	`COS_Cª©eSem≠h‹e
(1);

1751 #ifde‡
__2UART_SHARE_AT__


1752 !(
	`hÆ_u¨t_TxFöished
(
HAL_UART_1
)))

1756 !(
	`hÆ_u¨t_TxFöished
(
HAL_UART_2
)))

1761 !(
	`hÆ_u¨t_TxFöished
(
g_U¨tInfo
.
Scom_U¨tId
)))

1767 #ifde‡
__2UART_SHARE_AT__


1769 
n
 > 0)

1773 
i
 = 
	`HÆU¨tSídD©a
(
HAL_UART_1
, 
p
, 
n
);

1774 
n
 -
i
;

1775 
p
 +
i
;

1780 
n
 = 
Àn
;

1781 
i
 = 0;

1782 
p
 = 
pBuf
;

1785 
n
 > 0)

1790 
i
 = 
	`HÆU¨tSídD©a
(
HAL_UART_2
, 
p
, 
n
);

1791 
n
 -
i
;

1792 
p
 +
i
;

1807 
n
 > 0)

1812 
i
 = 
	`HÆU¨tSídD©a
(
g_U¨tInfo
.
Scom_U¨tId
, 
p
, 
n
);

1813 
n
 -
i
;

1814 
p
 +
i
;

1820 
	`COS_DñëeSem≠h‹e
(
°©us
);

1824 
	`AT_CP_EXIT
(
CPID_UART_PR
);

1826  (
Àn
 - 
n
);

1827 
	}
}

1829 
	$u¨t_Inô
(
UART_CFG
 *
cfg
)

1831 
	`mem£t
(&
g_U¨tInfo
, 0, (g_UartInfo));

1832 
	`mem£t
(&
g_Cúcuœr_Buf
, 0, (g_Circular_Buf));

1833 
	`mem£t
(&
g_RxBuff
, 0, (g_RxBuff));

1835 
g_U¨tInfo
.
ComAtÊag
.
FœgToCom
 = 
DATA_TO_COM
;

1836 
g_U¨tInfo
.
Scom_U¨tId
 = 
UART_DEFAULT_UART
;

1837 
g_U¨tInfo
.
CommO≥√d
 = 
FALSE
;

1838 
g_U¨tInfo
.
d©a_Mode
 = 
AT_STATUS_CMD_LINE
;

1839 
g_U¨tInfo
.
CRvÆue_DeÁu…
 = 
AT_CMD_CR
;

1840 
g_U¨tInfo
.
LFvÆue_DeÁu…
 = 
AT_CMD_LF
;

1841 
g_U¨tInfo
.
ReqPackStyp
 = 
SCM_REQ_CMD
;

1842 
g_U¨tInfo
.
PPPRecSètus
 = 
FALSE
;

1843 
g_U¨tInfo
.
CheckD©aFœg
 = 0;

1844 
g_U¨tInfo
.
Is_d©a
 = 
FALSE
;

1846 
	`mem˝y
(&
g_U¨tCfg
, 
cfg
, (
UART_CFG
));

1847 
	}
}

1850 
	$u¨t_Re£t
()

1852 
	`u¨t_Clo£
(
g_U¨tInfo
.
Scom_U¨tId
);

1853 
	`u¨t_Inô
(&
g_U¨tCfg
);

1854 
	`u¨t_O≥n
(
g_U¨tInfo
.
Scom_U¨tId
, g_U¨tInfo.
D©aS≥edMode
);

1855 
	}
}

1857 
	$muxU¨tIrqCÆlback
(
eHAL_UART_CH_T
 
id
, 
eHAL_UART_IRQ_CAUSE_T
 
ˇu£
)

1860 i‡(
ˇu£
 =
RX_DATA_AVAILABLE
 || cau£ =
RX_TIMEOUT
)

1862 
uöt8
 
rcvbuf„r
[
UART_MAX_FIFO_LEVEL
] = {0};

1863 
uöt8
 
rcvÀn
 = 0;

1864 
uöt8
 
mode
 = 0;

1866 
uöt8
 *
pD©a
 = 
NULL
;

1868 
COS_EVENT
 
evít
 = {0};

1870 (
rcvÀn
 = 
	`HÆU¨tGëD©a
(
id
, 
rcvbuf„r
, 
UART_MAX_FIFO_LEVEL
)) > 0)

1872 if(
g_U¨tInfo
.
rx_buff_p
 + 
rcvÀn
 > 
UART_MAX_FIFO_LEVEL
)

1877 
	`mem˝y
(
g_U¨tInfo
.
rx_buff
 + g_U¨tInfo.
rx_buff_p
, 
rcvbuf„r
, 
rcvÀn
);

1879 
g_U¨tInfo
.
rx_buff_p
 +
rcvÀn
;

1881 
g_U¨tInfo
.
rx_buff
[g_U¨tInfo.
rx_buff_p
] = 0;

1885 if(
g_U¨tInfo
.
rx_buff_p
 == 0)

1890 
pD©a
 = (
uöt8
 *)
	`sxr_MÆloc
(
g_U¨tInfo
.
rx_buff_p
);

1891 
	`mem£t
((*)
pD©a
, 0, 
g_U¨tInfo
.
rx_buff_p
);

1892 
	`mem˝y
(
pD©a
, 
g_U¨tInfo
.
rx_buff
, g_U¨tInfo.
rx_buff_p
);

1894 
evít
.
nEvítId
 = 
EV_DM_UART_RECEIVE_DATA_IND
;

1895 
evít
.
nP¨am1
 = (
uöt32
)(
pD©a
);

1896 
evít
.
nP¨am2
 = 
g_U¨tInfo
.
rx_buff_p
;

1897 
evít
.
nP¨am3
 = 0;

1899 
	`sxr_Síd
(&
evít
, 
CMN_AT
, 
SXR_SEND_MSG
);

1901 
	`mem£t
(
g_U¨tInfo
.
rx_buff
, 0, (g_UartInfo.rx_buff));

1902 
g_U¨tInfo
.
rx_buff_p
 = 0;

1905 
	}
}

1908 
boﬁ
 
	$u¨t_O≥n
(
HAL_UART_ID_T
 
id
, 
UART_DS_MODE_T
 
D©aS≥edMode
)

1911 
	`hÆ_U¨tO≥n
(
HAL_UART_CH1
, 
HAL_UART_BAUD_RATE_115200
, 
HAL_UART_RX_IRQ_MODE
 | 
HAL_UART_TX_IRQ_MODE
);

1913 
	`hÆ_U¨tSëH™dÀr
(
HAL_UART_CH1
, 
muxU¨tIrqCÆlback
);

1915 
gATCuºíãComm™dEchoMode
 = 
GC_COMMANDECHO_MODE_ENABLE
;

1917 
g_U¨tInfo
.
Scom_U¨tId
 = 
id
;

1919 
g_U¨tInfo
.
CommO≥√d
 = 
TRUE
;

1920 
g_U¨tInfo
.
D©aS≥edMode
 = DataSpeedMode;

1922  
TRUE
;

1923 
	}
}

1925 
boﬁ
 
	$u¨t_Re›í
(
UART_DS_MODE_T
 
D©aS≥edMode
)

1927 i‡(
	`u¨t_Clo£
(
g_U¨tInfo
.
Scom_U¨tId
Ë=
TRUE
)

1929  
	`u¨t_O≥n
(
g_U¨tInfo
.
Scom_U¨tId
, 
D©aS≥edMode
);

1934  
FALSE
;

1936 
	}
}

1938 
sxr_SÀï
 (
u32
 
Pîiod
);

1939 
boﬁ
 
	$u¨t_Clo£
(
UART_ID
 
id
)

1946 #ifde‡
__2UART_SHARE_AT__


1947 i‡(!(
	`hÆ_u¨t_TxFöished
(
HAL_UART_1
)))

1949 
	`sxr_SÀï
(1600);

1952 i‡(!(
	`hÆ_u¨t_TxFöished
(
HAL_UART_2
)))

1954 
	`sxr_SÀï
(1600);

1957 
	`hÆ_u¨t_PurgeFifo
(
HAL_UART_1
);

1958 
	`hÆ_u¨t_PurgeFifo
(
HAL_UART_2
);

1960 
	`hÆ_u¨t_Clo£
(
HAL_UART_2
);

1961 
g_U¨tInfo
.
CommO≥√d
 = 
FALSE
;

1963 i‡(!(
	`hÆ_u¨t_TxFöished
(
g_U¨tInfo
.
Scom_U¨tId
)))

1965 
	`sxr_SÀï
(1600);

1968 
	`hÆ_u¨t_PurgeFifo
(–
HAL_UART_ID_T
Ë
g_U¨tInfo
.
Scom_U¨tId
);

1972 
g_U¨tInfo
.
CommO≥√d
 = 
FALSE
;

1975  
TRUE
;

1976 
	}
}

1979 
	$u¨t_CÀ¨Buf„r
()

1981 
	`mem£t
(
g_U¨tInfo
.
rx_buff
, 0, (g_UartInfo.rx_buff));

1982 
g_U¨tInfo
.
rx_buff_p
 = 0;

1983 
	}
}

1986 
UART_BAUDRATE
 
	$u¨t_GëCfgBaudøã
()

1988  
g_U¨tCfg
.
br
;

1989 
	}
}

1992 
boﬁ
 
	$u¨t_SëCfgBaudøã
(
UART_BAUDRATE
 
br
)

1995 
g_U¨tCfg
.
br
 = br;

1996  
TRUE
;

1997 
	}
}

1998 
UART_PARITY
 
	$u¨t_GëCfgP¨ôy
()

2000  
g_U¨tCfg
.
¥
;

2001 
	}
}

2003 
uöt8
 
	$u¨t_GëCfgF‹m©
()

2006 i‡((
g_U¨tCfg
.
db
 =
UART_8_DATA_BITS
Ë&& (g_U¨tCfg.
sb
 =
UART_2_STOP_BITS
))

2008 i‡((
g_U¨tCfg
.
db
 =
UART_8_DATA_BITS
Ë&& (g_U¨tCfg.
sb
 =
UART_1_STOP_BIT
)

2009 && ((
g_U¨tCfg
.
¥
 =
UART_ODD_PARITY
Ë|| (g_U¨tCfg.¥ =
UART_EVEN_PARITY
)

2010 || (
g_U¨tCfg
.
¥
 =
UART_SPACE_PARITY
Ë|| (g_U¨tCfg.¥ =
UART_MARK_PARITY
)))

2012 i‡((
g_U¨tCfg
.
db
 =
UART_8_DATA_BITS
Ë&& (g_U¨tCfg.
sb
 =
UART_1_STOP_BIT
))

2014 i‡((
g_U¨tCfg
.
db
 =
UART_7_DATA_BITS
Ë&& (g_U¨tCfg.
sb
 =
UART_2_STOP_BITS
))

2016 i‡((
g_U¨tCfg
.
db
 =
UART_7_DATA_BITS
Ë&& (g_U¨tCfg.
sb
 =
UART_1_STOP_BIT
)

2017 && ((
g_U¨tCfg
.
¥
 =
UART_ODD_PARITY
Ë|| (g_U¨tCfg.¥ =
UART_EVEN_PARITY
)

2018 || (
g_U¨tCfg
.
¥
 =
UART_SPACE_PARITY
Ë|| (g_U¨tCfg.¥ =
UART_MARK_PARITY
)))

2020 i‡((
g_U¨tCfg
.
db
 =
UART_7_DATA_BITS
Ë&& (g_U¨tCfg.
sb
 =
UART_1_STOP_BIT
))

2023 
	}
}

2025 
boﬁ
 
	$u¨t_SëCfgF‹m©
(
uöt8
 
F‹m©
)

2027 
F‹m©
)

2030 
g_U¨tCfg
.
db
 = 
UART_8_DATA_BITS
;

2031 
g_U¨tCfg
.
sb
 = 
UART_2_STOP_BITS
;

2034 
g_U¨tCfg
.
db
 = 
UART_8_DATA_BITS
;

2035 
g_U¨tCfg
.
sb
 = 
UART_1_STOP_BIT
;

2036 
g_U¨tCfg
.
¥
 = !
UART_NO_PARITY
;

2039 
g_U¨tCfg
.
db
 = 
UART_8_DATA_BITS
;

2040 
g_U¨tCfg
.
sb
 = 
UART_1_STOP_BIT
;

2041 
g_U¨tCfg
.
¥
 = 
UART_NO_PARITY
;

2044 
g_U¨tCfg
.
db
 = 
UART_7_DATA_BITS
;

2045 
g_U¨tCfg
.
sb
 = 
UART_2_STOP_BITS
;

2048 
g_U¨tCfg
.
db
 = 
UART_7_DATA_BITS
;

2049 
g_U¨tCfg
.
sb
 = 
UART_1_STOP_BIT
;

2050 
g_U¨tCfg
.
¥
 = !
UART_NO_PARITY
;

2053 
g_U¨tCfg
.
db
 = 
UART_7_DATA_BITS
;

2054 
g_U¨tCfg
.
sb
 = 
UART_1_STOP_BIT
;

2055 
g_U¨tCfg
.
¥
 = 
UART_NO_PARITY
;

2057 
dÁu…
:

2062  
TRUE
;

2063 
	}
}

2066 
boﬁ
 
	$u¨t_SëP¨ôy
(
uöt8
 
P¨ôy
 )

2068 
g_U¨tCfg
.
¥
 = 
P¨ôy
;

2069  
TRUE
;

2071 
	}
}

2073 
boﬁ
 
	$u¨t_SëAfcMode
(
uöt8
 
AfcMode
 )

2075 
g_U¨tCfg
.
fc
 = 
AfcMode
;

2076  
TRUE
;

2078 
	}
}

2081 
uöt16
 
	$u¨t_PsSídD©a
(
uöt8
* 
pD©a
, 
uöt16
 
uD©aSize
)

2084 
uöt16
 
Block_Lí
, 
Remaö_Lí
, 
ªÆ_Lí
, 
Fú°_hÆf
, 
Sec⁄d_hÆf
;

2085 
HANDLE
 
h
 = 0;

2086 
uöt8
 
tmp
;

2089 
h
 = 
	`COS_E¡îCrôiˇlSe˘i⁄
();

2091 
Block_Lí
 = 
	`GET_DATA_BLOCK_LEN
(
g_Cúcuœr_Buf
.
Gë
, g_Cúcuœr_Buf.
Put
, 
UART_PS_RX_BUFF_LEN
);

2093 i‡((
Block_Lí
 =0Ë&& (
g_Cúcuœr_Buf
.
NŸEm±y
))

2095 
Block_Lí
 = 
UART_PS_RX_BUFF_LEN
;

2098 
Remaö_Lí
 = 
UART_PS_RX_BUFF_LEN
 - 
Block_Lí
;

2100 
ªÆ_Lí
 = (
uD©aSize
 < 
Remaö_Lí
) ? uDataSize : Remain_Len;

2102 i‡(
ªÆ_Lí
 != 0)

2104 i‡(
g_Cúcuœr_Buf
.
Put
 < g_Cúcuœr_Buf.
Gë
)

2106 
	`mem˝y
(&
g_Cúcuœr_Buf
.
TX_CúcuœrBuf
[g_Cúcuœr_Buf.
Gë
], 
pD©a
, 
ªÆ_Lí
);

2107 
g_Cúcuœr_Buf
.
Put
 = 
	`MOD_BUFF_LEN
(g_Cúcuœr_Buf.Puà+ 
ªÆ_Lí
);

2111 
Fú°_hÆf
 = 
UART_PS_RX_BUFF_LEN
 - 
g_Cúcuœr_Buf
.
Put
;

2113 i‡(
ªÆ_Lí
 < 
Fú°_hÆf
)

2115 
	`mem˝y
(&
g_Cúcuœr_Buf
.
TX_CúcuœrBuf
[g_Cúcuœr_Buf.
Put
], 
pD©a
, 
ªÆ_Lí
);

2116 
g_Cúcuœr_Buf
.
Put
 = 
	`MOD_BUFF_LEN
(g_Cúcuœr_Buf.Puà+ 
ªÆ_Lí
);

2120 
	`mem˝y
(&
g_Cúcuœr_Buf
.
TX_CúcuœrBuf
[g_Cúcuœr_Buf.
Put
], 
pD©a
, 
Fú°_hÆf
);

2121 
Sec⁄d_hÆf
 = 
ªÆ_Lí
 - 
Fú°_hÆf
;

2122 
g_Cúcuœr_Buf
.
Put
 = 
	`MOD_BUFF_LEN
(g_Cúcuœr_Buf.Puà+ 
Fú°_hÆf
);

2124 
	`mem˝y
(&
g_Cúcuœr_Buf
.
TX_CúcuœrBuf
[g_Cúcuœr_Buf.
Put
], 
pD©a
 + 
Fú°_hÆf
, 
Sec⁄d_hÆf
);

2125 
g_Cúcuœr_Buf
.
Put
 = 
	`MOD_BUFF_LEN
(g_Cúcuœr_Buf.Puà+ 
Sec⁄d_hÆf
);

2129 
g_Cúcuœr_Buf
.
NŸEm±y
 = 1;

2131 #ifde‡
__2UART_SHARE_AT__


2138 
	`u¨t_DmaSídD©a_to_HÆ
(1);

2146 
	`u¨t_DmaSídD©a_to_HÆ
(1);

2159 
	`u¨t_DmaSídD©a_to_HÆ
(1);

2171 #ifde‡
__2UART_SHARE_AT__


2174 
	`u¨t_DmaSídD©a_to_HÆ
(1);

2182 
	`u¨t_DmaSídD©a_to_HÆ
(1);

2191 
	`u¨t_DmaSídD©a_to_HÆ
(1);

2200 
	`COS_ExôCrôiˇlSe˘i⁄
(
h
);

2202  (
ªÆ_Lí
);

2203 
	}
}

2205 
boﬁ
 
	$PM_SëB©ãryCh¨geMode
(
uöt8
 
nMode
)

2207  
FALSE
;

2208 
	}
}

	@
1
.
0
10
759
D:\Projects\modem2.5g\branches\l4\navi\baseband\l4\at\engine\src\at.c
D:\Projects\modem2.5g\branches\l4\navi\baseband\l4\at\engine\src\at_cmdlist.c
D:\Projects\modem2.5g\branches\l4\navi\baseband\l4\at\engine\src\at_command_table.c
D:\Projects\modem2.5g\branches\l4\navi\baseband\l4\at\engine\src\at_common.c
D:\Projects\modem2.5g\branches\l4\navi\baseband\l4\at\engine\src\at_main.c
D:\Projects\modem2.5g\branches\l4\navi\baseband\l4\at\engine\src\at_module.c
D:\Projects\modem2.5g\branches\l4\navi\baseband\l4\at\engine\src\at_parser.c
D:\Projects\modem2.5g\branches\l4\navi\baseband\l4\at\engine\src\at_sa.c
D:\Projects\modem2.5g\branches\l4\navi\baseband\l4\at\engine\src\at_ta.c
D:\Projects\modem2.5g\branches\l4\navi\baseband\l4\at\engine\src\at_uart.c
