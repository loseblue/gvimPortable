[{'word': '<A-->', 'kind': 'm', 'abbr': 'map <A--> :Tbbd<CR>', 'dup': 1}, {'word': '<A-j>', 'kind': 'm', 'abbr': 'noremap <A-j> <C-d>', 'dup': 1}, {'word': '<A-k>', 'kind': 'm', 'abbr': 'noremap <A-k> <C-u>', 'dup': 1}, {'word': '<A-Left>', 'kind': 'm', 'abbr': 'map <A-Left> :Tbbn<CR>', 'dup': 1}, {'word': '<A-q>', 'kind': 'm', 'abbr': 'nmap <silent> <A-q> :q<CR>', 'dup': 1}, {'word': '<A-Right>', 'kind': 'm', 'abbr': 'map <A-Right> :Tbbp<CR>', 'dup': 1}, {'word': '<BS>', 'kind': 'm', 'abbr': 'inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"', 'dup': 1}, {'word': '<C-c>', 'kind': 'm', 'abbr': 'vnoremap <C-c> "+y', 'dup': 1}, {'word': '<C-e>', 'kind': 'm', 'abbr': 'inoremap <expr><C-e> neocomplcache#cancel_popup()', 'dup': 1}, {'word': '<C-F9>', 'kind': 'm', 'abbr': '<C-F9>', 'dup': 1}, {'word': '<C-g>', 'kind': 'm', 'abbr': 'inoremap <expr><C-g> neocomplcache#undo_completion()', 'dup': 1}, {'word': '<C-h>', 'kind': 'm', 'abbr': 'inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"', 'dup': 1}, {'word': '<C-j>', 'kind': 'm', 'abbr': 'nnoremap <C-j> <C-w>j', 'dup': 1}, {'word': '<C-k>', 'kind': 'm', 'abbr': 'imap <C-k> <Plug>(neocomplcache_snippets_expand)', 'dup': 1}, {'word': '<C-l>', 'kind': 'm', 'abbr': 'inoremap <expr><C-l> neocomplcache#complete_common_string()', 'dup': 1}, {'word': '<C-s>', 'kind': 'm', 'abbr': 'imap <C-s> <Esc>:wa!<cr>i<Right>', 'dup': 1}, {'word': '<C-TAB>', 'kind': 'm', 'abbr': 'inoremap <expr><C-TAB> pumvisible() ? "\<C-p>" : "\<C-TAB>"', 'dup': 1}, {'word': '<C-v>', 'kind': 'm', 'abbr': 'nmap <C-v> "+p', 'dup': 1}, {'word': '<C-y>', 'kind': 'm', 'abbr': 'inoremap <expr><C-y> neocomplcache#close_popup()', 'dup': 1}, {'word': '<CR>', 'kind': 'm', 'abbr': 'inoremap <expr><CR> neocomplcache#smart_close_popup() . "\<CR>"', 'dup': 1}, {'word': '<D-j>', 'kind': 'm', 'abbr': 'noremap <D-j> <C-d>', 'dup': 1}, {'word': '<D-k>', 'kind': 'm', 'abbr': 'noremap <D-k> <C-u>', 'dup': 1}, {'word': '<F1>', 'kind': 'm', 'abbr': '<F1>', 'dup': 1}, {'word': '<F2>', 'kind': 'm', 'abbr': '<F2>', 'dup': 1}, {'word': '<F3>', 'kind': 'm', 'abbr': '<F3>', 'dup': 1}, {'word': '<F4>', 'kind': 'm', 'abbr': '<F4>', 'dup': 1}, {'word': '<F5>', 'kind': 'm', 'abbr': '<F5>', 'dup': 1}, {'word': '<F7>', 'kind': 'm', 'abbr': '<F7>', 'dup': 1}, {'word': '<F8>', 'kind': 'm', 'abbr': '<F8>', 'dup': 1}, {'word': '<F9>', 'kind': 'm', 'abbr': '<F9>', 'dup': 1}, {'word': '<Leader>ct', 'kind': 'm', 'abbr': 'map <silent> <unique> <Leader>ct <Plug>CRV_CRefVimInvoke', 'dup': 1}, {'word': '<leader>fc', 'kind': 'm', 'abbr': 'map <leader>fc :call CscopeFind(''c'', expand(''<cword>''))<CR> "t: Find this text string ', 'dup': 1}, {'word': '<leader>fd', 'kind': 'm', 'abbr': 'map <leader>fd :call CscopeFind(''d'', expand(''<cword>''))<CR> "c: Find functions calling this function ', 'dup': 1}, {'word': '<leader>fe', 'kind': 'm', 'abbr': 'map <leader>fe :call CscopeFind(''e'', expand(''<cword>''))<CR> "f: Find this file ', 'dup': 1}, {'word': '<leader>ff', 'kind': 'm', 'abbr': 'map <leader>ff :call CscopeFind(''f'', expand(''<cword>''))<CR> "i: Find files #including this file ', 'dup': 1}, {'word': '<leader>fg', 'kind': 'm', 'abbr': 'map <leader>fg :call CscopeFind(''g'', expand(''<cword>''))<CR> "d: Find functions called by this function ', 'dup': 1}, {'word': '<leader>fi', 'kind': 'm', 'abbr': 'map <leader>fi :call CscopeFind(''i'', expand(''<cword>''))<CR> map <leader>l :call ToggleLocationList()<CR> ', 'dup': 1}, {'word': '<leader>fs', 'kind': 'm', 'abbr': 'map <leader>fs :call CscopeFind(''s'', expand(''<cword>''))<CR> "g: Find this definition ', 'dup': 1}, {'word': '<leader>ft', 'kind': 'm', 'abbr': 'map <leader>ft :call CscopeFind(''t'', expand(''<cword>''))<CR> "e: Find this egrep pattern ', 'dup': 1}, {'word': '<leader>fu', 'kind': 'm', 'abbr': 'nmap <leader>fu :se ff=unix<cr>', 'dup': 1}, {'word': '<leader>gc', 'kind': 'm', 'abbr': 'nmap <silent> <leader>gc <ESC>:lcs f c <c-r><c-w><cr>:lw<cr>', 'dup': 1}, {'word': '<leader>gd', 'kind': 'm', 'abbr': 'nmap <silent> <leader>gd <ESC>:cstag <c-r><c-w><CR>', 'dup': 1}, {'word': '<leader>gs', 'kind': 'm', 'abbr': 'nmap <silent> <leader>gs <ESC>:lcs f s <c-r><c-w><cr>:lw<cr>', 'dup': 1}, {'word': '<leader>pn', 'kind': 'm', 'abbr': 'map <leader>pn :MPNERDTREE<cr>', 'dup': 1}, {'word': '<leader>ps', 'kind': 'm', 'abbr': 'map <leader>ps :MPSearchInProject =expand("")', 'dup': 1}, {'word': '<leader>pt', 'kind': 'm', 'abbr': 'nmap <silent> <leader>pt :TagbarToggle<CR>', 'dup': 1}, {'word': '<leader>pu', 'kind': 'm', 'abbr': 'map <leader>pu :MPUpdateTags<cr>', 'dup': 1}, {'word': '<S-Left>', 'kind': 'm', 'abbr': 'map <S-Left> :tabp<CR>', 'dup': 1}, {'word': '<S-Right>', 'kind': 'm', 'abbr': 'map <S-Right> :tabn<CR>', 'dup': 1}, {'word': '<space>', 'kind': 'm', 'abbr': '<space>', 'dup': 1}, {'word': '<TAB>', 'kind': 'm', 'abbr': 'imap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"', 'dup': 1}, {'word': 'b:verilog_indent_modules', 'kind': 'v', 'abbr': 'b:verilog_indent_modules', 'dup': 1}, {'word': 'colors_name', 'kind': 'v', 'abbr': 'let colors_name = "wombat"', 'dup': 1}, {'word': 'destroy_frame', 'kind': 'f', 'abbr': 'destroy_frame', 'dup': 1}, {'word': 'ds_MuxDISCParse', 'kind': 'f', 'abbr': 'void ds_MuxDISCParse()', 'dup': 1}, {'word': 'ds_MuxDispatchMessage', 'kind': 'f', 'abbr': 'void ds_MuxDispatchMessage()', 'dup': 1}, {'word': 'ds_MuxDMParse', 'kind': 'f', 'abbr': 'void ds_MuxDMParse()', 'dup': 1}, {'word': 'ds_MuxInitIndParse', 'kind': 'f', 'abbr': 'void ds_MuxInitIndParse(void* msgPtr)', 'dup': 1}, {'word': 'ds_MuxParseRecBytes', 'kind': 'f', 'abbr': 'ds_MuxParseRecBytes', 'dup': 1}, {'word': 'ds_MuxParseRecInformation', 'kind': 'f', 'abbr': 'void ds_MuxParseRecInformation(void)', 'dup': 1}, {'word': 'ds_MuxParseSendBytes', 'kind': 'f', 'abbr': 'ds_MuxParseSendBytes', 'dup': 1}, {'word': 'ds_MuxReadAdvancedModeFrame', 'kind': 'f', 'abbr': 'long ds_MuxReadAdvancedModeFrame(unsigned char * pRxBuffer, long cbRxBuffer)', 'dup': 1}, {'word': 'ds_MuxReadAdvancedModeFramePS', 'kind': 'f', 'abbr': 'ds_MuxReadAdvancedModeFramePS', 'dup': 1}, {'word': 'ds_MuxReadBasicModeFrame', 'kind': 'f', 'abbr': 'ds_MuxReadBasicModeFrame', 'dup': 1}, {'word': 'ds_MuxReadBasicModeFrameEXX', 'kind': 'f', 'abbr': 'long ds_MuxReadBasicModeFrameEXX(void* pParseParam, unsigned char * pRxBuffer, long cbRxBuffer)', 'dup': 1}, {'word': 'ds_MuxReadBasicModeFramePS', 'kind': 'f', 'abbr': 'long ds_MuxReadBasicModeFramePS(void* pParseParam, unsigned char* pRxBuffer, long cbRxBuffer)', 'dup': 1}, {'word': 'ds_MuxSABMParse', 'kind': 'f', 'abbr': 'void ds_MuxSABMParse()', 'dup': 1}, {'word': 'ds_MuxUAParse', 'kind': 'f', 'abbr': 'void ds_MuxUAParse()', 'dup': 1}, {'word': 'ds_MuxUIHParse', 'kind': 'f', 'abbr': 'void ds_MuxUIHParse()', 'dup': 1}, {'word': 'FindFiles', 'kind': 'c', 'abbr': 'command! -nargs=+ -complete=dir FindFiles :call FindFiles(<f-args>)', 'dup': 1}, {'word': 'FindGtags', 'kind': 'f', 'abbr': 'function! FindGtags(f)', 'dup': 1}, {'word': 'g:acp_enableAtStartup', 'kind': 'v', 'abbr': 'g:acp_enableAtStartup', 'dup': 1}, {'word': 'g:alternateNoDefaultAlternate', 'kind': 'v', 'abbr': 'g:alternateNoDefaultAlternate', 'dup': 1}, {'word': 'g:ctrlp_by_filename', 'kind': 'v', 'abbr': 'g:ctrlp_by_filename', 'dup': 1}, {'word': 'g:ctrlp_cmd', 'kind': 'v', 'abbr': 'let g:ctrlp_cmd = ''CtrlP''', 'dup': 1}, {'word': 'g:ctrlp_custom_ignore', 'kind': 'v', 'abbr': 'let g:ctrlp_custom_ignore = {', 'dup': 1}, {'word': 'g:ctrlp_follow_symlinks', 'kind': 'v', 'abbr': 'g:ctrlp_follow_symlinks', 'dup': 1}, {'word': 'g:ctrlp_lazy_update', 'kind': 'v', 'abbr': 'g:ctrlp_lazy_update', 'dup': 1}, {'word': 'g:ctrlp_map', 'kind': 'v', 'abbr': 'let g:ctrlp_map = ''<c-p>''', 'dup': 1}, {'word': 'g:ctrlp_match_window_reversed', 'kind': 'v', 'abbr': 'g:ctrlp_match_window_reversed', 'dup': 1}, {'word': 'g:ctrlp_max_height', 'kind': 'v', 'abbr': 'g:ctrlp_max_height', 'dup': 1}, {'word': 'g:ctrlp_reuse_window', 'kind': 'v', 'abbr': 'let g:ctrlp_reuse_window = ''netrw\|help\|quickfix\|tagbar\|taglist''', 'dup': 1}, {'word': 'g:ctrlp_working_path_mode', 'kind': 'v', 'abbr': 'let g:ctrlp_working_path_mode = ''ra''', 'dup': 1}, {'word': 'g:easytags_always_enabled', 'kind': 'v', 'abbr': 'g:easytags_always_enabled', 'dup': 1}, {'word': 'g:easytags_dynamic_files', 'kind': 'v', 'abbr': 'g:easytags_dynamic_files', 'dup': 1}, {'word': 'g:easytags_events', 'kind': 'v', 'abbr': 'let g:easytags_events = [''BufWritePost'']', 'dup': 1}, {'word': 'g:easytags_include_members', 'kind': 'v', 'abbr': 'g:easytags_include_members', 'dup': 1}, {'word': 'g:easytags_resolve_links', 'kind': 'v', 'abbr': 'g:easytags_resolve_links', 'dup': 1}, {'word': 'g:mapleader', 'kind': 'v', 'abbr': 'let g:mapleader = ","', 'dup': 1}, {'word': 'g:MP_Bufread_AutoLoad', 'kind': 'v', 'abbr': 'g:MP_Bufread_AutoLoad', 'dup': 1}, {'word': 'g:MP_Source_File_Ext_Name', 'kind': 'v', 'abbr': 'let g:MP_Source_File_Ext_Name = ''c,h,cpp,vim,py''', 'dup': 1}, {'word': 'g:neocomplcache_dictionary_filetype_lists', 'kind': 'v', 'abbr': 'let g:neocomplcache_dictionary_filetype_lists = {', 'dup': 1}, {'word': 'g:neocomplcache_enable_at_startup', 'kind': 'v', 'abbr': 'g:neocomplcache_enable_at_startup', 'dup': 1}, {'word': 'g:neocomplcache_enable_auto_select', 'kind': 'v', 'abbr': 'g:neocomplcache_enable_auto_select', 'dup': 1}, {'word': 'g:neocomplcache_enable_camel_case_completion', 'kind': 'v', 'abbr': 'g:neocomplcache_enable_camel_case_completion', 'dup': 1}, {'word': 'g:neocomplcache_enable_smart_case', 'kind': 'v', 'abbr': 'g:neocomplcache_enable_smart_case', 'dup': 1}, {'word': 'g:neocomplcache_enable_underbar_completion', 'kind': 'v', 'abbr': 'g:neocomplcache_enable_underbar_completion', 'dup': 1}, {'word': 'g:neocomplcache_keyword_patterns', 'kind': 'v', 'abbr': 'let g:neocomplcache_keyword_patterns = {}', 'dup': 1}, {'word': 'g:neocomplcache_lock_buffer_name_pattern', 'kind': 'v', 'abbr': 'let g:neocomplcache_lock_buffer_name_pattern = ''\*ku\*''', 'dup': 1}, {'word': 'g:neocomplcache_min_syntax_length', 'kind': 'v', 'abbr': 'g:neocomplcache_min_syntax_length', 'dup': 1}, {'word': 'g:neocomplcache_omni_patterns', 'kind': 'v', 'abbr': 'let g:neocomplcache_omni_patterns = {}', 'dup': 1}, {'word': 'g:neosnippet#snippets_directory', 'kind': 'v', 'abbr': 'let g:neosnippet#snippets_directory = ''$HOME/.vim/snippets''', 'dup': 1}, {'word': 'g:SrcExpl_gobackKey', 'kind': 'v', 'abbr': 'let g:SrcExpl_gobackKey = "<SPACE>" ', 'dup': 1}, {'word': 'g:SrcExpl_isUpdateTags', 'kind': 'v', 'abbr': 'g:SrcExpl_isUpdateTags', 'dup': 1}, {'word': 'g:SrcExpl_jumpKey', 'kind': 'v', 'abbr': 'let g:SrcExpl_jumpKey = "<ENTER>" ', 'dup': 1}, {'word': 'g:SrcExpl_pluginList', 'kind': 'v', 'abbr': 'let g:SrcExpl_pluginList = [ ', 'dup': 1}, {'word': 'g:SrcExpl_refreshTime', 'kind': 'v', 'abbr': 'g:SrcExpl_refreshTime', 'dup': 1}, {'word': 'g:SrcExpl_searchLocalDef', 'kind': 'v', 'abbr': 'g:SrcExpl_searchLocalDef', 'dup': 1}, {'word': 'g:SrcExpl_updateTagsCmd', 'kind': 'v', 'abbr': 'let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ." ', 'dup': 1}, {'word': 'g:SrcExpl_updateTagsKey', 'kind': 'v', 'abbr': 'g:SrcExpl_updateTagsKey', 'dup': 1}, {'word': 'g:SrcExpl_winHeight', 'kind': 'v', 'abbr': 'g:SrcExpl_winHeight', 'dup': 1}, {'word': 'g:tagbar_ctags_bin', 'kind': 'v', 'abbr': 'let g:tagbar_ctags_bin = ''ctags''', 'dup': 1}, {'word': 'g:tagbar_left', 'kind': 'v', 'abbr': 'g:tagbar_left', 'dup': 1}, {'word': 'g:tagbar_singleclick', 'kind': 'v', 'abbr': 'g:tagbar_singleclick', 'dup': 1}, {'word': 'g:tagbar_sort', 'kind': 'v', 'abbr': 'g:tagbar_sort', 'dup': 1}, {'word': 'g:tagbar_width', 'kind': 'v', 'abbr': 'g:tagbar_width', 'dup': 1}, {'word': 'g:Tb_ModSelTarget', 'kind': 'v', 'abbr': 'g:Tb_ModSelTarget', 'dup': 1}, {'word': 'g:Tb_UseSingleClick', 'kind': 'v', 'abbr': 'g:Tb_UseSingleClick', 'dup': 1}, {'word': 'g:vimrc_author', 'kind': 'v', 'abbr': 'let g:vimrc_author=''loseblue'' ', 'dup': 1}, {'word': 'g:vimrc_email', 'kind': 'v', 'abbr': 'g:vimrc_email', 'dup': 1}, {'word': 'g:vimrc_homepage', 'kind': 'v', 'abbr': 'let g:vimrc_homepage=''http://www.google.com'' ', 'dup': 1}, {'word': 'gsm0710_buffer_destroy', 'kind': 'f', 'abbr': 'gsm0710_buffer_destroy', 'dup': 1}, {'word': 'gsm0710_buffer_get_frame', 'kind': 'f', 'abbr': 'gsm0710_buffer_get_frame', 'dup': 1}, {'word': 'gsm0710_buffer_init', 'kind': 'f', 'abbr': 'gsm0710_buffer_init', 'dup': 1}, {'word': 'gsm0710_buffer_write', 'kind': 'f', 'abbr': 'gsm0710_buffer_write', 'dup': 1}, {'word': 'loaded_matchit', 'kind': 'v', 'abbr': 'loaded_matchit', 'dup': 1}, {'word': 'make_fcs', 'kind': 'f', 'abbr': 'unsigned char make_fcs(const unsigned char *input, int count) {', 'dup': 1}, {'word': 'mapleader', 'kind': 'v', 'abbr': 'let mapleader = ","', 'dup': 1}, {'word': 'MySys', 'kind': 'f', 'abbr': 'function! MySys()', 'dup': 1}, {'word': 'my_cr_function', 'kind': 'f', 'abbr': 'function! s:my_cr_function()', 'dup': 1}, {'word': 'NERDSpaceDelims', 'kind': 'v', 'abbr': 'NERDSpaceDelims', 'dup': 1}, {'word': 'r_crctable', 'kind': 'v', 'abbr': 'r_crctable', 'dup': 1}, {'word': 'showmarks_enable', 'kind': 'v', 'abbr': 'showmarks_enable', 'dup': 1}, {'word': 'showmarks_hlline_lower', 'kind': 'v', 'abbr': 'showmarks_hlline_lower', 'dup': 1}, {'word': 'showmarks_hlline_upper', 'kind': 'v', 'abbr': 'showmarks_hlline_upper', 'dup': 1}, {'word': 'showmarks_ignore_type', 'kind': 'v', 'abbr': 'let showmarks_ignore_type = "hqm"', 'dup': 1}, {'word': 'showmarks_include', 'kind': 'v', 'abbr': 'let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"', 'dup': 1}, {'word': 'UpdateGtags', 'kind': 'f', 'abbr': 'function! UpdateGtags(f)', 'dup': 1}, {'word': 'VimEnterCallback', 'kind': 'f', 'abbr': 'function! VimEnterCallback()', 'dup': 1}]
