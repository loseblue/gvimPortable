"=============================================================================
"     FileName: _vimrc
"         Desc: 
"       Author: loseblue
"        Email: loseblue[a]163.com
"      Version: 0.0.2
"   LastChange: 2012-08-03 10:45:45
"      History:
"=============================================================================
" Platform
function! MySys()
	if has('win32') || has('win64')
		return "windows"
	elseif has("unix")
		return "unix"
	else
		return "mac"
	endif
endfunction



"=========================== Vundle start ================================
set nocompatible    " be iMproved
filetype off        " required!

if MySys() == 'windows'
	set rtp+=~/.vim/bundle/vundle/
else
	set rtp+=~/.vim/bundle/vundle/
endif

call vundle#rc()
" required!
Bundle 'gmarik/vundle'

" vim-scripts repos
Bundle 'a.vim'
Bundle 'cocoa.vim'
Bundle 'brookhong/cscope.vim'
Bundle 'loseblue/AuthorInfo'
Bundle 'EasyMotion'
Bundle 'Mark'
Bundle 'matchit.zip'
Bundle 'loseblue/snipmate.vim'
Bundle 'The-NERD-Commenter'
Bundle 'DoxygenToolkit.vim'
Bundle 'loseblue/springColorScheme'
Bundle 'Tagbar'
Bundle 'taglist.vim'
Bundle 'TeTrIs.vim'
Bundle 'Conque-Shell'
Bundle 'loseblue/trcBrowser'
Bundle 'loseblue/TxtBrowser'
Bundle 'genutils'
Bundle 'lookupfile'
Bundle 'bootleq/LargeFile'

filetype plugin indent on    " required!
colorscheme spring  " color scheme 
"=========================== END Vundle ================================


set nobackup      " cloese backup
syntax enable       " 
set display=lastline
filetype on " detect file type
filetype plugin on " detect file type
filetype indent on " detect file type
set iskeyword+=_,$,@,%,#,-

set backspace=2     " backspace can be used
set nu!             " show line number
set autoread        " Set to auto read when a file is changed from the outside
set foldenable
set fdm=indent      " floader lines
" set foldmethod=expr
" set foldexpr=getline(v:lnum)=~'^\\s*!'?1:getline(v:lnum)=~'^[cC]'?1:0
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
"set showcmd "shwo cursor poistion in nomoal mode 
set cursorcolumn  " high light cursor column
set cursorline    " high light cursor line
set linespace=0   " set line high space
set lines=20 columns=120 "init UI size
set linebreak      "Do not cut words between lines, USELESS!

"assigned line setting 
set list
set listchars=tab:\|-
set tabpagemax=15 
set showtabline=2

set paste
nmap <silent> <A-q> :q<CR>

" shut down error ringBell
set noerrorbells
set novisualbell
set t_vb=

"window jump in VIM Ctrl + hjkl
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" status line setting [including OS,filecoding, course position,present, time]
"set statusline=[FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %y%r%m%*%=\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}

" matchIt plug
let loaded_matchit = 1

" file encoding setting
set fileencodings=utf-8,chinese,latin-1
set fileencoding=utf-8

" C setting
set sm              " OMG
set tabstop=4       " set width of tab
set softtabstop=4
set shiftwidth=4    " set with of assignment blank num = 4
set autoindent      "auto indent
set cindent         

"Set mapleader
let mapleader = ","
let g:mapleader = ","
set ignorecase smartcase "search cease smart


" VIM font setting
if MySys() == 'windows'
	set guifont=yaheiInconsolata:h10.5:cANSI
else
	set guifont=Monaco:h14
endif

" Ctrl+S
imap <C-s> <Esc>:wa!<cr>i<Right>
nmap <C-s> :wa!<cr>
set nocompatible
"source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

"ctrl+c ctrl+v ctrl+x
:map <C-V> "+pa
:map <C-C> "+y
:map <C-X> "+x

" file code type
set ffs=dos,unix
nmap <leader>fd :se ff=dos<cr>
nmap <leader>fu :se ff=unix<cr>

" copy current file/path to clipboard ,p:file name & path ,P:only path
noremap ,p :let @*=expand("%:p")<CR><Esc>
noremap ,P :let @*=expand("%:p:h")<CR><Esc>

" 先用/ 搜索字符,然后输入,lv 弹出窗口显示列表
nmap <leader>lv :lv /<c-r>=expand("<cword>")<cr>/ %<cr>:lw<cr>

"To hex modle
let s:hexModle = "N"
function! ToHexModle()
	if s:hexModle == "Y"
		%!xxd -r
		let s:hexModle = "N"
	else
		%!xxd
		let s:hexModle = "Y"
	endif
endfunction


" """"""""""""""""""" F1-F12"""""""""""""""""""""""""
" F1 Toggle Menu and Toolbar
set guioptions-=m
set guioptions-=T
map <silent> <F1> :if &guioptions =~# 'T' <Bar>
			\set guioptions-=T <Bar>
			\set guioptions-=m <bar>
			\else <Bar>
			\set guioptions+=T <Bar>
			\set guioptions+=m <Bar>
			\endif<CR>

"F2 show files used open
map <F2> :MRU<cr>

"F4 file infor
let g:vimrc_author='loseblue' 
let g:vimrc_email='loseblue[a]163.com' 
let g:vimrc_homepage='http://www.google.com' 
nmap <F3> :AuthorInfoDetect<cr>

imap <F7> <C-R>=strftime("%c")<CR>

" <F9> open Tagbar
nmap <silent> <F9> :TagbarToggle<CR>
nmap <silent> <C-F9> :Tlist<CR>
let g:tagbar_left = 1
let g:tagbar_singleclick = 0
let g:tagbar_ctags_bin = 'ctags'
let g:tagbar_width = 30

" roll screen Alt + jk
noremap <A-j> <C-f>
noremap <A-k> <C-b>

" NERD_comments
let NERDSpaceDelims = 1 

"au BufRead,BufNewFile *  setfiletype txt
"au BufRead,BufNewFile *  setfiletype trc
au BufEnter,BufRead,BufNewFile *.txt setlocal ft=txt "txtBrowser called
au BufEnter,BufRead,BufNewFile *.trc setlocal ft=trc "trcBrowser called


" in case your cscope execute is not in system path. 
" let g:cscope_cmd = 'D:/tools/vim/cscope.exe' 
" s: Find this C symbol 
map <leader>fs :call CscopeFind('s', expand('<cword>'))<CR> " g: Find this definition 
map <leader>fg :call CscopeFind('g', expand('<cword>'))<CR> " d: Find functions called by this function 
map <leader>fd :call CscopeFind('d', expand('<cword>'))<CR> " c: Find functions calling this function 
map <leader>fc :call CscopeFind('c', expand('<cword>'))<CR> " t: Find this text string 
map <leader>ft :call CscopeFind('t', expand('<cword>'))<CR> " e: Find this egrep pattern 
map <leader>fe :call CscopeFind('e', expand('<cword>'))<CR> " f: Find this file 
map <leader>ff :call CscopeFind('f', expand('<cword>'))<CR> " i: Find files #including this file 
map <leader>fi :call CscopeFind('i', expand('<cword>'))<CR> map <leader>l :call ToggleLocationList()<CR> 


" lookupfile
" Auto change directory
set autochdir

let g:LookupFile_MinPatLength= 2 "最少输入2个字符才开始查找 
let g:LookupFile_PreserveLastPattern = 0 "不保存上次查找的字符串 
let g:LookupFile_PreservePatternHistory = 1 "保存查找历史
let g:LookupFile_AlwaysAcceptFirst = 1 "回车打开第一个匹配项目 
let g:LookupFile_AllowNewFiles = 0 "不允许创建不存在的文件

nmap <silent> <leader>lf :LookupFile<cr>
nmap <silent> <leader>lb :LUBufs<cr> 
nmap <silent> <leader>lw :LUWalk<cr> 


" lookup file with ignore case
function! LookupFile_IgnoreCaseFunc(pattern)
	let _tags = &tags
	try
		let &tags = eval(g:LookupFile_TagExpr)
		let newpattern = '\c' . a:pattern
		let tags = taglist(newpattern)
	catch
		echohl ErrorMsg | echo "Exception: " . v:exception | echohl NONE
		return ""
	finally
		let &tags = _tags
	endtry

	" Show the matches for what is typed so far.
	let files = map(tags, 'v:val["filename"]')
	return files
endfunction
let g:LookupFile_LookupFunc = 'LookupFile_IgnoreCaseFunc'

function! TagsRootSet(path)
	" exe 'cd '.a:path exe '!gentags'
	let tagFilePath = genutils#CleanupFileName(a:path.'/lookupfiletags') 
	let g:LookupFile_TagExpr='"./lookupfiletags"' 
    let csprg = a:path
	if filereadable("cscope.out")
		cs add cscope.out
	endif
endfunction 

function! SetHRoot() 
	call TagsRootSet('.') 
endfunction
nmap <leader>root :call SetHRoot()<CR>

function! SetSpecifiedPathTheRoot() 
	call TagsRootSet(input('Please input the root folder path: '))
endfunction
nmap <leader>xroot :call SetSpecifiedPathTheRoot()<CR>

" doxygen useage
map fg : Dox<cr>
let g:DoxygenToolkit_authorName="loseblue"
let g:DoxygenToolkit_licenseTag="My own license\<enter>"
let g:DoxygenToolkit_undocTag="DOXIGEN_SKIP_BLOCK"
let g:DoxygenToolkit_briefTag_pre = "@brief\t"
let g:DoxygenToolkit_paramTag_pre = "@param\t"
let g:DoxygenToolkit_returnTag = "@return\t"
let g:DoxygenToolkit_briefTag_funcName = "no"
let g:DoxygenToolkit_maxFunctionProtoLines = 30

" a.vim 
let g:alternateNoDefaultAlternate = 1
