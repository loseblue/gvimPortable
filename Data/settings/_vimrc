"=============================================================================
"     FileName: _vimrc
"         Desc: 
"       Author: loseblue
"        Email: loseblue[a]163.com
"      Version: 0.0.2
"   LastChange: 2012-08-03 10:45:45
"      History:
"=============================================================================
" Platform
function! MySys()
	if has('win32') || has('win64')
		return "windows"
	elseif has("unix")
		return "unix"
	else
		return "mac"
	endif
endfunction

"=========================== Vundle start ================================
set nocompatible    " be iMproved
filetype off        " required!

if MySys() == 'windows'
	set rtp+=~/.vim/bundle/vundle/
else
	set rtp+=~/.vim/bundle/vundle/
endif

call vundle#rc()
" required!
Bundle 'gmarik/vundle'

" vim-scripts repos
Bundle 'a.vim'
Bundle 'cocoa.vim'
Bundle 'brookhong/cscope.vim'
Bundle 'loseblue/AuthorInfo'
Bundle 'EasyMotion'
Bundle 'Mark'
" Bundle 'ShowMarks7'
Bundle 'Yggdroot/indentLine'
Bundle 'Marks-Browser'
Bundle 'matchit.zip'
Bundle 'loseblue/snipmate.vim'
Bundle 'The-NERD-Commenter'
Bundle 'The-NERD-tree'
Bundle 'loseblue/springColorScheme'
Bundle 'molokai'
Bundle 'Tagbar'
Bundle 'wesleyche/SrcExpl'
Bundle 'taglist.vim'
Bundle 'genutils'
Bundle 'humiaozuzu/TabBar'
Bundle 'lookupfile'
Bundle 'jiazhoulvke/myproject'
Bundle 'TeTrIs.vim'
Bundle 'Conque-Shell'
Bundle 'loseblue/trcBrowser'
Bundle 'loseblue/TxtBrowser'
Bundle 'bootleq/LargeFile'

filetype plugin indent on    " required!
colorscheme spring  " color scheme
" let g:molokai_original = 1 
" colorscheme molokai  " color scheme

"=========================== END Vundle ================================

set nobackup      " cloese backup
syntax enable       " 
set display=lastline
filetype on " detect file type
filetype plugin on " detect file type
filetype indent on " detect file type
set iskeyword+=_,$,@,%,#,-

set backspace=2     " backspace can be used
set nu!             " show line number
set autoread        " Set to auto read when a file is changed from the outside
set foldenable
set fdm=indent      " floader lines
set laststatus=2
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
"set showcmd "shwo cursor poistion in nomoal mode 
set cursorcolumn  " high light cursor column
set cursorline    " high light cursor line
set linespace=0   " set line high space
set lines=20 columns=120 "init UI size
set linebreak      "Do not cut words between lines, USELESS!

"assigned line setting 
set list
set listchars=tab:\|-
set tabpagemax=15 
set showtabline=2

set paste
nmap <silent> <A-q> :q<CR>

" shut down error ringBell
set noerrorbells
set novisualbell
set t_vb=

"window jump in VIM Ctrl + hjkl
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" status line setting [including OS,filecoding, course position,present, time]
highlight StatusLine guifg=White guibg=Grey           
highlight StatusLineNC guifg=LightGrey guibg=LightSlateGrey 
set statusline=[FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %y%r%m%*%=\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}

" matchIt plug
let loaded_matchit = 1

" file encoding setting
set fileencodings=utf-8,chinese,latin-1
set fileencoding=utf-8

" C setting
set sm              " OMG
set tabstop=4       " set width of tab
set softtabstop=4
set shiftwidth=4    " set with of assignment blank num = 4
set autoindent      "auto indent
set cindent         

"Set mapleader
let mapleader = ","
let g:mapleader = ","
set ignorecase smartcase "search cease smart


" VIM font setting
if MySys() == 'windows'
	set guifont=yaheiInconsolata:h10.5:cANSI
else
	set guifont=Monaco:h14
endif

" Ctrl+S
imap <C-s> <Esc>:wa!<cr>i<Right>
nmap <C-s> :wa!<cr>
set nocompatible
"source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

"ctrl+c ctrl+v ctrl+x
:map <C-V> "+pa
:map <C-C> "+y
:map <C-X> "+x

" file code type
set ffs=dos,unix
nmap <leader>fd :se ff=dos<cr>
nmap <leader>fu :se ff=unix<cr>

" copy current file/path to clipboard ,p:file name & path ,P:only path
noremap ,p :let @*=expand("%:p")<CR><Esc>
noremap ,P :let @*=expand("%:p:h")<CR><Esc>

" """"""""""""""""""" F1-F12"""""""""""""""""""""""""
" F1 Toggle Menu and Toolbar {
set guioptions-=m
set guioptions-=T
map <silent> <F1> :if &guioptions =~# 'T' <Bar>
			\set guioptions-=T <Bar>
			\set guioptions-=m <bar>
			\else <Bar>
			\set guioptions+=T <Bar>
			\set guioptions+=m <Bar>
			\endif<CR>
"}

map <F2> :%s/\r//g<cr>:w<cr>gg

"F4 file infor
let g:vimrc_author='loseblue' 
let g:vimrc_email='loseblue[a]163.com' 
let g:vimrc_homepage='http://www.google.com' 
nmap <F3> :AuthorInfoDetect<cr>

imap <F7> <C-R>=strftime("%c")<CR>

" <F9> open Tagbar
nmap <silent> <F9> :TagbarToggle<CR>
nmap <silent> <C-F9> :Tlist<CR>
let g:tagbar_left = 1
let g:tagbar_singleclick = 0
let g:tagbar_ctags_bin = 'ctags'
let g:tagbar_width = 30

" roll screen Alt + jk{
noremap <A-j> <C-f>
noremap <A-k> <C-b>
"}

" NERD_comments
let NERDSpaceDelims = 1 

"au BufRead,BufNewFile *  setfiletype txt
"au BufRead,BufNewFile *  setfiletype trc
au BufEnter,BufRead,BufNewFile *.txt setlocal ft=txt "txtBrowser called
au BufEnter,BufRead,BufNewFile *.trc setlocal ft=trc "trcBrowser called

" showmarks setting{
let showmarks_enable = 1
let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
let showmarks_ignore_type = "hqm"
let showmarks_hlline_lower = 1
let showmarks_hlline_upper = 1 
"}

" markbrowser setting
nmap <silent> <leader>mk :MarksBrowser<cr>

" lookupfile {
set autochdir
let g:LookupFile_MinPatLength= 2
let g:LookupFile_PreserveLastPattern = 0
let g:LookupFile_PreservePatternHistory = 1
let g:LookupFile_AlwaysAcceptFirst = 1
let g:LookupFile_AllowNewFiles = 0
let g:LookupFile_TagExpr = string('./lookupfiletags')

nmap <silent> <leader>lf :LookupFile<cr>
nmap <silent> <leader>lb :LUBufs<cr> 
nmap <silent> <leader>lw :LUWalk<cr> 
"}

" a.vim {
let g:alternateNoDefaultAlternate = 1
"}

"vim project{
let g:MP_Bufread_AutoLoad = 1
let g:MP_Source_File_Ext_Name = 'htm,js,c,h,cpp,vim,php,py,asp'
" map <leader>ps:MPSearchInProject =expand("")
" map <leader>pl:MPLoad
" map <leader>pu:MPUpdateTags

if has("cscope")
	set cscopequickfix=s-,c-,d-,i-,t-,e-
	set cscopetagorder=0
	set cscopetag
	set nocscopeverbose

	map <leader>fs :call CscopeFind('s', expand('<cword>'))<CR> "g: Find this definition 
	map <leader>fg :call CscopeFind('g', expand('<cword>'))<CR> "d: Find functions called by this function 
	map <leader>fd :call CscopeFind('d', expand('<cword>'))<CR> "c: Find functions calling this function 
	map <leader>fc :call CscopeFind('c', expand('<cword>'))<CR> "t: Find this text string 
	map <leader>ft :call CscopeFind('t', expand('<cword>'))<CR> "e: Find this egrep pattern 
	map <leader>fe :call CscopeFind('e', expand('<cword>'))<CR> "f: Find this file 
	map <leader>ff :call CscopeFind('f', expand('<cword>'))<CR> "i: Find files #including this file 
	map <leader>fi :call CscopeFind('i', expand('<cword>'))<CR> map <leader>l :call ToggleLocationList()<CR> 
endif
"}

"NERDTree{  
let NERDTreeWinPos ="right"
let NERDTreeIgnore=['\.vim$', '\~$', '\.pyc$', '\.swp$']
" let NERDTreeShowBookmarks=1
"}  

"tabbar & tab swith{
let g:Tb_UseSingleClick = 1
let g:Tb_ModSelTarget = 1
map <A-Left> :Tbbn<CR>
map <A-Right> :Tbbp<CR>
map <S-Left> :tabp<CR>
map <S-Right> :tabn<CR>
""}


"SrcExpl{
nmap <F8> :SrcExplToggle<CR> 
let g:SrcExpl_winHeight = 8 
let g:SrcExpl_refreshTime = 100 
let g:SrcExpl_jumpKey = "<ENTER>" 
let g:SrcExpl_gobackKey = "<SPACE>" 
let g:SrcExpl_pluginList = [ 
        \ "__Tagbar__", 
        \ "_NERD_tree_", 
        \ "-TagBar-",
        \ "Source_Explorer" 
    \ ] 
let g:SrcExpl_searchLocalDef = 1 
let g:SrcExpl_isUpdateTags = 0 
let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ." 
let g:SrcExpl_updateTagsKey = "<F12>" 
"}

" :nmap <F4> :exec 'lvimgrep /' . input('/', expand('<cword>')) . '/j % <bar> lopen'<CR>
:nmap <F4> :exec 'lvimgrep /' . input('/') . '/j % <bar> lopen'<CR>
