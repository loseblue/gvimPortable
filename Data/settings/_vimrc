"=============================================================================
"     FileName: _vimrc
"         Desc: 
"       Author: loseblue
"        Email: loseblue[a]163.com
"      Version: 0.0.4
"   LastChange: 2013-01-25 11:17:26
"      History:
"=============================================================================
" Platform
function! MySys()
    if has('win32') || has('win64')
        return "windows"
    elseif has("unix")
        return "unix"
    else
        return "mac"
    endif
endfunction

"=========================== Vundle start ================================
set nocompatible    " be iMproved
filetype off        " required!

if MySys() == 'windows'
    set rtp+=~/.vim/bundle/vundle/
else
    set rtp+=~/.vim/bundle/vundle/
endif

call vundle#rc()
" required!
Bundle 'gmarik/vundle'

" vim-scripts repos
Bundle 'a.vim'
" Bundle 'brookhong/cscope.vim'
Bundle 'loseblue/AuthorInfo'
Bundle 'EasyMotion'
Bundle 'Mark'
Bundle 'Yggdroot/indentLine'
Bundle 'Marks-Browser'
Bundle 'matchit.zip'
Bundle 'Shougo/neocomplcache'
Bundle 'Shougo/neosnippet'
" ======easytags=====
" Bundle 'xolox/vim-easytags'
" Bundle 'xolox/vim-misc'
" Bundle 'xolox/vim-shell'
" ======easytags=====
Bundle 'gtags.vim'
Bundle 'The-NERD-Commenter'
Bundle 'The-NERD-tree'
Bundle 'Tagbar'
Bundle 'wesleyche/SrcExpl'
Bundle 'taglist.vim'
Bundle 'genutils'
Bundle 'EasyGrep'
Bundle 'loseblue/TabBar'
Bundle 'surround.vim'
Bundle 'jiazhoulvke/myproject'
Bundle 'TeTrIs.vim'
Bundle 'kien/ctrlp.vim'
Bundle 'drmingdrmer/xptemplate'
Bundle 'loseblue/TxtBrowser'
Bundle 'godlygeek/tabular'
Bundle 'DrawIt'
Bundle 'CRefVim'
"==========colorscheme============
Bundle 'loseblue/springColorScheme'
Bundle 'loseblue/Wombat'
Bundle 'dsolstad/vim-wombat256i'
"==========colorscheme============

filetype plugin indent on    " required!

" {{{colorscheme
" colorscheme spring  " color scheme
if has('gui_running')
    colorscheme Wombat
else
    colorscheme wombat256
endif

"}}}


"=========================== END Vundle ================================

set nobackup      " cloese backup
syntax enable       " 
set display=lastline
filetype plugin indent on " detect file type
set iskeyword+=_,$,@,%,#,-

set backspace=2     " backspace can be used
set nu!             " show line number
set autoread        " Set to auto read when a file is changed from the outside
set foldenable
set fdm=indent      " floader lines
set laststatus=2
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
" set cursorcolumn  " high light cursor column
" set cursorline    " high light cursor line
set linespace=-2   " set line high space
set lines=25 columns=120 "init UI size
set linebreak      "Do not cut words between lines, USELESS!

"assigned line setting 
set list
set listchars=tab:\|-
set tabpagemax=15 
set showtabline=2
set paste

" shut down error ringBell
set vb t_vb=
set noerrorbells
set novisualbell

" status line setting [including OS,filecoding, course position,present, time]
highlight StatusLine guifg=White guibg=Grey           
highlight StatusLineNC guifg=LightGrey guibg=LightSlateGrey 
set statusline=[FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %y%r%m%*%=\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}

" file encoding setting
" set fileencodings=utf-8,chinese,latin-1
set fileencodings=utf-8,cp936 "redad file orders 
set fileencoding=utf-8  "inside encoding
set fenc=utf-8 "create new file encoding 
set nobomb
" set ambiwidth=double


"Set mapleader
let mapleader = ","
let g:mapleader = ","
set ignorecase smartcase "search cease smart

" VIM font setting
if MySys() == 'windows'
    " set guifont=Envy_Code_R:h10:cANSI
    " set guifont=Bitstream_Vera_Sans_Mono:h10:cANSI
    set guifont=yaheiInconsolata:h11
else
    set guifont=Monaco:h14
endif

" copy current file/path to clipboard ,p:file name & path ,P:only path
" noremap ,p :let @*=expand("%:p")<CR><Esc>
" noremap ,P :let @*=expand("%:p:h")<CR><Esc>

" C setting
set tabstop=4       " set width of tab
set shiftwidth=4    " set with of assignment blank num = 4
set et              " set exchange tab to 4 blanks
set sm        " bracket mactch
set cindent   " c style cindent
set cino=l1   " case brace indent
let b:verilog_indent_modules = 1


nmap <silent> <A-q> :q<CR>
"window jump in VIM Ctrl + hjkl
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l


" "ctrl+c ctrl+v ctrl+x
" :map <C-V> "+pa
" :map <C-C> "+y
" :map <C-X> "+x
" :vmap <C-V> "+pa
" :vmap <C-C> "+y
vnoremap <C-c> "+y
nmap <C-v> "+p

" file code type
set ffs=dos,unix
nmap <leader>fd :se ff=dos<cr>
nmap <leader>fu :se ff=unix<cr>


" matchIt plug
let loaded_matchit = 1

" """"""""""""""""""" F1-F12"""""""""""""""""""""""""
" F1 Toggle Menu and Toolbar {
set guioptions-=m
set guioptions-=T
map <silent> <F1> :if &guioptions =~# 'T' <Bar>
            \set guioptions-=T <Bar>
            \set guioptions-=m <bar>
            \else <Bar>
            \set guioptions+=T <Bar>
            \set guioptions+=m <Bar>
            \endif<CR>
"}

map <F2> :MarksBrowser<cr>
:nmap <F3> :exec 'lvimgrep /' . input('/') . '/j % <bar> lopen'<CR>

"F4 file infor
let g:vimrc_author='loseblue' 
let g:vimrc_email='loseblue[a]163.com' 
let g:vimrc_homepage='http://www.google.com' 
nmap <F4> :AuthorInfoDetect<cr>

map <F5> :%s/\r//g<cr>:w<cr>gg
imap <F7> <C-R>=strftime("%c")<CR>

" <F9> open Tagbar
nmap <silent> <F9> :TagbarToggle<CR>
nmap <silent> <C-F9> :Tlist<CR>
let g:tagbar_left = 1
let g:tagbar_singleclick = 0
if MySys() == 'windows'
    let g:tagbar_ctags_bin = 'ctags'
else
    let g:tagbar_ctags_bin = '/usr/local/Cellar/ctags/5.8/bin/ctags'
endif
let g:tagbar_width = 30
let g:tagbar_sort = 0

" roll half screen Alt + jk{
if MySys() == 'windows'
    noremap <A-j> <C-d>
    noremap <A-k> <C-u>
else
    noremap <D-j> <C-d>
    noremap <D-k> <C-u>
endif
"}

" NERD_comments
let NERDSpaceDelims = 1 

"au BufRead,BufNewFile *  setfiletype txt
"au BufRead,BufNewFile *  setfiletype trc
au BufEnter,BufRead,BufNewFile *.txt setlocal ft=txt "txtBrowser called
au BufEnter,BufRead,BufNewFile *.trc setlocal ft=trc "trcBrowser called

" showmarks setting{
let showmarks_enable = 1
let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
let showmarks_ignore_type = "hqm"
let showmarks_hlline_lower = 1
" let showmarks_hlline_upper = 1 
"}


" a.vim {
let g:alternateNoDefaultAlternate = 1
"}

"vim project{
let g:MP_Bufread_AutoLoad = 1
let g:MP_Source_File_Ext_Name = 'c,h,cpp,vim,py'
map <leader>ps :MPSearchInProject =expand("")
" map <leader>pl:MPLoad
map <leader>pu :MPUpdateTags<cr>
nmap <silent> <leader>pt :TagbarToggle<CR>
map <leader>pn :MPNERDTREE<cr>


" " add any database in current directory
" if filereadable("cscope.out")
    " cs add cscope.out
    " " else add database pointed to by environment
" elseif $CSCOPE_DB != ""
    " cs add $CSCOPE_DB
" endif

" set cscopequickfix=s-,c-,d-,i-,t-,e-
" set cscopetagorder=0
" set cscopetag
" set nocscopeverbose

" map <leader>fs :call CscopeFind('s', expand('<cword>'))<CR> "g: Find this definition 
" map <leader>fg :call CscopeFind('g', expand('<cword>'))<CR> "d: Find functions called by this function 
" map <leader>fd :call CscopeFind('d', expand('<cword>'))<CR> "c: Find functions calling this function 
" map <leader>fc :call CscopeFind('c', expand('<cword>'))<CR> "t: Find this text string 
" map <leader>ft :call CscopeFind('t', expand('<cword>'))<CR> "e: Find this egrep pattern 
" map <leader>fe :call CscopeFind('e', expand('<cword>'))<CR> "f: Find this file 
" map <leader>ff :call CscopeFind('f', expand('<cword>'))<CR> "i: Find files #including this file 
" map <leader>fi :call CscopeFind('i', expand('<cword>'))<CR> map <leader>l :call ToggleLocationList()<CR> 
" "}

"tabbar & tab swith{
let g:Tb_UseSingleClick = 1
let g:Tb_ModSelTarget = 1
map <A-Left> :Tbbn<CR>
map <A-Right> :Tbbp<CR>
map <A--> :Tbbd<CR>
map <S-Left> :tabp<CR>
map <S-Right> :tabn<CR>
""}


"SrcExpl{
nmap <F8> :SrcExplToggle<CR> 
let g:SrcExpl_winHeight = 8 
let g:SrcExpl_refreshTime = 500 
let g:SrcExpl_jumpKey = "<ENTER>" 
let g:SrcExpl_gobackKey = "<SPACE>" 
let g:SrcExpl_pluginList = [ 
            \ "__Tagbar__", 
            \ "_NERD_tree_", 
            \ "-TagBar-",
            \ "Source_Explorer" 
            \ ] 
let g:SrcExpl_searchLocalDef = 1 
let g:SrcExpl_isUpdateTags = 0 
let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ." 
let g:SrcExpl_updateTagsKey = "<F12>" 
"}

" ctrlp{
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/]\.(git|hg|svn)$',
            \ 'file': '\v\.(exe|so|dll|o|a|sbr|obj)$',
            \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
            \ }

let g:ctrlp_reuse_window = 'netrw\|help\|quickfix\|tagbar\|taglist'
let g:ctrlp_by_filename = 1
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_max_height=9
let g:ctrlp_match_window_reversed=0
let g:ctrlp_follow_symlinks=1
let g:ctrlp_lazy_update = 1
" }


" Ctrl+S
imap <C-s> <Esc>:wa!<cr>i<Right>
nmap <C-s> :wa!<cr>
set nocompatible
"source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

" vim-easytags
set tags=./tags;
let g:easytags_dynamic_files = 1
" let g:easytags_events = ['BufWritePost']
" let g:easytags_include_members = 1
let g:easytags_resolve_links = 1

" CRefVim
map <silent> <unique> <Leader>ct <Plug>CRV_CRefVimInvoke

source $HOME\cfg_neocomplcache.vim
source $HOME\cfg_cscopeGtags.vim
