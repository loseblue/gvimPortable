"=============================================================================
"     FileName: _vimrc
"         Desc: 
"       Author: loseblue
"        Email: loseblue[a]163.com
"      Version: 1.0.0
"   LastChange: 2013-08-01 16:07:54
"      History:
"=============================================================================
" Platform
function! MySys()
    if has('win32') || has('win64')
        return "windows"
    elseif has("unix")
        return "unix"
    else
        return "mac"
    endif
endfunction

"=========================== Vundle start ================================
set nocompatible    " be iMproved
filetype off        " required!

if MySys() == 'windows'
    set rtp+=~/.vim/bundle/vundle/
else
    set rtp+=~/.vim/bundle/vundle/
endif

call vundle#rc()
" required!
Bundle 'gmarik/vundle'

" vim-scripts repos
Bundle 'a.vim'
Bundle 'loseblue/AuthorInfo'
Bundle 'EasyMotion'
Bundle 'terryma/vim-multiple-cursors'
Bundle 'Mark'
Bundle 'Yggdroot/indentLine'
Bundle 'Marks-Browser'
Bundle 'matchit.zip'
Bundle 'Shougo/neocomplcache'
Bundle 'Shougo/neosnippet'
" ======easytags=====
Bundle 'xolox/vim-misc'
Bundle 'xolox/vim-shell'
" Bundle 'xolox/vim-easytags'
" ======easytags=====
Bundle 'gtags.vim'
Bundle 'jordanchen/gtags-cscope.vim'
Bundle 'The-NERD-Commenter'
Bundle 'The-NERD-tree'
Bundle 'majutsushi/tagbar'
Bundle 'wesleyche/SrcExpl'
Bundle 'genutils'
Bundle 'EasyGrep'
Bundle 'loseblue/TabBar'
Bundle 'surround.vim'
Bundle 'kien/ctrlp.vim'
Bundle 'godlygeek/tabular'
Bundle 'DrawIt'
Bundle 'tpope/vim-fugitive'
"==========colorscheme============
Bundle 'loseblue/Wombat'
Bundle 'dsolstad/vim-wombat256i'
"==========colorscheme============

filetype plugin indent on    " required!

" {{{colorscheme
" colorscheme spring  " color scheme
if has('gui_running')
    colorscheme Wombat
else
    colorscheme wombat256i
endif

"}}}


"=========================== END Vundle ================================

set nobackup      " cloese backup
syntax enable       " 
set display=lastline
filetype plugin indent on " detect file type
set iskeyword+=_,$,@,%,#,-

set backspace=2     " backspace can be used
set nu!             " show line number
set autoread        " Set to auto read when a file is changed from the outside
set foldenable
set fdm=indent      " floader lines
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
" set cursorcolumn  " high light cursor column
" set cursorline    " high light cursor line
set linespace=-2   " set line high space
set lines=25 columns=120 "init UI size
set linebreak      "Do not cut words between lines, USELESS!

"assigned line setting 
set list
set listchars=tab:\|-
set tabpagemax=15 
set showtabline=2
set paste

" shut down error ringBell
set vb t_vb=
set noerrorbells
set novisualbell

" status line setting [including OS,filecoding, course position,present, time]
set laststatus=2 
" highlight StatusLine guifg=White guibg=Grey           
highlight StatusLineNC guifg=LightGrey guibg=LightSlateGrey 
set statusline=[%<%f\]\ %{fugitive#statusline()}\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [A=\%03.3b/H=0x\%02.2B]\ [POS=%l,%v][%p%%]\ %y%r%m%*%=\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}

" if has('statusline')
" set statusline=%<%f\   "filename
" set statusline+=%w%h%m%r "Option
" set statusline+=%{fugitive#statusline()} "Git
" set statusline+=\ [%{&ff}/%Y]            " filetype
" set statusline+=\ [%{getcwd()}]          " current dir
" set statusline+=\ [A=\%03.3b/H=0x\%02.2B] " ASCII / Hexadecimal value of char
" set statusline+=%=%-14.(%l,%c%V%)\ %p%%\ %L  " Right aligned file nav info
" endif

" file encoding setting
" set fileencodings=utf-8,chinese,latin-1
set encoding=utf-8
set fileencodings=utf-8,gbk,ucs-bom,cp936 "redad file orders 
set fenc=utf-8 "create new file encoding 
set nobomb
" set ambiwidth=double


"Set mapleader
let mapleader = ","
let g:mapleader = ","
set ignorecase smartcase "search cease smart

" VIM font setting
if MySys() == 'windows'
    " set guifont=Envy_Code_R:h10:cANSI
    " set guifont=Bitstream_Vera_Sans_Mono:h10:cANSI
    set guifont=yaheiInconsolata:h11
else
    set guifont=Monaco:h14
endif

" copy current file/path to clipboard ,p:file name & path ,P:only path
" noremap ,p :let @*=expand("%:p")<CR><Esc>
" noremap ,P :let @*=expand("%:p:h")<CR><Esc>

" C setting
set tabstop=4       " set width of tab
set shiftwidth=4    " set with of assignment blank num = 4
set et              " set exchange tab to 4 blanks
set sm        " bracket mactch
set cindent   " c style cindent
set cino=l1   " case brace indent
let b:verilog_indent_modules = 1


nmap <silent> <A-q> :q<CR>
"window jump in VIM Ctrl + hjkl
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l


" "ctrl+c ctrl+v ctrl+x
map <C-c> "+y
map <C-v> "+p

" file code type
set ffs=dos,unix
nmap <leader>fd :se ff=dos<cr>
nmap <leader>fu :se ff=unix<cr>


" matchIt plug
let loaded_matchit = 1

" """"""""""""""""""" F1-F12"""""""""""""""""""""""""
" F1 Toggle Menu and Toolbar {
set guioptions-=m
set guioptions-=T
map <silent> <F1> :if &guioptions =~# 'T' <Bar>
            \set guioptions-=T <Bar>
            \set guioptions-=m <bar>
            \else <Bar>
            \set guioptions+=T <Bar>
            \set guioptions+=m <Bar>
            \endif<CR>
"}

map <F2> :MarksBrowser<cr>
:nmap <F3> :exec 'lvimgrep /' . input('/') . '/j % <bar> lopen'<CR>

"F4 file infor
let g:vimrc_author='loseblue' 
let g:vimrc_email='loseblue[a]163.com' 
let g:vimrc_homepage='http://www.google.com' 
nmap <F4> :AuthorInfoDetect<cr>

map <F5> :%s/\r//g<cr>:w<cr>gg
imap <F7> <C-R>=strftime("%c")<CR>

nmap <silent> <F9> :TagbarToggle<CR>
let g:tagbar_left = 1
let g:tagbar_singleclick = 0
if MySys() == 'windows'
    let g:tagbar_ctags_bin = 'ctags'
else
    let g:tagbar_ctags_bin = '/usr/local/Cellar/ctags/5.8/bin/ctags'
endif
let g:tagbar_width = 30
let g:tagbar_sort = 0

" roll half screen Alt + jk{
if MySys() == 'windows'
    noremap <A-j> <C-d>
    noremap <A-k> <C-u>
else
    noremap <D-j> <C-d>
    noremap <D-k> <C-u>
endif
"}

" NERD_comments
let NERDSpaceDelims = 1 
au BufEnter,BufRead,BufNewFile *.txt setlocal ft=txt "txtBrowser called
au BufEnter,BufRead,BufNewFile *.trc setlocal ft=trc "trcBrowser called

" showmarks setting{
let showmarks_enable = 1
let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
let showmarks_ignore_type = "hqm"
let showmarks_hlline_lower = 1
" let showmarks_hlline_upper = 1 
"}


" a.vim {
let g:alternateNoDefaultAlternate = 1
"}


" vim-multiple-cursors {
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-]>'
let g:multi_cursor_prev_key='<C-[>'
let g:multi_cursor_skip_key='<C-\>'
let g:multi_cursor_quit_key='<Esc>'
"}

"tabbar & tab swith{
let g:Tb_UseSingleClick = 1
let g:Tb_ModSelTarget = 1
map <A-Left> :Tbbn<CR>
map <A-Right> :Tbbp<CR>
map <A--> :Tbbd<CR>
map <S-Left> :tabp<CR>
map <S-Right> :tabn<CR>
""}

"SrcExpl{
nmap <F8> :SrcExplToggle<CR> 
let g:SrcExpl_winHeight = 8 
let g:SrcExpl_refreshTime = 500 
let g:SrcExpl_jumpKey = "<ENTER>" 
let g:SrcExpl_gobackKey = "<SPACE>" 
let g:SrcExpl_pluginList = [ 
            \ "__Tagbar__", 
            \ "_NERD_tree_", 
            \ "-TagBar-",
            \ "Source_Explorer" 
            \ ] 
let g:SrcExpl_searchLocalDef = 1 
let g:SrcExpl_isUpdateTags = 0 
let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ." 
let g:SrcExpl_updateTagsKey = "<F12>" 
"}

" ctrlp{
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/]\.(git|hg|svn)$',
            \ 'file': '\v\.(exe|so|dll|o|a|sbr|obj)$',
            \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
            \ }

let g:ctrlp_reuse_window = 'netrw\|help\|quickfix\|tagbar\|taglist'
let g:ctrlp_by_filename = 1
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_max_height=9
let g:ctrlp_match_window_reversed=0
let g:ctrlp_follow_symlinks=1
let g:ctrlp_lazy_update = 1
" }


" Ctrl+S
imap <C-s> <Esc>:wa!<cr>i<Right>
nmap <C-s> :wa!<cr>
set nocompatible
source $VIMRUNTIME/mswin.vim
behave mswin

" Neocomplcache {
let g:acp_enableAtStartup = 0
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_enable_camel_case_completion = 1
let g:neocomplcache_enable_underbar_completion = 1
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
            \ 'default' : '',
            \ 'vimshell' : $HOME.'/.vimshell_hist',
            \ 'scheme' : $HOME.'/.gosh_completions'
            \ }

" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
    let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
imap <C-k>     <Plug>(neocomplcache_snippets_expand)
smap <C-k>     <Plug>(neocomplcache_snippets_expand)
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" Recommended key-mappings.
inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><C-TAB>  pumvisible() ? "\<C-p>" : "\<C-TAB>"
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

" Enable omni completion.
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete

" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
    let g:neocomplcache_omni_patterns = {}
endif

let g:neocomplcache_omni_patterns.c = '\%(\.\|->\)\h\w*'
let g:neocomplcache_omni_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'
"}

" Neosnippet {
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For snippet_complete marker.
if has('conceal')
    set conceallevel=2 concealcursor=i
endif

" Load my snippets
let g:neosnippet#snippets_directory = '$HOME/.vim/snippets'
" }

" settings of cscope.
" I use GNU global instead cscope because global is faster.
set cscopetag
set cscopeprg=gtags-cscope
set cscopequickfix=c-,d-,e-,f-,g0,i-,s-,t-
nmap <silent> <leader>gd <ESC>:cstag <c-r><c-w><CR>
nmap <silent> <leader>gc <ESC>:lcs f c <c-r><c-w><cr>:lw<cr>
nmap <silent> <leader>gs <ESC>:lcs f s <c-r><c-w><cr>:lw<cr>
command! -nargs=+ -complete=dir FindFiles :call FindFiles(<f-args>)
au VimEnter * call VimEnterCallback()
au BufAdd *.[ch] call FindGtags(expand('<afile>'))
au BufWritePost *.[ch] call UpdateGtags(expand('<afile>'))

function! FindFiles(pat, ...)
    let path = ''
    for str in a:000
        let path .= str . ','
    endfor

    if path == ''
        let path = &path
    endif

    echo 'finding...'
    redraw
    call append(line('$'), split(globpath(path, a:pat), '\n'))
    echo 'finding...done!'
    redraw
endfunc

function! VimEnterCallback()
    for f in argv()
        if fnamemodify(f, ':e') != 'c' && fnamemodify(f, ':e') != 'h'
            continue
        endif

        call FindGtags(f)
    endfor
endfunc

function! FindGtags(f)
    let dir = fnamemodify(a:f, ':p:h')
    let depth = 20
    while depth > 0
        if has('win32') || has('win64')
            let tmp = dir . '\GTAGS'
        else
            let tmp = dir . '/GTAGS'
        endif

        if filereadable(tmp)
            exe 'cs add ' . tmp . ' ' . dir
            break
        elseif dir == '/'
            break
        endif

        let dir = fnamemodify(dir, ":h")
        let depth -= 1
    endwhile
endfunc

function! UpdateGtags(f)
    let dir = fnamemodify(a:f, ':p:h')
    " echoerr "FindGtags1" dir 
    if has('win32') || has('win64')
        exe 'silent !cd ' . dir . ' && global -u'
    else
        exe 'silent !cd ' . dir . ' && global -u &> /dev/null &'
    endif
endfunction



set diffexpr=MyDiff()
function MyDiff()
    let opt = '-a --binary '
    if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
    if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
    let arg1 = v:fname_in
    if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
    let arg2 = v:fname_new
    if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
    let arg3 = v:fname_out
    if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
    let eq = ''
    if $VIMRUNTIME =~ ' '
        if &sh =~ '\<cmd'
            let cmd = '""' . $VIMRUNTIME . '\diff"'
            let eq = '"'
        else
            let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
        endif
    else
        let cmd = $VIMRUNTIME . '\diff'
    endif
    silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction

